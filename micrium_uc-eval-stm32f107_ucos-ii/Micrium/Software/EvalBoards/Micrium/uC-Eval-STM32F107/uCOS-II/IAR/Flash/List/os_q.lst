###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.2.4510/W32 for ARM      08/Feb/2013  10:57:21 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\uCOS-II\Source\os_q.c            #
#    Command line =  "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\uCOS-II\Source\os_q.c" -D        #
#                    USE_STDPERIPH_DRIVER -lCN "C:\Users\daniel01\Desktop\Fas #
#                    tFile Test Folder\Micrium\Software\EvalBoards\Micrium\uC #
#                    -Eval-STM32F107\uCOS-II\IAR\Flash\List\" -o              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\daniel01\Desktop\FastFile Test       #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\IAR\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\" -I                          #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\OS\uCOS-II\" -I               #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\ST\STM32\inc\" -I             #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\uCOS-II\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\IAR\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\Ports\ARM-Cortex- #
#                    M3\IAR\" -I "C:\Users\daniel01\Desktop\FastFile Test     #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR #
#                    \" -I "C:\Users\daniel01\Desktop\FastFile Test           #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex #
#                    -M3\Generic\IAR\" -I "C:\Users\daniel01\Desktop\FastFile #
#                     Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval #
#                    -STM32F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Source\"   #
#                    -On --use_c++_inline                                     #
#    List file    =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\os_q.lst                     #
#    Object file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\os_q.o                        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\daniel01\Desktop\FastFile Test Folder\Micrium\Software\uCOS-II\Source\os_q.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                        MESSAGE QUEUE MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2012, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_Q.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.92.07
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micrium to properly license
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #define  MICRIUM_SOURCE
     25          
     26          #ifndef  OS_MASTER_FILE
     27          #include <ucos_ii.h>
     28          #endif
     29          
     30          #if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
     31          /*
     32          *********************************************************************************************************
     33          *                                      ACCEPT MESSAGE FROM QUEUE
     34          *
     35          * Description: This function checks the queue to see if a message is available.  Unlike OSQPend(),
     36          *              OSQAccept() does not suspend the calling task if a message is not available.
     37          *
     38          * Arguments  : pevent        is a pointer to the event control block
     39          *
     40          *              perr          is a pointer to where an error message will be deposited.  Possible error
     41          *                            messages are:
     42          *
     43          *                            OS_ERR_NONE         The call was successful and your task received a
     44          *                                                message.
     45          *                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
     46          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
     47          *                            OS_ERR_Q_EMPTY      The queue did not contain any messages
     48          *
     49          * Returns    : != (void *)0  is the message in the queue if one is available.  The message is removed
     50          *                            from the so the next time OSQAccept() is called, the queue will contain
     51          *                            one less entry.
     52          *              == (void *)0  if you received a NULL pointer message
     53          *                            if the queue is empty or,
     54          *                            if 'pevent' is a NULL pointer or,
     55          *                            if you passed an invalid event type
     56          *
     57          * Note(s)    : As of V2.60, you can now pass NULL pointers through queues.  Because of this, the argument
     58          *              'perr' has been added to the API to tell you about the outcome of the call.
     59          *********************************************************************************************************
     60          */
     61          
     62          #if OS_Q_ACCEPT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     63          void  *OSQAccept (OS_EVENT  *pevent,
     64                            INT8U     *perr)
     65          {
   \                     OSQAccept:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
     66              void      *pmsg;
     67              OS_Q      *pq;
     68          #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
     69              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
     70          #endif
     71          
     72          
     73          
     74          #ifdef OS_SAFETY_CRITICAL
     75              if (perr == (INT8U *)0) {
     76                  OS_SAFETY_CRITICAL_EXCEPTION();
     77                  return ((void *)0);
     78              }
     79          #endif
     80          
     81          #if OS_ARG_CHK_EN > 0u
     82              if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
     83                  *perr = OS_ERR_PEVENT_NULL;
     84                  return ((void *)0);
     85              }
     86          #endif
     87              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD003             BEQ.N    ??OSQAccept_0
     88                  *perr = OS_ERR_EVENT_TYPE;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x7028             STRB     R0,[R5, #+0]
     89                  return ((void *)0);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE020             B.N      ??OSQAccept_1
     90              }
     91              OS_ENTER_CRITICAL();
   \                     ??OSQAccept_0:
   \   0000001A   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001E   0x4680             MOV      R8,R0
     92              pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   \   00000020   0x6860             LDR      R0,[R4, #+4]
   \   00000022   0x0007             MOVS     R7,R0
     93              if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
   \   00000024   0x8AF8             LDRH     R0,[R7, #+22]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD010             BEQ.N    ??OSQAccept_2
     94                  pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   \   0000002A   0x6938             LDR      R0,[R7, #+16]
   \   0000002C   0x1D01             ADDS     R1,R0,#+4
   \   0000002E   0x6139             STR      R1,[R7, #+16]
   \   00000030   0x6800             LDR      R0,[R0, #+0]
   \   00000032   0x0006             MOVS     R6,R0
     95                  pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   \   00000034   0x8AF8             LDRH     R0,[R7, #+22]
   \   00000036   0x1E40             SUBS     R0,R0,#+1
   \   00000038   0x82F8             STRH     R0,[R7, #+22]
     96                  if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   \   0000003A   0x6938             LDR      R0,[R7, #+16]
   \   0000003C   0x68B9             LDR      R1,[R7, #+8]
   \   0000003E   0x4288             CMP      R0,R1
   \   00000040   0xD101             BNE.N    ??OSQAccept_3
     97                      pq->OSQOut = pq->OSQStart;
   \   00000042   0x6878             LDR      R0,[R7, #+4]
   \   00000044   0x6138             STR      R0,[R7, #+16]
     98                  }
     99                  *perr = OS_ERR_NONE;
   \                     ??OSQAccept_3:
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x7028             STRB     R0,[R5, #+0]
   \   0000004A   0xE003             B.N      ??OSQAccept_4
    100              } else {
    101                  *perr = OS_ERR_Q_EMPTY;
   \                     ??OSQAccept_2:
   \   0000004C   0x201F             MOVS     R0,#+31
   \   0000004E   0x7028             STRB     R0,[R5, #+0]
    102                  pmsg  = (void *)0;                       /* Queue is empty                                     */
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x0006             MOVS     R6,R0
    103              }
    104              OS_EXIT_CRITICAL();
   \                     ??OSQAccept_4:
   \   00000054   0x4640             MOV      R0,R8
   \   00000056   0x.... 0x....      BL       OS_CPU_SR_Restore
    105              return (pmsg);                               /* Return message received (or NULL)                  */
   \   0000005A   0x0030             MOVS     R0,R6
   \                     ??OSQAccept_1:
   \   0000005C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    106          }
    107          #endif
    108          /*$PAGE*/
    109          /*
    110          *********************************************************************************************************
    111          *                                       CREATE A MESSAGE QUEUE
    112          *
    113          * Description: This function creates a message queue if free event control blocks are available.
    114          *
    115          * Arguments  : start         is a pointer to the base address of the message queue storage area.  The
    116          *                            storage area MUST be declared as an array of pointers to 'void' as follows
    117          *
    118          *                            void *MessageStorage[size]
    119          *
    120          *              size          is the number of elements in the storage area
    121          *
    122          * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
    123          *                                created queue
    124          *              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
    125          *********************************************************************************************************
    126          */
    127          

   \                                 In section .text, align 2, keep-with-next
    128          OS_EVENT  *OSQCreate (void    **start,
    129                                INT16U    size)
    130          {
   \                     OSQCreate:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    131              OS_EVENT  *pevent;
    132              OS_Q      *pq;
    133          #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    134              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0xF05F 0x0800      MOVS     R8,#+0
    135          #endif
    136          
    137          
    138          
    139          #ifdef OS_SAFETY_CRITICAL_IEC61508
    140              if (OSSafetyCriticalStartFlag == OS_TRUE) {
    141                  OS_SAFETY_CRITICAL_EXCEPTION();
    142                  return ((OS_EVENT *)0);
    143              }
    144          #endif
    145          
    146              if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD001             BEQ.N    ??OSQCreate_0
    147                  return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE04C             B.N      ??OSQCreate_1
    148              }
    149              OS_ENTER_CRITICAL();
   \                     ??OSQCreate_0:
   \   0000001A   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001E   0x4680             MOV      R8,R0
    150              pevent = OSEventFreeList;                    /* Get next free event control block                  */
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0x0006             MOVS     R6,R0
    151              if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD006             BEQ.N    ??OSQCreate_2
    152                  OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   \   00000032   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x6840             LDR      R0,[R0, #+4]
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable3_1
   \   0000003E   0x6008             STR      R0,[R1, #+0]
    153              }
    154              OS_EXIT_CRITICAL();
   \                     ??OSQCreate_2:
   \   00000040   0x4640             MOV      R0,R8
   \   00000042   0x.... 0x....      BL       OS_CPU_SR_Restore
    155              if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
   \   00000046   0x2E00             CMP      R6,#+0
   \   00000048   0xD033             BEQ.N    ??OSQCreate_3
    156                  OS_ENTER_CRITICAL();
   \   0000004A   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000004E   0x4680             MOV      R8,R0
    157                  pq = OSQFreeList;                        /* Get a free queue control block                     */
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0x0007             MOVS     R7,R0
    158                  if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
   \   00000058   0x2F00             CMP      R7,#+0
   \   0000005A   0xD01E             BEQ.N    ??OSQCreate_4
    159                      OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable3_2
   \   00000064   0x6809             LDR      R1,[R1, #+0]
   \   00000066   0x6809             LDR      R1,[R1, #+0]
   \   00000068   0x6001             STR      R1,[R0, #+0]
    160                      OS_EXIT_CRITICAL();
   \   0000006A   0x4640             MOV      R0,R8
   \   0000006C   0x.... 0x....      BL       OS_CPU_SR_Restore
    161                      pq->OSQStart           = start;               /*      Initialize the queue                 */
   \   00000070   0x607C             STR      R4,[R7, #+4]
    162                      pq->OSQEnd             = &start[size];
   \   00000072   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000074   0xEB14 0x0085      ADDS     R0,R4,R5, LSL #+2
   \   00000078   0x60B8             STR      R0,[R7, #+8]
    163                      pq->OSQIn              = start;
   \   0000007A   0x60FC             STR      R4,[R7, #+12]
    164                      pq->OSQOut             = start;
   \   0000007C   0x613C             STR      R4,[R7, #+16]
    165                      pq->OSQSize            = size;
   \   0000007E   0x82BD             STRH     R5,[R7, #+20]
    166                      pq->OSQEntries         = 0u;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x82F8             STRH     R0,[R7, #+22]
    167                      pevent->OSEventType    = OS_EVENT_TYPE_Q;
   \   00000084   0x2002             MOVS     R0,#+2
   \   00000086   0x7030             STRB     R0,[R6, #+0]
    168                      pevent->OSEventCnt     = 0u;
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0x8130             STRH     R0,[R6, #+8]
    169                      pevent->OSEventPtr     = pq;
   \   0000008C   0x6077             STR      R7,[R6, #+4]
    170          #if OS_EVENT_NAME_EN > 0u
    171                      pevent->OSEventName    = (INT8U *)(void *)"?";
   \   0000008E   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   00000090   0x6170             STR      R0,[R6, #+20]
    172          #endif
    173                      OS_EventWaitListInit(pevent);                 /*      Initialize the wait list             */
   \   00000092   0x0030             MOVS     R0,R6
   \   00000094   0x.... 0x....      BL       OS_EventWaitListInit
   \   00000098   0xE00B             B.N      ??OSQCreate_3
    174                  } else {
    175                      pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
   \                     ??OSQCreate_4:
   \   0000009A   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   0000009E   0x6800             LDR      R0,[R0, #+0]
   \   000000A0   0x6070             STR      R0,[R6, #+4]
    176                      OSEventFreeList    = pevent;
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   000000A6   0x6006             STR      R6,[R0, #+0]
    177                      OS_EXIT_CRITICAL();
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0x.... 0x....      BL       OS_CPU_SR_Restore
    178                      pevent = (OS_EVENT *)0;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x0006             MOVS     R6,R0
    179                  }
    180              }
    181              return (pevent);
   \                     ??OSQCreate_3:
   \   000000B2   0x0030             MOVS     R0,R6
   \                     ??OSQCreate_1:
   \   000000B4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    182          }
    183          /*$PAGE*/
    184          /*
    185          *********************************************************************************************************
    186          *                                       DELETE A MESSAGE QUEUE
    187          *
    188          * Description: This function deletes a message queue and readies all tasks pending on the queue.
    189          *
    190          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    191          *                            queue.
    192          *
    193          *              opt           determines delete options as follows:
    194          *                            opt == OS_DEL_NO_PEND   Delete the queue ONLY if no task pending
    195          *                            opt == OS_DEL_ALWAYS    Deletes the queue even if tasks are waiting.
    196          *                                                    In this case, all the tasks pending will be readied.
    197          *
    198          *              perr          is a pointer to an error code that can contain one of the following values:
    199          *                            OS_ERR_NONE             The call was successful and the queue was deleted
    200          *                            OS_ERR_DEL_ISR          If you tried to delete the queue from an ISR
    201          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    202          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the queue
    203          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a queue
    204          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    205          *
    206          * Returns    : pevent        upon error
    207          *              (OS_EVENT *)0 if the queue was successfully deleted.
    208          *
    209          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    210          *                 the queue MUST check the return code of OSQPend().
    211          *              2) OSQAccept() callers will not know that the intended queue has been deleted unless
    212          *                 they check 'pevent' to see that it's a NULL pointer.
    213          *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
    214          *                 time is directly proportional to the number of tasks waiting on the queue.
    215          *              4) Because ALL tasks pending on the queue will be readied, you MUST be careful in
    216          *                 applications where the queue is used for mutual exclusion because the resource(s)
    217          *                 will no longer be guarded by the queue.
    218          *              5) If the storage for the message queue was allocated dynamically (i.e. using a malloc()
    219          *                 type call) then your application MUST release the memory storage by call the counterpart
    220          *                 call of the dynamic allocation scheme used.  If the queue storage was created statically
    221          *                 then, the storage can be reused.
    222          *              6) All tasks that were waiting for the queue will be readied and returned an 
    223          *                 OS_ERR_PEND_ABORT if OSQDel() was called with OS_DEL_ALWAYS
    224          *********************************************************************************************************
    225          */
    226          
    227          #if OS_Q_DEL_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    228          OS_EVENT  *OSQDel (OS_EVENT  *pevent,
    229                             INT8U      opt,
    230                             INT8U     *perr)
    231          {
   \                     OSQDel:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    232              BOOLEAN    tasks_waiting;
    233              OS_EVENT  *pevent_return;
    234              OS_Q      *pq;
    235          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    236              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0A00      MOVS     R10,#+0
    237          #endif
    238          
    239          
    240          
    241          #ifdef OS_SAFETY_CRITICAL
    242              if (perr == (INT8U *)0) {
    243                  OS_SAFETY_CRITICAL_EXCEPTION();
    244                  return ((OS_EVENT *)0);
    245              }
    246          #endif
    247          
    248          #if OS_ARG_CHK_EN > 0u
    249              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    250                  *perr = OS_ERR_PEVENT_NULL;
    251                  return (pevent);
    252              }
    253          #endif
    254              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD003             BEQ.N    ??OSQDel_0
    255                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7030             STRB     R0,[R6, #+0]
    256                  return (pevent);
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0xE079             B.N      ??OSQDel_1
    257              }
    258              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \                     ??OSQDel_0:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD003             BEQ.N    ??OSQDel_2
    259                  *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   \   00000026   0x200F             MOVS     R0,#+15
   \   00000028   0x7030             STRB     R0,[R6, #+0]
    260                  return (pevent);
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0xE070             B.N      ??OSQDel_1
    261              }
    262              OS_ENTER_CRITICAL();
   \                     ??OSQDel_2:
   \   0000002E   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000032   0x4682             MOV      R10,R0
    263              if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on queue        */
   \   00000034   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD002             BEQ.N    ??OSQDel_3
    264                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x0007             MOVS     R7,R0
   \   0000003E   0xE001             B.N      ??OSQDel_4
    265              } else {
    266                  tasks_waiting = OS_FALSE;                          /* No                                       */
   \                     ??OSQDel_3:
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x0007             MOVS     R7,R0
    267              }
    268              switch (opt) {
   \                     ??OSQDel_4:
   \   00000044   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   00000046   0x2D00             CMP      R5,#+0
   \   00000048   0xD002             BEQ.N    ??OSQDel_5
   \   0000004A   0x2D01             CMP      R5,#+1
   \   0000004C   0xD02A             BEQ.N    ??OSQDel_6
   \   0000004E   0xE058             B.N      ??OSQDel_7
    269                  case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
    270                       if (tasks_waiting == OS_FALSE) {
   \                     ??OSQDel_5:
   \   00000050   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000052   0x2F00             CMP      R7,#+0
   \   00000054   0xD11F             BNE.N    ??OSQDel_8
    271          #if OS_EVENT_NAME_EN > 0u
    272                           pevent->OSEventName    = (INT8U *)(void *)"?";
   \   00000056   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   00000058   0x6160             STR      R0,[R4, #+20]
    273          #endif
    274                           pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0x4681             MOV      R9,R0
    275                           pq->OSQPtr             = OSQFreeList;
   \   0000005E   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   00000062   0x6800             LDR      R0,[R0, #+0]
   \   00000064   0xF8C9 0x0000      STR      R0,[R9, #+0]
    276                           OSQFreeList            = pq;
   \   00000068   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   0000006C   0xF8C0 0x9000      STR      R9,[R0, #+0]
    277                           pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x7020             STRB     R0,[R4, #+0]
    278                           pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000078   0x6800             LDR      R0,[R0, #+0]
   \   0000007A   0x6060             STR      R0,[R4, #+4]
    279                           pevent->OSEventCnt     = 0u;
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x8120             STRH     R0,[R4, #+8]
    280                           OSEventFreeList        = pevent;          /* Get next free event control block        */
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   00000084   0x6004             STR      R4,[R0, #+0]
    281                           OS_EXIT_CRITICAL();
   \   00000086   0x4650             MOV      R0,R10
   \   00000088   0x.... 0x....      BL       OS_CPU_SR_Restore
    282                           *perr                  = OS_ERR_NONE;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x7030             STRB     R0,[R6, #+0]
    283                           pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x4680             MOV      R8,R0
   \   00000094   0xE005             B.N      ??OSQDel_9
    284                       } else {
    285                           OS_EXIT_CRITICAL();
   \                     ??OSQDel_8:
   \   00000096   0x4650             MOV      R0,R10
   \   00000098   0x.... 0x....      BL       OS_CPU_SR_Restore
    286                           *perr                  = OS_ERR_TASK_WAITING;
   \   0000009C   0x2049             MOVS     R0,#+73
   \   0000009E   0x7030             STRB     R0,[R6, #+0]
    287                           pevent_return          = pevent;
   \   000000A0   0x46A0             MOV      R8,R4
    288                       }
    289                       break;
   \                     ??OSQDel_9:
   \   000000A2   0xE034             B.N      ??OSQDel_10
    290          
    291                  case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
    292                       while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for queue        */
   \                     ??OSQDel_6:
   \   000000A4   0x7AA0             LDRB     R0,[R4, #+10]
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD006             BEQ.N    ??OSQDel_11
    293                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   \   000000AA   0x2302             MOVS     R3,#+2
   \   000000AC   0x2204             MOVS     R2,#+4
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x0020             MOVS     R0,R4
   \   000000B2   0x.... 0x....      BL       OS_EventTaskRdy
   \   000000B6   0xE7F5             B.N      ??OSQDel_6
    294                       }
    295          #if OS_EVENT_NAME_EN > 0u
    296                       pevent->OSEventName    = (INT8U *)(void *)"?";
   \                     ??OSQDel_11:
   \   000000B8   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   000000BA   0x6160             STR      R0,[R4, #+20]
    297          #endif
    298                       pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
   \   000000BC   0x6860             LDR      R0,[R4, #+4]
   \   000000BE   0x4681             MOV      R9,R0
    299                       pq->OSQPtr             = OSQFreeList;
   \   000000C0   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0xF8C9 0x0000      STR      R0,[R9, #+0]
    300                       OSQFreeList            = pq;
   \   000000CA   0x.... 0x....      LDR.W    R0,??DataTable3_2
   \   000000CE   0xF8C0 0x9000      STR      R9,[R0, #+0]
    301                       pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x7020             STRB     R0,[R4, #+0]
    302                       pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   \   000000D6   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   000000DA   0x6800             LDR      R0,[R0, #+0]
   \   000000DC   0x6060             STR      R0,[R4, #+4]
    303                       pevent->OSEventCnt     = 0u;
   \   000000DE   0x2000             MOVS     R0,#+0
   \   000000E0   0x8120             STRH     R0,[R4, #+8]
    304                       OSEventFreeList        = pevent;              /* Get next free event control block        */
   \   000000E2   0x.... 0x....      LDR.W    R0,??DataTable3_1
   \   000000E6   0x6004             STR      R4,[R0, #+0]
    305                       OS_EXIT_CRITICAL();
   \   000000E8   0x4650             MOV      R0,R10
   \   000000EA   0x.... 0x....      BL       OS_CPU_SR_Restore
    306                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   \   000000EE   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   000000F0   0x2F01             CMP      R7,#+1
   \   000000F2   0xD101             BNE.N    ??OSQDel_12
    307                           OS_Sched();                               /* Find highest priority task ready to run  */
   \   000000F4   0x.... 0x....      BL       OS_Sched
    308                       }
    309                       *perr                  = OS_ERR_NONE;
   \                     ??OSQDel_12:
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x7030             STRB     R0,[R6, #+0]
    310                       pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x4680             MOV      R8,R0
    311                       break;
   \   00000100   0xE005             B.N      ??OSQDel_10
    312          
    313                  default:
    314                       OS_EXIT_CRITICAL();
   \                     ??OSQDel_7:
   \   00000102   0x4650             MOV      R0,R10
   \   00000104   0x.... 0x....      BL       OS_CPU_SR_Restore
    315                       *perr                  = OS_ERR_INVALID_OPT;
   \   00000108   0x2007             MOVS     R0,#+7
   \   0000010A   0x7030             STRB     R0,[R6, #+0]
    316                       pevent_return          = pevent;
   \   0000010C   0x46A0             MOV      R8,R4
    317                       break;
    318              }
    319              return (pevent_return);
   \                     ??OSQDel_10:
   \   0000010E   0x4640             MOV      R0,R8
   \                     ??OSQDel_1:
   \   00000110   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    320          }
    321          #endif
    322          
    323          /*$PAGE*/
    324          /*
    325          *********************************************************************************************************
    326          *                                             FLUSH QUEUE
    327          *
    328          * Description : This function is used to flush the contents of the message queue.
    329          *
    330          * Arguments   : none
    331          *
    332          * Returns     : OS_ERR_NONE         upon success
    333          *               OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue
    334          *               OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
    335          *
    336          * WARNING     : You should use this function with great care because, when to flush the queue, you LOOSE
    337          *               the references to what the queue entries are pointing to and thus, you could cause
    338          *               'memory leaks'.  In other words, the data you are pointing to that's being referenced
    339          *               by the queue entries should, most likely, need to be de-allocated (i.e. freed).
    340          *********************************************************************************************************
    341          */
    342          
    343          #if OS_Q_FLUSH_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    344          INT8U  OSQFlush (OS_EVENT *pevent)
    345          {
   \                     OSQFlush:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    346              OS_Q      *pq;
    347          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    348              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2600             MOVS     R6,#+0
    349          #endif
    350          
    351          
    352          
    353          #if OS_ARG_CHK_EN > 0u
    354              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    355                  return (OS_ERR_PEVENT_NULL);
    356              }
    357              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
    358                  return (OS_ERR_EVENT_TYPE);
    359              }
    360          #endif
    361              OS_ENTER_CRITICAL();
   \   00000006   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000000A   0x0006             MOVS     R6,R0
    362              pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
   \   0000000C   0x6860             LDR      R0,[R4, #+4]
   \   0000000E   0x0005             MOVS     R5,R0
    363              pq->OSQIn      = pq->OSQStart;
   \   00000010   0x6868             LDR      R0,[R5, #+4]
   \   00000012   0x60E8             STR      R0,[R5, #+12]
    364              pq->OSQOut     = pq->OSQStart;
   \   00000014   0x6868             LDR      R0,[R5, #+4]
   \   00000016   0x6128             STR      R0,[R5, #+16]
    365              pq->OSQEntries = 0u;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x82E8             STRH     R0,[R5, #+22]
    366              OS_EXIT_CRITICAL();
   \   0000001C   0x0030             MOVS     R0,R6
   \   0000001E   0x.... 0x....      BL       OS_CPU_SR_Restore
    367              return (OS_ERR_NONE);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD70             POP      {R4-R6,PC}       ;; return
    368          }
    369          #endif
    370          
    371          /*$PAGE*/
    372          /*
    373          *********************************************************************************************************
    374          *                                    PEND ON A QUEUE FOR A MESSAGE
    375          *
    376          * Description: This function waits for a message to be sent to a queue
    377          *
    378          * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
    379          *
    380          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    381          *                            wait for a message to arrive at the queue up to the amount of time
    382          *                            specified by this argument.  If you specify 0, however, your task will wait
    383          *                            forever at the specified queue or, until a message arrives.
    384          *
    385          *              perr          is a pointer to where an error message will be deposited.  Possible error
    386          *                            messages are:
    387          *
    388          *                            OS_ERR_NONE         The call was successful and your task received a
    389          *                                                message.
    390          *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
    391          *                            OS_ERR_PEND_ABORT   The wait on the queue was aborted.
    392          *                            OS_ERR_EVENT_TYPE   You didn't pass a pointer to a queue
    393          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
    394          *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
    395          *                                                would lead to a suspension.
    396          *                            OS_ERR_PEND_LOCKED  If you called this function with the scheduler is locked
    397          *
    398          * Returns    : != (void *)0  is a pointer to the message received
    399          *              == (void *)0  if you received a NULL pointer message or,
    400          *                            if no message was received or,
    401          *                            if 'pevent' is a NULL pointer or,
    402          *                            if you didn't pass a pointer to a queue.
    403          *
    404          * Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
    405          *********************************************************************************************************
    406          */
    407          

   \                                 In section .text, align 2, keep-with-next
    408          void  *OSQPend (OS_EVENT  *pevent,
    409                          INT32U     timeout,
    410                          INT8U     *perr)
    411          {
   \                     OSQPend:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    412              void      *pmsg;
    413              OS_Q      *pq;
    414          #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    415              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0900      MOVS     R9,#+0
    416          #endif
    417          
    418          
    419          
    420          #ifdef OS_SAFETY_CRITICAL
    421              if (perr == (INT8U *)0) {
    422                  OS_SAFETY_CRITICAL_EXCEPTION();
    423                  return ((void *)0);
    424              }
    425          #endif
    426          
    427          #if OS_ARG_CHK_EN > 0u
    428              if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
    429                  *perr = OS_ERR_PEVENT_NULL;
    430                  return ((void *)0);
    431              }
    432          #endif
    433              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD003             BEQ.N    ??OSQPend_0
    434                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7030             STRB     R0,[R6, #+0]
    435                  return ((void *)0);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE091             B.N      ??OSQPend_1
    436              }
    437              if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
   \                     ??OSQPend_0:
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable3
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD003             BEQ.N    ??OSQPend_2
    438                  *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x7030             STRB     R0,[R6, #+0]
    439                  return ((void *)0);
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xE088             B.N      ??OSQPend_1
    440              }
    441              if (OSLockNesting > 0u) {                    /* See if called with scheduler locked ...            */
   \                     ??OSQPend_2:
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable3_3
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD003             BEQ.N    ??OSQPend_3
    442                  *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
   \   00000038   0x200D             MOVS     R0,#+13
   \   0000003A   0x7030             STRB     R0,[R6, #+0]
    443                  return ((void *)0);
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xE07F             B.N      ??OSQPend_1
    444              }
    445              OS_ENTER_CRITICAL();
   \                     ??OSQPend_3:
   \   00000040   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000044   0x4681             MOV      R9,R0
    446              pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
   \   00000046   0x6860             LDR      R0,[R4, #+4]
   \   00000048   0x4680             MOV      R8,R0
    447              if (pq->OSQEntries > 0u) {                   /* See if any messages in the queue                   */
   \   0000004A   0xF8B8 0x0016      LDRH     R0,[R8, #+22]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD01C             BEQ.N    ??OSQPend_4
    448                  pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
   \   00000052   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   00000056   0x1D01             ADDS     R1,R0,#+4
   \   00000058   0xF8C8 0x1010      STR      R1,[R8, #+16]
   \   0000005C   0x6800             LDR      R0,[R0, #+0]
   \   0000005E   0x0007             MOVS     R7,R0
    449                  pq->OSQEntries--;                        /* Update the number of entries in the queue          */
   \   00000060   0xF8B8 0x0016      LDRH     R0,[R8, #+22]
   \   00000064   0x1E40             SUBS     R0,R0,#+1
   \   00000066   0xF8A8 0x0016      STRH     R0,[R8, #+22]
    450                  if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
   \   0000006A   0xF8D8 0x0010      LDR      R0,[R8, #+16]
   \   0000006E   0xF8D8 0x1008      LDR      R1,[R8, #+8]
   \   00000072   0x4288             CMP      R0,R1
   \   00000074   0xD103             BNE.N    ??OSQPend_5
    451                      pq->OSQOut = pq->OSQStart;
   \   00000076   0xF8D8 0x0004      LDR      R0,[R8, #+4]
   \   0000007A   0xF8C8 0x0010      STR      R0,[R8, #+16]
    452                  }
    453                  OS_EXIT_CRITICAL();
   \                     ??OSQPend_5:
   \   0000007E   0x4648             MOV      R0,R9
   \   00000080   0x.... 0x....      BL       OS_CPU_SR_Restore
    454                  *perr = OS_ERR_NONE;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x7030             STRB     R0,[R6, #+0]
    455                  return (pmsg);                           /* Return message received                            */
   \   00000088   0x0038             MOVS     R0,R7
   \   0000008A   0xE059             B.N      ??OSQPend_1
    456              }
    457              OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
   \                     ??OSQPend_4:
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   00000090   0x6800             LDR      R0,[R0, #+0]
   \   00000092   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \   00000096   0xF050 0x0004      ORRS     R0,R0,#0x4
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable3_4
   \   0000009E   0x6809             LDR      R1,[R1, #+0]
   \   000000A0   0xF881 0x0034      STRB     R0,[R1, #+52]
    458              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   \   000000A4   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   000000A8   0x6800             LDR      R0,[R0, #+0]
   \   000000AA   0x2100             MOVS     R1,#+0
   \   000000AC   0xF880 0x1035      STRB     R1,[R0, #+53]
    459              OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   000000B4   0x6800             LDR      R0,[R0, #+0]
   \   000000B6   0x6305             STR      R5,[R0, #+48]
    460              OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
   \   000000B8   0x0020             MOVS     R0,R4
   \   000000BA   0x.... 0x....      BL       OS_EventTaskWait
    461              OS_EXIT_CRITICAL();
   \   000000BE   0x4648             MOV      R0,R9
   \   000000C0   0x.... 0x....      BL       OS_CPU_SR_Restore
    462              OS_Sched();                                  /* Find next highest priority task ready to run       */
   \   000000C4   0x.... 0x....      BL       OS_Sched
    463              OS_ENTER_CRITICAL();
   \   000000C8   0x.... 0x....      BL       OS_CPU_SR_Save
   \   000000CC   0x4681             MOV      R9,R0
    464              switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   \   000000CE   0x.... 0x....      LDR.W    R0,??DataTable3_4
   \   000000D2   0x6800             LDR      R0,[R0, #+0]
   \   000000D4   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xD002             BEQ.N    ??OSQPend_6
   \   000000DC   0x2802             CMP      R0,#+2
   \   000000DE   0xD007             BEQ.N    ??OSQPend_7
   \   000000E0   0xE00B             B.N      ??OSQPend_8
    465                  case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
    466                       pmsg =  OSTCBCur->OSTCBMsg;
   \                     ??OSQPend_6:
   \   000000E2   0x....             LDR.N    R0,??DataTable3_4
   \   000000E4   0x6800             LDR      R0,[R0, #+0]
   \   000000E6   0x6A40             LDR      R0,[R0, #+36]
   \   000000E8   0x0007             MOVS     R7,R0
    467                      *perr =  OS_ERR_NONE;
   \   000000EA   0x2000             MOVS     R0,#+0
   \   000000EC   0x7030             STRB     R0,[R6, #+0]
    468                       break;
   \   000000EE   0xE00D             B.N      ??OSQPend_9
    469          
    470                  case OS_STAT_PEND_ABORT:
    471                       pmsg = (void *)0;
   \                     ??OSQPend_7:
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x0007             MOVS     R7,R0
    472                      *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   \   000000F4   0x200E             MOVS     R0,#+14
   \   000000F6   0x7030             STRB     R0,[R6, #+0]
    473                       break;
   \   000000F8   0xE008             B.N      ??OSQPend_9
    474          
    475                  case OS_STAT_PEND_TO:
    476                  default:
    477                       OS_EventTaskRemove(OSTCBCur, pevent);
   \                     ??OSQPend_8:
   \   000000FA   0x0021             MOVS     R1,R4
   \   000000FC   0x....             LDR.N    R0,??DataTable3_4
   \   000000FE   0x6800             LDR      R0,[R0, #+0]
   \   00000100   0x.... 0x....      BL       OS_EventTaskRemove
    478                       pmsg = (void *)0;
   \   00000104   0x2000             MOVS     R0,#+0
   \   00000106   0x0007             MOVS     R7,R0
    479                      *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   \   00000108   0x200A             MOVS     R0,#+10
   \   0000010A   0x7030             STRB     R0,[R6, #+0]
    480                       break;
    481              }
    482              OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   \                     ??OSQPend_9:
   \   0000010C   0x....             LDR.N    R0,??DataTable3_4
   \   0000010E   0x6800             LDR      R0,[R0, #+0]
   \   00000110   0x2100             MOVS     R1,#+0
   \   00000112   0xF880 0x1034      STRB     R1,[R0, #+52]
    483              OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   \   00000116   0x....             LDR.N    R0,??DataTable3_4
   \   00000118   0x6800             LDR      R0,[R0, #+0]
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0xF880 0x1035      STRB     R1,[R0, #+53]
    484              OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   \   00000120   0x....             LDR.N    R0,??DataTable3_4
   \   00000122   0x6800             LDR      R0,[R0, #+0]
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x61C1             STR      R1,[R0, #+28]
    485          #if (OS_EVENT_MULTI_EN > 0u)
    486              OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   \   00000128   0x....             LDR.N    R0,??DataTable3_4
   \   0000012A   0x6800             LDR      R0,[R0, #+0]
   \   0000012C   0x2100             MOVS     R1,#+0
   \   0000012E   0x6201             STR      R1,[R0, #+32]
    487          #endif
    488              OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   \   00000130   0x....             LDR.N    R0,??DataTable3_4
   \   00000132   0x6800             LDR      R0,[R0, #+0]
   \   00000134   0x2100             MOVS     R1,#+0
   \   00000136   0x6241             STR      R1,[R0, #+36]
    489              OS_EXIT_CRITICAL();
   \   00000138   0x4648             MOV      R0,R9
   \   0000013A   0x.... 0x....      BL       OS_CPU_SR_Restore
    490              return (pmsg);                                    /* Return received message                       */
   \   0000013E   0x0038             MOVS     R0,R7
   \                     ??OSQPend_1:
   \   00000140   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    491          }
    492          /*$PAGE*/
    493          /*
    494          *********************************************************************************************************
    495          *                                  ABORT WAITING ON A MESSAGE QUEUE
    496          *
    497          * Description: This function aborts & readies any tasks currently waiting on a queue.  This function
    498          *              should be used to fault-abort the wait on the queue, rather than to normally signal
    499          *              the queue via OSQPost(), OSQPostFront() or OSQPostOpt().
    500          *
    501          * Arguments  : pevent        is a pointer to the event control block associated with the desired queue.
    502          *
    503          *              opt           determines the type of ABORT performed:
    504          *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
    505          *                                                     queue
    506          *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
    507          *                                                     queue
    508          *
    509          *              perr          is a pointer to where an error message will be deposited.  Possible error
    510          *                            messages are:
    511          *
    512          *                            OS_ERR_NONE         No tasks were     waiting on the queue.
    513          *                            OS_ERR_PEND_ABORT   At least one task waiting on the queue was readied
    514          *                                                and informed of the aborted wait; check return value
    515          *                                                for the number of tasks whose wait on the queue
    516          *                                                was aborted.
    517          *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a queue.
    518          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    519          *
    520          * Returns    : == 0          if no tasks were waiting on the queue, or upon error.
    521          *              >  0          if one or more tasks waiting on the queue are now readied and informed.
    522          *********************************************************************************************************
    523          */
    524          
    525          #if OS_Q_PEND_ABORT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    526          INT8U  OSQPendAbort (OS_EVENT  *pevent,
    527                               INT8U      opt,
    528                               INT8U     *perr)
    529          {
   \                     OSQPendAbort:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    530              INT8U      nbr_tasks;
    531          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    532              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    533          #endif
    534          
    535          
    536          
    537          #ifdef OS_SAFETY_CRITICAL
    538              if (perr == (INT8U *)0) {
    539                  OS_SAFETY_CRITICAL_EXCEPTION();
    540                  return (0u);
    541              }
    542          #endif
    543          
    544          #if OS_ARG_CHK_EN > 0u
    545              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    546                  *perr = OS_ERR_PEVENT_NULL;
    547                  return (0u);
    548              }
    549          #endif
    550              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD003             BEQ.N    ??OSQPendAbort_0
    551                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7030             STRB     R0,[R6, #+0]
    552                  return (0u);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE02D             B.N      ??OSQPendAbort_1
    553              }
    554              OS_ENTER_CRITICAL();
   \                     ??OSQPendAbort_0:
   \   0000001C   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000020   0x4680             MOV      R8,R0
    555              if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on queue?        */
   \   00000022   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD021             BEQ.N    ??OSQPendAbort_2
    556                  nbr_tasks = 0u;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0007             MOVS     R7,R0
    557                  switch (opt) {
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D01             CMP      R5,#+1
   \   00000030   0xD10B             BNE.N    ??OSQPendAbort_3
    558                      case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
    559                           while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on queue    */
   \                     ??OSQPendAbort_4:
   \   00000032   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD007             BEQ.N    ??OSQPendAbort_5
    560                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   \   00000038   0x2302             MOVS     R3,#+2
   \   0000003A   0x2204             MOVS     R2,#+4
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       OS_EventTaskRdy
    561                               nbr_tasks++;
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
   \   00000046   0xE7F4             B.N      ??OSQPendAbort_4
    562                           }
    563                           break;
   \                     ??OSQPendAbort_5:
   \   00000048   0xE006             B.N      ??OSQPendAbort_6
    564          
    565                      case OS_PEND_OPT_NONE:
    566                      default:                                       /* No,  ready HPT       waiting on queue    */
    567                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
   \                     ??OSQPendAbort_3:
   \   0000004A   0x2302             MOVS     R3,#+2
   \   0000004C   0x2204             MOVS     R2,#+4
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       OS_EventTaskRdy
    568                           nbr_tasks++;
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
    569                           break;
    570                  }
    571                  OS_EXIT_CRITICAL();
   \                     ??OSQPendAbort_6:
   \   00000058   0x4640             MOV      R0,R8
   \   0000005A   0x.... 0x....      BL       OS_CPU_SR_Restore
    572                  OS_Sched();                                        /* Find HPT ready to run                    */
   \   0000005E   0x.... 0x....      BL       OS_Sched
    573                  *perr = OS_ERR_PEND_ABORT;
   \   00000062   0x200E             MOVS     R0,#+14
   \   00000064   0x7030             STRB     R0,[R6, #+0]
    574                  return (nbr_tasks);
   \   00000066   0x0038             MOVS     R0,R7
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xE005             B.N      ??OSQPendAbort_1
    575              }
    576              OS_EXIT_CRITICAL();
   \                     ??OSQPendAbort_2:
   \   0000006C   0x4640             MOV      R0,R8
   \   0000006E   0x.... 0x....      BL       OS_CPU_SR_Restore
    577              *perr = OS_ERR_NONE;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x7030             STRB     R0,[R6, #+0]
    578              return (0u);                                           /* No tasks waiting on queue                */
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??OSQPendAbort_1:
   \   00000078   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    579          }
    580          #endif
    581          
    582          /*$PAGE*/
    583          /*
    584          *********************************************************************************************************
    585          *                                       POST MESSAGE TO A QUEUE
    586          *
    587          * Description: This function sends a message to a queue
    588          *
    589          * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
    590          *
    591          *              pmsg          is a pointer to the message to send.
    592          *
    593          * Returns    : OS_ERR_NONE           The call was successful and the message was sent
    594          *              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
    595          *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
    596          *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
    597          *
    598          * Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
    599          *********************************************************************************************************
    600          */
    601          
    602          #if OS_Q_POST_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    603          INT8U  OSQPost (OS_EVENT  *pevent,
    604                          void      *pmsg)
    605          {
   \                     OSQPost:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    606              OS_Q      *pq;
    607          #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    608              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0x2700             MOVS     R7,#+0
    609          #endif
    610          
    611          
    612          
    613          #if OS_ARG_CHK_EN > 0u
    614              if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    615                  return (OS_ERR_PEVENT_NULL);
    616              }
    617          #endif
    618              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD001             BEQ.N    ??OSQPost_0
    619                  return (OS_ERR_EVENT_TYPE);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE02F             B.N      ??OSQPost_1
    620              }
    621              OS_ENTER_CRITICAL();
   \                     ??OSQPost_0:
   \   00000014   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000018   0x0007             MOVS     R7,R0
    622              if (pevent->OSEventGrp != 0u) {                    /* See if any task pending on queue             */
   \   0000001A   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD00D             BEQ.N    ??OSQPost_2
    623                                                                 /* Ready highest priority task waiting on event */
    624                  (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x2204             MOVS     R2,#+4
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       OS_EventTaskRdy
   \   0000002C   0x4680             MOV      R8,R0
    625                  OS_EXIT_CRITICAL();
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       OS_CPU_SR_Restore
    626                  OS_Sched();                                    /* Find highest priority task ready to run      */
   \   00000034   0x.... 0x....      BL       OS_Sched
    627                  return (OS_ERR_NONE);
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE01B             B.N      ??OSQPost_1
    628              }
    629              pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
   \                     ??OSQPost_2:
   \   0000003C   0x6860             LDR      R0,[R4, #+4]
   \   0000003E   0x0006             MOVS     R6,R0
    630              if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
   \   00000040   0x8AF0             LDRH     R0,[R6, #+22]
   \   00000042   0x8AB1             LDRH     R1,[R6, #+20]
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD304             BCC.N    ??OSQPost_3
    631                  OS_EXIT_CRITICAL();
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x.... 0x....      BL       OS_CPU_SR_Restore
    632                  return (OS_ERR_Q_FULL);
   \   0000004E   0x201E             MOVS     R0,#+30
   \   00000050   0xE010             B.N      ??OSQPost_1
    633              }
    634              *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
   \                     ??OSQPost_3:
   \   00000052   0x68F0             LDR      R0,[R6, #+12]
   \   00000054   0x1D01             ADDS     R1,R0,#+4
   \   00000056   0x60F1             STR      R1,[R6, #+12]
   \   00000058   0x6005             STR      R5,[R0, #+0]
    635              pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
   \   0000005A   0x8AF0             LDRH     R0,[R6, #+22]
   \   0000005C   0x1C40             ADDS     R0,R0,#+1
   \   0000005E   0x82F0             STRH     R0,[R6, #+22]
    636              if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
   \   00000060   0x68F0             LDR      R0,[R6, #+12]
   \   00000062   0x68B1             LDR      R1,[R6, #+8]
   \   00000064   0x4288             CMP      R0,R1
   \   00000066   0xD101             BNE.N    ??OSQPost_4
    637                  pq->OSQIn = pq->OSQStart;
   \   00000068   0x6870             LDR      R0,[R6, #+4]
   \   0000006A   0x60F0             STR      R0,[R6, #+12]
    638              }
    639              OS_EXIT_CRITICAL();
   \                     ??OSQPost_4:
   \   0000006C   0x0038             MOVS     R0,R7
   \   0000006E   0x.... 0x....      BL       OS_CPU_SR_Restore
    640              return (OS_ERR_NONE);
   \   00000072   0x2000             MOVS     R0,#+0
   \                     ??OSQPost_1:
   \   00000074   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    641          }
    642          #endif
    643          /*$PAGE*/
    644          /*
    645          *********************************************************************************************************
    646          *                                POST MESSAGE TO THE FRONT OF A QUEUE
    647          *
    648          * Description: This function sends a message to a queue but unlike OSQPost(), the message is posted at
    649          *              the front instead of the end of the queue.  Using OSQPostFront() allows you to send
    650          *              'priority' messages.
    651          *
    652          * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
    653          *
    654          *              pmsg          is a pointer to the message to send.
    655          *
    656          * Returns    : OS_ERR_NONE           The call was successful and the message was sent
    657          *              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
    658          *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
    659          *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
    660          *
    661          * Note(s)    : As of V2.60, this function allows you to send NULL pointer messages.
    662          *********************************************************************************************************
    663          */
    664          
    665          #if OS_Q_POST_FRONT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    666          INT8U  OSQPostFront (OS_EVENT  *pevent,
    667                               void      *pmsg)
    668          {
   \                     OSQPostFront:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    669              OS_Q      *pq;
    670          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    671              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0x2700             MOVS     R7,#+0
    672          #endif
    673          
    674          
    675          
    676          #if OS_ARG_CHK_EN > 0u
    677              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    678                  return (OS_ERR_PEVENT_NULL);
    679              }
    680          #endif
    681              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD001             BEQ.N    ??OSQPostFront_0
    682                  return (OS_ERR_EVENT_TYPE);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE030             B.N      ??OSQPostFront_1
    683              }
    684              OS_ENTER_CRITICAL();
   \                     ??OSQPostFront_0:
   \   00000014   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000018   0x0007             MOVS     R7,R0
    685              if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on queue              */
   \   0000001A   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD00D             BEQ.N    ??OSQPostFront_2
    686                                                                /* Ready highest priority task waiting on event  */
    687                  (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x2204             MOVS     R2,#+4
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       OS_EventTaskRdy
   \   0000002C   0x4680             MOV      R8,R0
    688                  OS_EXIT_CRITICAL();
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       OS_CPU_SR_Restore
    689                  OS_Sched();                                   /* Find highest priority task ready to run       */
   \   00000034   0x.... 0x....      BL       OS_Sched
    690                  return (OS_ERR_NONE);
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE01C             B.N      ??OSQPostFront_1
    691              }
    692              pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   \                     ??OSQPostFront_2:
   \   0000003C   0x6860             LDR      R0,[R4, #+4]
   \   0000003E   0x0006             MOVS     R6,R0
    693              if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   \   00000040   0x8AF0             LDRH     R0,[R6, #+22]
   \   00000042   0x8AB1             LDRH     R1,[R6, #+20]
   \   00000044   0x4288             CMP      R0,R1
   \   00000046   0xD304             BCC.N    ??OSQPostFront_3
    694                  OS_EXIT_CRITICAL();
   \   00000048   0x0038             MOVS     R0,R7
   \   0000004A   0x.... 0x....      BL       OS_CPU_SR_Restore
    695                  return (OS_ERR_Q_FULL);
   \   0000004E   0x201E             MOVS     R0,#+30
   \   00000050   0xE011             B.N      ??OSQPostFront_1
    696              }
    697              if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
   \                     ??OSQPostFront_3:
   \   00000052   0x6930             LDR      R0,[R6, #+16]
   \   00000054   0x6871             LDR      R1,[R6, #+4]
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD101             BNE.N    ??OSQPostFront_4
    698                  pq->OSQOut = pq->OSQEnd;
   \   0000005A   0x68B0             LDR      R0,[R6, #+8]
   \   0000005C   0x6130             STR      R0,[R6, #+16]
    699              }
    700              pq->OSQOut--;
   \                     ??OSQPostFront_4:
   \   0000005E   0x6930             LDR      R0,[R6, #+16]
   \   00000060   0x1F00             SUBS     R0,R0,#+4
   \   00000062   0x6130             STR      R0,[R6, #+16]
    701              *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
   \   00000064   0x6930             LDR      R0,[R6, #+16]
   \   00000066   0x6005             STR      R5,[R0, #+0]
    702              pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   \   00000068   0x8AF0             LDRH     R0,[R6, #+22]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x82F0             STRH     R0,[R6, #+22]
    703              OS_EXIT_CRITICAL();
   \   0000006E   0x0038             MOVS     R0,R7
   \   00000070   0x.... 0x....      BL       OS_CPU_SR_Restore
    704              return (OS_ERR_NONE);
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??OSQPostFront_1:
   \   00000076   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    705          }
    706          #endif
    707          /*$PAGE*/
    708          /*
    709          *********************************************************************************************************
    710          *                                       POST MESSAGE TO A QUEUE
    711          *
    712          * Description: This function sends a message to a queue.  This call has been added to reduce code size
    713          *              since it can replace both OSQPost() and OSQPostFront().  Also, this function adds the
    714          *              capability to broadcast a message to ALL tasks waiting on the message queue.
    715          *
    716          * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
    717          *
    718          *              pmsg          is a pointer to the message to send.
    719          *
    720          *              opt           determines the type of POST performed:
    721          *                            OS_POST_OPT_NONE         POST to a single waiting task
    722          *                                                     (Identical to OSQPost())
    723          *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the queue
    724          *                            OS_POST_OPT_FRONT        POST as LIFO (Simulates OSQPostFront())
    725          *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
    726          *
    727          * Returns    : OS_ERR_NONE           The call was successful and the message was sent
    728          *              OS_ERR_Q_FULL         If the queue cannot accept any more messages because it is full.
    729          *              OS_ERR_EVENT_TYPE     If you didn't pass a pointer to a queue.
    730          *              OS_ERR_PEVENT_NULL    If 'pevent' is a NULL pointer
    731          *
    732          * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
    733          *              interrupt disable time is proportional to the number of tasks waiting on the queue.
    734          *********************************************************************************************************
    735          */
    736          
    737          #if OS_Q_POST_OPT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    738          INT8U  OSQPostOpt (OS_EVENT  *pevent,
    739                             void      *pmsg,
    740                             INT8U      opt)
    741          {
   \                     OSQPostOpt:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    742              OS_Q      *pq;
    743          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    744              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    745          #endif
    746          
    747          
    748          
    749          #if OS_ARG_CHK_EN > 0u
    750              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    751                  return (OS_ERR_PEVENT_NULL);
    752              }
    753          #endif
    754              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD001             BEQ.N    ??OSQPostOpt_0
    755                  return (OS_ERR_EVENT_TYPE);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE04A             B.N      ??OSQPostOpt_1
    756              }
    757              OS_ENTER_CRITICAL();
   \                     ??OSQPostOpt_0:
   \   00000018   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001C   0x4680             MOV      R8,R0
    758              if (pevent->OSEventGrp != 0x00u) {                /* See if any task pending on queue              */
   \   0000001E   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD01A             BEQ.N    ??OSQPostOpt_2
    759                  if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
   \   00000024   0x07F0             LSLS     R0,R6,#+31
   \   00000026   0xD509             BPL.N    ??OSQPostOpt_3
    760                      while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on queue       */
   \                     ??OSQPostOpt_4:
   \   00000028   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD00C             BEQ.N    ??OSQPostOpt_5
    761                          (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   \   0000002E   0x2300             MOVS     R3,#+0
   \   00000030   0x2204             MOVS     R2,#+4
   \   00000032   0x0029             MOVS     R1,R5
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       OS_EventTaskRdy
   \   0000003A   0xE7F5             B.N      ??OSQPostOpt_4
    762                      }
    763                  } else {                                      /* No,  Post to HPT waiting on queue             */
    764                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
   \                     ??OSQPostOpt_3:
   \   0000003C   0x2300             MOVS     R3,#+0
   \   0000003E   0x2204             MOVS     R2,#+4
   \   00000040   0x0029             MOVS     R1,R5
   \   00000042   0x0020             MOVS     R0,R4
   \   00000044   0x.... 0x....      BL       OS_EventTaskRdy
    765                  }
    766                  OS_EXIT_CRITICAL();
   \                     ??OSQPostOpt_5:
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0x.... 0x....      BL       OS_CPU_SR_Restore
    767                  if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
   \   0000004E   0x0770             LSLS     R0,R6,#+29
   \   00000050   0xD401             BMI.N    ??OSQPostOpt_6
    768                      OS_Sched();                               /* Find highest priority task ready to run       */
   \   00000052   0x.... 0x....      BL       OS_Sched
    769                  }
    770                  return (OS_ERR_NONE);
   \                     ??OSQPostOpt_6:
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0xE029             B.N      ??OSQPostOpt_1
    771              }
    772              pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
   \                     ??OSQPostOpt_2:
   \   0000005A   0x6860             LDR      R0,[R4, #+4]
   \   0000005C   0x0007             MOVS     R7,R0
    773              if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
   \   0000005E   0x8AF8             LDRH     R0,[R7, #+22]
   \   00000060   0x8AB9             LDRH     R1,[R7, #+20]
   \   00000062   0x4288             CMP      R0,R1
   \   00000064   0xD304             BCC.N    ??OSQPostOpt_7
    774                  OS_EXIT_CRITICAL();
   \   00000066   0x4640             MOV      R0,R8
   \   00000068   0x.... 0x....      BL       OS_CPU_SR_Restore
    775                  return (OS_ERR_Q_FULL);
   \   0000006C   0x201E             MOVS     R0,#+30
   \   0000006E   0xE01E             B.N      ??OSQPostOpt_1
    776              }
    777              if ((opt & OS_POST_OPT_FRONT) != 0x00u) {         /* Do we post to the FRONT of the queue?         */
   \                     ??OSQPostOpt_7:
   \   00000070   0x07B0             LSLS     R0,R6,#+30
   \   00000072   0xD50B             BPL.N    ??OSQPostOpt_8
    778                  if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
   \   00000074   0x6938             LDR      R0,[R7, #+16]
   \   00000076   0x6879             LDR      R1,[R7, #+4]
   \   00000078   0x4288             CMP      R0,R1
   \   0000007A   0xD101             BNE.N    ??OSQPostOpt_9
    779                      pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
   \   0000007C   0x68B8             LDR      R0,[R7, #+8]
   \   0000007E   0x6138             STR      R0,[R7, #+16]
    780                  }
    781                  pq->OSQOut--;
   \                     ??OSQPostOpt_9:
   \   00000080   0x6938             LDR      R0,[R7, #+16]
   \   00000082   0x1F00             SUBS     R0,R0,#+4
   \   00000084   0x6138             STR      R0,[R7, #+16]
    782                  *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
   \   00000086   0x6938             LDR      R0,[R7, #+16]
   \   00000088   0x6005             STR      R5,[R0, #+0]
   \   0000008A   0xE009             B.N      ??OSQPostOpt_10
    783              } else {                                          /* No,  Post as FIFO                             */
    784                  *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
   \                     ??OSQPostOpt_8:
   \   0000008C   0x68F8             LDR      R0,[R7, #+12]
   \   0000008E   0x1D01             ADDS     R1,R0,#+4
   \   00000090   0x60F9             STR      R1,[R7, #+12]
   \   00000092   0x6005             STR      R5,[R0, #+0]
    785                  if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
   \   00000094   0x68F8             LDR      R0,[R7, #+12]
   \   00000096   0x68B9             LDR      R1,[R7, #+8]
   \   00000098   0x4288             CMP      R0,R1
   \   0000009A   0xD101             BNE.N    ??OSQPostOpt_10
    786                      pq->OSQIn = pq->OSQStart;
   \   0000009C   0x6878             LDR      R0,[R7, #+4]
   \   0000009E   0x60F8             STR      R0,[R7, #+12]
    787                  }
    788              }
    789              pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
   \                     ??OSQPostOpt_10:
   \   000000A0   0x8AF8             LDRH     R0,[R7, #+22]
   \   000000A2   0x1C40             ADDS     R0,R0,#+1
   \   000000A4   0x82F8             STRH     R0,[R7, #+22]
    790              OS_EXIT_CRITICAL();
   \   000000A6   0x4640             MOV      R0,R8
   \   000000A8   0x.... 0x....      BL       OS_CPU_SR_Restore
    791              return (OS_ERR_NONE);
   \   000000AC   0x2000             MOVS     R0,#+0
   \                     ??OSQPostOpt_1:
   \   000000AE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    792          }
    793          #endif
    794          /*$PAGE*/
    795          /*
    796          *********************************************************************************************************
    797          *                                        QUERY A MESSAGE QUEUE
    798          *
    799          * Description: This function obtains information about a message queue.
    800          *
    801          * Arguments  : pevent        is a pointer to the event control block associated with the desired queue
    802          *
    803          *              p_q_data      is a pointer to a structure that will contain information about the message
    804          *                            queue.
    805          *
    806          * Returns    : OS_ERR_NONE         The call was successful and the message was sent
    807          *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non queue.
    808          *              OS_ERR_PEVENT_NULL  If 'pevent'   is a NULL pointer
    809          *              OS_ERR_PDATA_NULL   If 'p_q_data' is a NULL pointer
    810          *********************************************************************************************************
    811          */
    812          
    813          #if OS_Q_QUERY_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    814          INT8U  OSQQuery (OS_EVENT  *pevent,
    815                           OS_Q_DATA *p_q_data)
    816          {
   \                     OSQQuery:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    817              OS_Q       *pq;
    818              INT8U       i;
    819              OS_PRIO    *psrc;
    820              OS_PRIO    *pdest;
    821          #if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    822              OS_CPU_SR   cpu_sr = 0u;
   \   00000008   0xF05F 0x0A00      MOVS     R10,#+0
    823          #endif
    824          
    825          
    826          
    827          #if OS_ARG_CHK_EN > 0u
    828              if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
    829                  return (OS_ERR_PEVENT_NULL);
    830              }
    831              if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
    832                  return (OS_ERR_PDATA_NULL);
    833              }
    834          #endif
    835              if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2802             CMP      R0,#+2
   \   00000010   0xD001             BEQ.N    ??OSQQuery_0
    836                  return (OS_ERR_EVENT_TYPE);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE02C             B.N      ??OSQQuery_1
    837              }
    838              OS_ENTER_CRITICAL();
   \                     ??OSQQuery_0:
   \   00000016   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001A   0x4682             MOV      R10,R0
    839              p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
   \   0000001C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001E   0x7428             STRB     R0,[R5, #+16]
    840              psrc                 = &pevent->OSEventTbl[0];
   \   00000020   0xF204 0x000B      ADDW     R0,R4,#+11
   \   00000024   0x4680             MOV      R8,R0
    841              pdest                = &p_q_data->OSEventTbl[0];
   \   00000026   0xF115 0x0008      ADDS     R0,R5,#+8
   \   0000002A   0x4681             MOV      R9,R0
    842              for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x0007             MOVS     R7,R0
   \                     ??OSQQuery_2:
   \   00000030   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000032   0x2F08             CMP      R7,#+8
   \   00000034   0xD209             BCS.N    ??OSQQuery_3
    843                  *pdest++ = *psrc++;
   \   00000036   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   0000003A   0xF889 0x0000      STRB     R0,[R9, #+0]
   \   0000003E   0xF118 0x0801      ADDS     R8,R8,#+1
   \   00000042   0xF119 0x0901      ADDS     R9,R9,#+1
    844              }
   \   00000046   0x1C7F             ADDS     R7,R7,#+1
   \   00000048   0xE7F2             B.N      ??OSQQuery_2
    845              pq = (OS_Q *)pevent->OSEventPtr;
   \                     ??OSQQuery_3:
   \   0000004A   0x6860             LDR      R0,[R4, #+4]
   \   0000004C   0x0006             MOVS     R6,R0
    846              if (pq->OSQEntries > 0u) {
   \   0000004E   0x8AF0             LDRH     R0,[R6, #+22]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD003             BEQ.N    ??OSQQuery_4
    847                  p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
   \   00000054   0x6930             LDR      R0,[R6, #+16]
   \   00000056   0x6800             LDR      R0,[R0, #+0]
   \   00000058   0x6028             STR      R0,[R5, #+0]
   \   0000005A   0xE001             B.N      ??OSQQuery_5
    848              } else {
    849                  p_q_data->OSMsg = (void *)0;
   \                     ??OSQQuery_4:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x6028             STR      R0,[R5, #+0]
    850              }
    851              p_q_data->OSNMsgs = pq->OSQEntries;
   \                     ??OSQQuery_5:
   \   00000060   0x8AF0             LDRH     R0,[R6, #+22]
   \   00000062   0x80A8             STRH     R0,[R5, #+4]
    852              p_q_data->OSQSize = pq->OSQSize;
   \   00000064   0x8AB0             LDRH     R0,[R6, #+20]
   \   00000066   0x80E8             STRH     R0,[R5, #+6]
    853              OS_EXIT_CRITICAL();
   \   00000068   0x4650             MOV      R0,R10
   \   0000006A   0x.... 0x....      BL       OS_CPU_SR_Restore
    854              return (OS_ERR_NONE);
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??OSQQuery_1:
   \   00000070   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    855          }
    856          #endif                                                 /* OS_Q_QUERY_EN                                */
    857          
    858          /*$PAGE*/
    859          /*
    860          *********************************************************************************************************
    861          *                                     QUEUE MODULE INITIALIZATION
    862          *
    863          * Description : This function is called by uC/OS-II to initialize the message queue module.  Your
    864          *               application MUST NOT call this function.
    865          *
    866          * Arguments   :  none
    867          *
    868          * Returns     : none
    869          *
    870          * Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
    871          *********************************************************************************************************
    872          */
    873          

   \                                 In section .text, align 2, keep-with-next
    874          void  OS_QInit (void)
    875          {
   \                     OS_QInit:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    876          #if OS_MAX_QS == 1u
    877              OSQFreeList         = &OSQTbl[0];                /* Only ONE queue!                                */
    878              OSQFreeList->OSQPtr = (OS_Q *)0;
    879          #endif
    880          
    881          #if OS_MAX_QS >= 2u
    882              INT16U   ix;
    883              INT16U   ix_next;
    884              OS_Q    *pq1;
    885              OS_Q    *pq2;
    886          
    887          
    888          
    889              OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
   \   00000002   0x2160             MOVS     R1,#+96
   \   00000004   0x....             LDR.N    R0,??DataTable3_5
   \   00000006   0x.... 0x....      BL       OS_MemClr
    890              for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x0004             MOVS     R4,R0
   \                     ??OS_QInit_0:
   \   0000000E   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000010   0x2C03             CMP      R4,#+3
   \   00000012   0xD210             BCS.N    ??OS_QInit_1
    891                  ix_next = ix + 1u;
   \   00000014   0x1C60             ADDS     R0,R4,#+1
   \   00000016   0x0005             MOVS     R5,R0
    892                  pq1 = &OSQTbl[ix];
   \   00000018   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   0000001A   0x2018             MOVS     R0,#+24
   \   0000001C   0x....             LDR.N    R1,??DataTable3_5
   \   0000001E   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000022   0x0006             MOVS     R6,R0
    893                  pq2 = &OSQTbl[ix_next];
   \   00000024   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   00000026   0x2018             MOVS     R0,#+24
   \   00000028   0x....             LDR.N    R1,??DataTable3_5
   \   0000002A   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000002E   0x0007             MOVS     R7,R0
    894                  pq1->OSQPtr = pq2;
   \   00000030   0x6037             STR      R7,[R6, #+0]
    895              }
   \   00000032   0x1C64             ADDS     R4,R4,#+1
   \   00000034   0xE7EB             B.N      ??OS_QInit_0
    896              pq1         = &OSQTbl[ix];
   \                     ??OS_QInit_1:
   \   00000036   0xB2A4             UXTH     R4,R4            ;; ZeroExt  R4,R4,#+16,#+16
   \   00000038   0x2018             MOVS     R0,#+24
   \   0000003A   0x....             LDR.N    R1,??DataTable3_5
   \   0000003C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000040   0x0006             MOVS     R6,R0
    897              pq1->OSQPtr = (OS_Q *)0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x6030             STR      R0,[R6, #+0]
    898              OSQFreeList = &OSQTbl[0];
   \   00000046   0x....             LDR.N    R0,??DataTable3_2
   \   00000048   0x....             LDR.N    R1,??DataTable3_5
   \   0000004A   0x6001             STR      R1,[R0, #+0]
    899          #endif
    900          }
   \   0000004C   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x3F 0x00          DC8      "\?",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     OSEventFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     OSQFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     OSLockNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     OSQTbl

   \                                 In section .rodata, align 2
   \   00000000   0x3F 0x00          DC8 "?"
    901          #endif                                               /* OS_Q_EN                                        */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   OSQAccept
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
      24   OSQCreate
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventWaitListInit
      32   OSQDel
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
        32   -> OS_EventTaskRdy
        32   -> OS_Sched
      16   OSQFlush
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
      32   OSQPend
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
        32   -> OS_EventTaskRemove
        32   -> OS_EventTaskWait
        32   -> OS_Sched
      24   OSQPendAbort
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      24   OSQPost
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      24   OSQPostFront
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      24   OSQPostOpt
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      32   OSQQuery
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
      24   OS_QInit
        24   -> OS_MemClr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "?">
       4  ??DataTable2
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
      96  OSQAccept
     184  OSQCreate
     276  OSQDel
      38  OSQFlush
     324  OSQPend
     124  OSQPendAbort
     120  OSQPost
     122  OSQPostFront
     178  OSQPostOpt
     116  OSQQuery
      78  OS_QInit

 
     2 bytes in section .rodata
 1 684 bytes in section .text
 
 1 684 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none

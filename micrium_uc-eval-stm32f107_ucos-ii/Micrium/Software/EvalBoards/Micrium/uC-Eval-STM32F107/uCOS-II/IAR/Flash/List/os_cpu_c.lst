###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.2.4510/W32 for ARM      08/Feb/2013  10:57:21 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Gene #
#                    ric\IAR\os_cpu_c.c                                       #
#    Command line =  "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Gene #
#                    ric\IAR\os_cpu_c.c" -D USE_STDPERIPH_DRIVER -lCN         #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\" -o                         #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\daniel01\Desktop\FastFile Test       #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\IAR\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\" -I                          #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\OS\uCOS-II\" -I               #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\ST\STM32\inc\" -I             #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\uCOS-II\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\IAR\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\Ports\ARM-Cortex- #
#                    M3\IAR\" -I "C:\Users\daniel01\Desktop\FastFile Test     #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR #
#                    \" -I "C:\Users\daniel01\Desktop\FastFile Test           #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex #
#                    -M3\Generic\IAR\" -I "C:\Users\daniel01\Desktop\FastFile #
#                     Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval #
#                    -STM32F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Source\"   #
#                    -On --use_c++_inline                                     #
#    List file    =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\os_cpu_c.lst                 #
#    Object file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\os_cpu_c.o                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\daniel01\Desktop\FastFile Test Folder\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_cpu_c.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_CPU_C.C
     13          * Version   : V2.89
     14          * By        : Jean J. Labrosse
     15          *             Brian Nagel
     16          *
     17          * For       : ARMv7M Cortex-M3
     18          * Mode      : Thumb2
     19          * Toolchain : IAR EWARM
     20          *********************************************************************************************************
     21          */
     22          
     23          #define  OS_CPU_GLOBALS
     24          #include <ucos_ii.h>

   \                                 In section .bss, align 4
   \   __absolute OS_STK OS_CPU_ExceptStk[128U]
   \                     OS_CPU_ExceptStk:
   \   00000000                      DS8 512

   \                                 In section .bss, align 4
   \   __absolute unsigned int *OS_CPU_ExceptStkBase
   \                     OS_CPU_ExceptStkBase:
   \   00000000                      DS8 4
     25          
     26          /*
     27          *********************************************************************************************************
     28          *                                          LOCAL VARIABLES
     29          *********************************************************************************************************
     30          */
     31          
     32          #if OS_TMR_EN > 0u

   \                                 In section .bss, align 2
     33          static  INT16U  OSTmrCtr;
   \                     OSTmrCtr:
   \   00000000                      DS8 2
     34          #endif
     35          
     36          /*
     37          *********************************************************************************************************
     38          *                                          SYS TICK DEFINES
     39          *********************************************************************************************************
     40          */
     41          
     42          #define  OS_CPU_CM3_NVIC_ST_CTRL    (*((volatile INT32U *)0xE000E010uL)) /* SysTick Ctrl & Status Reg. */
     43          #define  OS_CPU_CM3_NVIC_ST_RELOAD  (*((volatile INT32U *)0xE000E014uL)) /* SysTick Reload  Value Reg. */
     44          #define  OS_CPU_CM3_NVIC_ST_CURRENT (*((volatile INT32U *)0xE000E018uL)) /* SysTick Current Value Reg. */
     45          #define  OS_CPU_CM3_NVIC_ST_CAL     (*((volatile INT32U *)0xE000E01CuL)) /* SysTick Cal     Value Reg. */
     46          #define  OS_CPU_CM3_NVIC_PRIO_ST    (*((volatile INT8U  *)0xE000ED23uL)) /* SysTick Handler Prio  Reg. */
     47          
     48          #define  OS_CPU_CM3_NVIC_ST_CTRL_COUNT                    0x00010000uL   /* Count flag.                */
     49          #define  OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC                  0x00000004uL   /* Clock Source.              */
     50          #define  OS_CPU_CM3_NVIC_ST_CTRL_INTEN                    0x00000002uL   /* Interrupt enable.          */
     51          #define  OS_CPU_CM3_NVIC_ST_CTRL_ENABLE                   0x00000001uL   /* Counter mode.              */
     52          #define  OS_CPU_CM3_NVIC_PRIO_MIN                               0xFFu    /* Min handler prio.          */
     53          
     54          /*
     55          *********************************************************************************************************
     56          *                                       OS INITIALIZATION HOOK
     57          *                                            (BEGINNING)
     58          *
     59          * Description: This function is called by OSInit() at the beginning of OSInit().
     60          *
     61          * Arguments  : none
     62          *
     63          * Note(s)    : 1) Interrupts should be disabled during this call.
     64          *********************************************************************************************************
     65          */
     66          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     67          void  OSInitHookBegin (void)
     68          {
     69              INT32U   size;
     70              OS_STK  *pstk;
     71          
     72                                                                     /* Clear exception stack for stack checking.*/
     73              pstk = &OS_CPU_ExceptStk[0];
   \                     OSInitHookBegin:
   \   00000000   0x....             LDR.N    R2,??DataTable4
   \   00000002   0x0011             MOVS     R1,R2
     74              size = OS_CPU_EXCEPT_STK_SIZE;
   \   00000004   0x2280             MOVS     R2,#+128
   \   00000006   0x0010             MOVS     R0,R2
     75              while (size > 0u) {
   \                     ??OSInitHookBegin_0:
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD004             BEQ.N    ??OSInitHookBegin_1
     76                  size--;
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
     77                 *pstk++ = (OS_STK)0;
   \   0000000E   0x2200             MOVS     R2,#+0
   \   00000010   0x600A             STR      R2,[R1, #+0]
   \   00000012   0x1D09             ADDS     R1,R1,#+4
   \   00000014   0xE7F8             B.N      ??OSInitHookBegin_0
     78              }
     79          
     80              OS_CPU_ExceptStkBase = &OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE - 1u];
   \                     ??OSInitHookBegin_1:
   \   00000016   0x....             LDR.N    R2,??DataTable4_1
   \   00000018   0x....             LDR.N    R3,??DataTable4_2
   \   0000001A   0x6013             STR      R3,[R2, #+0]
     81          
     82          #if OS_TMR_EN > 0u
     83              OSTmrCtr = 0u;
   \   0000001C   0x....             LDR.N    R2,??DataTable4_3
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x8013             STRH     R3,[R2, #+0]
     84          #endif
     85          }
   \   00000022   0x4770             BX       LR               ;; return
     86          #endif
     87          
     88          /*
     89          *********************************************************************************************************
     90          *                                       OS INITIALIZATION HOOK
     91          *                                               (END)
     92          *
     93          * Description: This function is called by OSInit() at the end of OSInit().
     94          *
     95          * Arguments  : none
     96          *
     97          * Note(s)    : 1) Interrupts should be disabled during this call.
     98          *********************************************************************************************************
     99          */
    100          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    101          void  OSInitHookEnd (void)
    102          {
    103          }
   \                     OSInitHookEnd:
   \   00000000   0x4770             BX       LR               ;; return
    104          #endif
    105          
    106          /*
    107          *********************************************************************************************************
    108          *                                          TASK CREATION HOOK
    109          *
    110          * Description: This function is called when a task is created.
    111          *
    112          * Arguments  : ptcb   is a pointer to the task control block of the task being created.
    113          *
    114          * Note(s)    : 1) Interrupts are disabled during this call.
    115          *********************************************************************************************************
    116          */
    117          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    118          void  OSTaskCreateHook (OS_TCB *ptcb)
    119          {
   \                     OSTaskCreateHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    120          #if OS_APP_HOOKS_EN > 0u
    121              App_TaskCreateHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TaskCreateHook
    122          #else
    123              (void)ptcb;                                  /* Prevent compiler warning                           */
    124          #endif
    125          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    126          #endif
    127          
    128          
    129          /*
    130          *********************************************************************************************************
    131          *                                           TASK DELETION HOOK
    132          *
    133          * Description: This function is called when a task is deleted.
    134          *
    135          * Arguments  : ptcb   is a pointer to the task control block of the task being deleted.
    136          *
    137          * Note(s)    : 1) Interrupts are disabled during this call.
    138          *********************************************************************************************************
    139          */
    140          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    141          void  OSTaskDelHook (OS_TCB *ptcb)
    142          {
   \                     OSTaskDelHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    143          #if OS_APP_HOOKS_EN > 0u
    144              App_TaskDelHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TaskDelHook
    145          #else
    146              (void)ptcb;                                  /* Prevent compiler warning                           */
    147          #endif
    148          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    149          #endif
    150          
    151          /*
    152          *********************************************************************************************************
    153          *                                             IDLE TASK HOOK
    154          *
    155          * Description: This function is called by the idle task.  This hook has been added to allow you to do
    156          *              such things as STOP the CPU to conserve power.
    157          *
    158          * Arguments  : none
    159          *
    160          * Note(s)    : 1) Interrupts are enabled during this call.
    161          *********************************************************************************************************
    162          */
    163          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    164          void  OSTaskIdleHook (void)
    165          {
   \                     OSTaskIdleHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    166          #if OS_APP_HOOKS_EN > 0u
    167              App_TaskIdleHook();
   \   00000002   0x.... 0x....      BL       App_TaskIdleHook
    168          #endif
    169          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    170          #endif
    171          
    172          /*
    173          *********************************************************************************************************
    174          *                                            TASK RETURN HOOK
    175          *
    176          * Description: This function is called if a task accidentally returns.  In other words, a task should
    177          *              either be an infinite loop or delete itself when done.
    178          *
    179          * Arguments  : ptcb      is a pointer to the task control block of the task that is returning.
    180          *
    181          * Note(s)    : none
    182          *********************************************************************************************************
    183          */
    184          
    185          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    186          void  OSTaskReturnHook (OS_TCB  *ptcb)
    187          {
   \                     OSTaskReturnHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    188          #if OS_APP_HOOKS_EN > 0u
    189              App_TaskReturnHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TaskReturnHook
    190          #else
    191              (void)ptcb;
    192          #endif
    193          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    194          #endif
    195          
    196          /*
    197          *********************************************************************************************************
    198          *                                           STATISTIC TASK HOOK
    199          *
    200          * Description: This function is called every second by uC/OS-II's statistics task.  This allows your
    201          *              application to add functionality to the statistics task.
    202          *
    203          * Arguments  : none
    204          *********************************************************************************************************
    205          */
    206          
    207          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    208          void  OSTaskStatHook (void)
    209          {
   \                     OSTaskStatHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    210          #if OS_APP_HOOKS_EN > 0u
    211              App_TaskStatHook();
   \   00000002   0x.... 0x....      BL       App_TaskStatHook
    212          #endif
    213          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    214          #endif
    215          
    216          /*
    217          *********************************************************************************************************
    218          *                                        INITIALIZE A TASK'S STACK
    219          *
    220          * Description: This function is called by either OSTaskCreate() or OSTaskCreateExt() to initialize the
    221          *              stack frame of the task being created.  This function is highly processor specific.
    222          *
    223          * Arguments  : task          is a pointer to the task code
    224          *
    225          *              p_arg         is a pointer to a user supplied data area that will be passed to the task
    226          *                            when the task first executes.
    227          *
    228          *              ptos          is a pointer to the top of stack.  It is assumed that 'ptos' points to
    229          *                            a 'free' entry on the task stack.  If OS_STK_GROWTH is set to 1 then
    230          *                            'ptos' will contain the HIGHEST valid address of the stack.  Similarly, if
    231          *                            OS_STK_GROWTH is set to 0, the 'ptos' will contains the LOWEST valid address
    232          *                            of the stack.
    233          *
    234          *              opt           specifies options that can be used to alter the behavior of OSTaskStkInit().
    235          *                            (see uCOS_II.H for OS_TASK_OPT_xxx).
    236          *
    237          * Returns    : Always returns the location of the new top-of-stack once the processor registers have
    238          *              been placed on the stack in the proper order.
    239          *
    240          * Note(s)    : 1) Interrupts are enabled when your task starts executing.
    241          *              2) All tasks run in Thread mode, using process stack.
    242          *********************************************************************************************************
    243          */
    244          

   \                                 In section .text, align 2, keep-with-next
    245          OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
    246          {
   \                     OSTaskStkInit:
   \   00000000   0xB430             PUSH     {R4,R5}
   \   00000002   0x0004             MOVS     R4,R0
    247              OS_STK *stk;
    248          
    249          
    250              (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    251              stk       = ptos;                            /* Load stack pointer                                 */
   \   00000004   0x0010             MOVS     R0,R2
    252          
    253                                                           /* Registers stacked as if auto-saved on exception    */
    254              *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
   \   00000006   0xF05F 0x7580      MOVS     R5,#+16777216
   \   0000000A   0x6005             STR      R5,[R0, #+0]
    255              *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
   \   0000000C   0x1F00             SUBS     R0,R0,#+4
   \   0000000E   0x6004             STR      R4,[R0, #+0]
    256              *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)                                           */
   \   00000010   0x1F00             SUBS     R0,R0,#+4
   \   00000012   0x....             LDR.N    R5,??DataTable4_4
   \   00000014   0x6005             STR      R5,[R0, #+0]
    257              *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
   \   00000016   0x1F00             SUBS     R0,R0,#+4
   \   00000018   0xF05F 0x3512      MOVS     R5,#+303174162
   \   0000001C   0x6005             STR      R5,[R0, #+0]
    258              *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
   \   0000001E   0x1F00             SUBS     R0,R0,#+4
   \   00000020   0xF05F 0x3503      MOVS     R5,#+50529027
   \   00000024   0x6005             STR      R5,[R0, #+0]
    259              *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
   \   00000026   0x1F00             SUBS     R0,R0,#+4
   \   00000028   0xF05F 0x3502      MOVS     R5,#+33686018
   \   0000002C   0x6005             STR      R5,[R0, #+0]
    260              *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
   \   0000002E   0x1F00             SUBS     R0,R0,#+4
   \   00000030   0xF05F 0x3501      MOVS     R5,#+16843009
   \   00000034   0x6005             STR      R5,[R0, #+0]
    261              *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
   \   00000036   0x1F00             SUBS     R0,R0,#+4
   \   00000038   0x6001             STR      R1,[R0, #+0]
    262          
    263                                                           /* Remaining registers saved on process stack         */
    264              *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
   \   0000003A   0x1F00             SUBS     R0,R0,#+4
   \   0000003C   0xF05F 0x3511      MOVS     R5,#+286331153
   \   00000040   0x6005             STR      R5,[R0, #+0]
    265              *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
   \   00000042   0x1F00             SUBS     R0,R0,#+4
   \   00000044   0xF05F 0x3510      MOVS     R5,#+269488144
   \   00000048   0x6005             STR      R5,[R0, #+0]
    266              *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
   \   0000004A   0x1F00             SUBS     R0,R0,#+4
   \   0000004C   0xF05F 0x3509      MOVS     R5,#+151587081
   \   00000050   0x6005             STR      R5,[R0, #+0]
    267              *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
   \   00000052   0x1F00             SUBS     R0,R0,#+4
   \   00000054   0xF05F 0x3508      MOVS     R5,#+134744072
   \   00000058   0x6005             STR      R5,[R0, #+0]
    268              *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
   \   0000005A   0x1F00             SUBS     R0,R0,#+4
   \   0000005C   0xF05F 0x3507      MOVS     R5,#+117901063
   \   00000060   0x6005             STR      R5,[R0, #+0]
    269              *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
   \   00000062   0x1F00             SUBS     R0,R0,#+4
   \   00000064   0xF05F 0x3506      MOVS     R5,#+101058054
   \   00000068   0x6005             STR      R5,[R0, #+0]
    270              *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
   \   0000006A   0x1F00             SUBS     R0,R0,#+4
   \   0000006C   0xF05F 0x3505      MOVS     R5,#+84215045
   \   00000070   0x6005             STR      R5,[R0, #+0]
    271              *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
   \   00000072   0x1F00             SUBS     R0,R0,#+4
   \   00000074   0xF05F 0x3504      MOVS     R5,#+67372036
   \   00000078   0x6005             STR      R5,[R0, #+0]
    272          
    273              return (stk);
   \   0000007A   0xBC30             POP      {R4,R5}
   \   0000007C   0x4770             BX       LR               ;; return
    274          }
    275          
    276          /*
    277          *********************************************************************************************************
    278          *                                           TASK SWITCH HOOK
    279          *
    280          * Description: This function is called when a task switch is performed.  This allows you to perform other
    281          *              operations during a context switch.
    282          *
    283          * Arguments  : none
    284          *
    285          * Note(s)    : 1) Interrupts are disabled during this call.
    286          *              2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    287          *                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    288          *                 task being switched out (i.e. the preempted task).
    289          *********************************************************************************************************
    290          */
    291          #if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)

   \                                 In section .text, align 2, keep-with-next
    292          void  OSTaskSwHook (void)
    293          {
   \                     OSTaskSwHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    294          #if OS_APP_HOOKS_EN > 0u
    295              App_TaskSwHook();
   \   00000002   0x.... 0x....      BL       App_TaskSwHook
    296          #endif
    297          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    298          #endif
    299          
    300          /*
    301          *********************************************************************************************************
    302          *                                           OS_TCBInit() HOOK
    303          *
    304          * Description: This function is called by OS_TCBInit() after setting up most of the TCB.
    305          *
    306          * Arguments  : ptcb    is a pointer to the TCB of the task being created.
    307          *
    308          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    309          *********************************************************************************************************
    310          */
    311          #if OS_CPU_HOOKS_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    312          void  OSTCBInitHook (OS_TCB *ptcb)
    313          {
   \                     OSTCBInitHook:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    314          #if OS_APP_HOOKS_EN > 0u
    315              App_TCBInitHook(ptcb);
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       App_TCBInitHook
    316          #else
    317              (void)ptcb;                                  /* Prevent compiler warning                           */
    318          #endif
    319          }
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return
    320          #endif
    321          
    322          /*
    323          *********************************************************************************************************
    324          *                                               TICK HOOK
    325          *
    326          * Description: This function is called every tick.
    327          *
    328          * Arguments  : none
    329          *
    330          * Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
    331          *********************************************************************************************************
    332          */
    333          #if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)

   \                                 In section .text, align 2, keep-with-next
    334          void  OSTimeTickHook (void)
    335          {
   \                     OSTimeTickHook:
   \   00000000   0xB580             PUSH     {R7,LR}
    336          #if OS_APP_HOOKS_EN > 0u
    337              App_TimeTickHook();
   \   00000002   0x.... 0x....      BL       App_TimeTickHook
    338          #endif
    339          
    340          #if OS_TMR_EN > 0u
    341              OSTmrCtr++;
   \   00000006   0x....             LDR.N    R0,??DataTable4_3
   \   00000008   0x8800             LDRH     R0,[R0, #+0]
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable4_3
   \   0000000E   0x8008             STRH     R0,[R1, #+0]
    342              if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
   \   00000010   0x....             LDR.N    R0,??DataTable4_3
   \   00000012   0x8800             LDRH     R0,[R0, #+0]
   \   00000014   0x2864             CMP      R0,#+100
   \   00000016   0xDB04             BLT.N    ??OSTimeTickHook_0
    343                  OSTmrCtr = 0;
   \   00000018   0x....             LDR.N    R0,??DataTable4_3
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0x8001             STRH     R1,[R0, #+0]
    344                  OSTmrSignal();
   \   0000001E   0x.... 0x....      BL       OSTmrSignal
    345              }
    346          #endif
    347          }
   \                     ??OSTimeTickHook_0:
   \   00000022   0xBD01             POP      {R0,PC}          ;; return
    348          #endif
    349          
    350          /*
    351          *********************************************************************************************************
    352          *                                          SYS TICK HANDLER
    353          *
    354          * Description: Handle the system tick (SysTick) interrupt, which is used to generate the uC/OS-II tick
    355          *              interrupt.
    356          *
    357          * Arguments  : none.
    358          *
    359          * Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
    360          *********************************************************************************************************
    361          */
    362          

   \                                 In section .text, align 2, keep-with-next
    363          void  OS_CPU_SysTickHandler (void)
    364          {
   \                     OS_CPU_SysTickHandler:
   \   00000000   0xB510             PUSH     {R4,LR}
    365              OS_CPU_SR  cpu_sr;
    366          
    367          
    368              OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
   \   00000002   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000006   0x0004             MOVS     R4,R0
    369              OSIntNesting++;
   \   00000008   0x....             LDR.N    R0,??DataTable4_5
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0x1C40             ADDS     R0,R0,#+1
   \   0000000E   0x....             LDR.N    R1,??DataTable4_5
   \   00000010   0x7008             STRB     R0,[R1, #+0]
    370              OS_EXIT_CRITICAL();
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       OS_CPU_SR_Restore
    371          
    372              OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
   \   00000018   0x.... 0x....      BL       OSTimeTick
    373          
    374              OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
   \   0000001C   0x.... 0x....      BL       OSIntExit
    375          }
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    376          
    377          /*
    378          *********************************************************************************************************
    379          *                                          INITIALIZE SYS TICK
    380          *
    381          * Description: Initialize the SysTick.
    382          *
    383          * Arguments  : cnts          is the number of SysTick counts between two OS tick interrupts.
    384          *
    385          * Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
    386          *********************************************************************************************************
    387          */
    388          

   \                                 In section .text, align 2, keep-with-next
    389          void  OS_CPU_SysTickInit (INT32U  cnts)
    390          {
    391              OS_CPU_CM3_NVIC_ST_RELOAD = cnts - 1u;
   \                     OS_CPU_SysTickInit:
   \   00000000   0x1E41             SUBS     R1,R0,#+1
   \   00000002   0x....             LDR.N    R2,??DataTable4_6  ;; 0xe000e014
   \   00000004   0x6011             STR      R1,[R2, #+0]
    392                                                           /* Set prio of SysTick handler to min prio.           */
    393              OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
   \   00000006   0x....             LDR.N    R1,??DataTable4_7  ;; 0xe000ed23
   \   00000008   0x22FF             MOVS     R2,#+255
   \   0000000A   0x700A             STRB     R2,[R1, #+0]
    394                                                           /* Enable timer.                                      */
    395              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
   \   0000000C   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000e010
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0xF051 0x0105      ORRS     R1,R1,#0x5
   \   00000014   0x....             LDR.N    R2,??DataTable4_8  ;; 0xe000e010
   \   00000016   0x6011             STR      R1,[R2, #+0]
    396                                                           /* Enable timer interrupt.                            */
    397              OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
   \   00000018   0x....             LDR.N    R1,??DataTable4_8  ;; 0xe000e010
   \   0000001A   0x6809             LDR      R1,[R1, #+0]
   \   0000001C   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   00000020   0x....             LDR.N    R2,??DataTable4_8  ;; 0xe000e010
   \   00000022   0x6011             STR      R1,[R2, #+0]
    398          }
   \   00000024   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     OS_CPU_ExceptStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     OS_CPU_ExceptStkBase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     OS_CPU_ExceptStk+0x1FC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     OSTmrCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     OS_TaskReturn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0xE000E014         DC32     0xe000e014

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0xE000ED23         DC32     0xe000ed23

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0xE000E010         DC32     0xe000e010

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSInitHookBegin
       0   OSInitHookEnd
       8   OSTCBInitHook
         8   -> App_TCBInitHook
       8   OSTaskCreateHook
         8   -> App_TaskCreateHook
       8   OSTaskDelHook
         8   -> App_TaskDelHook
       8   OSTaskIdleHook
         8   -> App_TaskIdleHook
       8   OSTaskReturnHook
         8   -> App_TaskReturnHook
       8   OSTaskStatHook
         8   -> App_TaskStatHook
       8   OSTaskStkInit
       8   OSTaskSwHook
         8   -> App_TaskSwHook
       8   OSTimeTickHook
         8   -> App_TimeTickHook
         8   -> OSTmrSignal
       8   OS_CPU_SysTickHandler
         8   -> OSIntExit
         8   -> OSTimeTick
         8   -> OS_CPU_SR_Restore
         8   -> OS_CPU_SR_Save
       0   OS_CPU_SysTickInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
      36  OSInitHookBegin
       2  OSInitHookEnd
      12  OSTCBInitHook
      12  OSTaskCreateHook
      12  OSTaskDelHook
       8  OSTaskIdleHook
      12  OSTaskReturnHook
       8  OSTaskStatHook
     126  OSTaskStkInit
       8  OSTaskSwHook
      36  OSTimeTickHook
       2  OSTmrCtr
     512  OS_CPU_ExceptStk
       4  OS_CPU_ExceptStkBase
      34  OS_CPU_SysTickHandler
      38  OS_CPU_SysTickInit

 
 518 bytes in section .bss
 380 bytes in section .text
 
 380 bytes of CODE memory
 518 bytes of DATA memory

Errors: none
Warnings: none

###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.2.4510/W32 for ARM      08/Feb/2013  10:57:20 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\uC-LIB\lib_ascii.c               #
#    Command line =  "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\uC-LIB\lib_ascii.c" -D           #
#                    USE_STDPERIPH_DRIVER -lCN "C:\Users\daniel01\Desktop\Fas #
#                    tFile Test Folder\Micrium\Software\EvalBoards\Micrium\uC #
#                    -Eval-STM32F107\uCOS-II\IAR\Flash\List\" -o              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\daniel01\Desktop\FastFile Test       #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\IAR\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\" -I                          #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\OS\uCOS-II\" -I               #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\ST\STM32\inc\" -I             #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\uCOS-II\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\IAR\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\Ports\ARM-Cortex- #
#                    M3\IAR\" -I "C:\Users\daniel01\Desktop\FastFile Test     #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR #
#                    \" -I "C:\Users\daniel01\Desktop\FastFile Test           #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex #
#                    -M3\Generic\IAR\" -I "C:\Users\daniel01\Desktop\FastFile #
#                     Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval #
#                    -STM32F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Source\"   #
#                    -On --use_c++_inline                                     #
#    List file    =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\lib_ascii.lst                #
#    Object file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\lib_ascii.o                   #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\daniel01\Desktop\FastFile Test Folder\Micrium\Software\uC-LIB\lib_ascii.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/LIB
      4          *                                        CUSTOM LIBRARY MODULES
      5          *
      6          *                          (c) Copyright 2004-2012; Micrium, Inc.; Weston, FL
      7          *
      8          *               All rights reserved.  Protected by international copyright laws.
      9          *
     10          *               uC/LIB is provided in source form to registered licensees ONLY.  It is 
     11          *               illegal to distribute this source code to any third party unless you receive 
     12          *               written permission by an authorized Micrium representative.  Knowledge of 
     13          *               the source code may NOT be used to develop a similar product.
     14          *
     15          *               Please help us continue to provide the Embedded community with the finest 
     16          *               software available.  Your honesty is greatly appreciated.
     17          *
     18          *               You can contact us at www.micrium.com.
     19          *********************************************************************************************************
     20          */
     21          
     22          /*
     23          *********************************************************************************************************
     24          *
     25          *                                     ASCII CHARACTER OPERATIONS
     26          *
     27          * Filename      : lib_ascii.c
     28          * Version       : V1.37.01
     29          * Programmer(s) : BAN
     30          *                 ITJ
     31          *********************************************************************************************************
     32          * Note(s)       : (1) NO compiler-supplied standard library functions are used in library or product software.
     33          *
     34          *                     (a) ALL standard library functions are implemented in the custom library modules :
     35          *
     36          *                         (1) \<Custom Library Directory>\lib_*.*
     37          *
     38          *                         (2) \<Custom Library Directory>\Ports\<cpu>\<compiler>\lib*_a.*
     39          *
     40          *                               where
     41          *                                       <Custom Library Directory>      directory path for custom library software
     42          *                                       <cpu>                           directory name for specific processor (CPU)
     43          *                                       <compiler>                      directory name for specific compiler
     44          *
     45          *                     (b) Product-specific library functions are implemented in individual products.
     46          *
     47          *
     48          *                 (2) (a) ECMA-6 '7-Bit coded Character Set' (6th edition), which corresponds to the
     49          *                         3rd edition of ISO 646, specifies several versions of a 7-bit character set :
     50          *
     51          *                         (1) THE GENERAL VERSION, which allows characters at 0x23 and 0x24 to be given a
     52          *                             set alternate form and allows the characters 0x40, 0x5B, 0x5D, 0x60, 0x7B &
     53          *                             0x7D to be assigned a "unique graphic character" or to be declared as unused.
     54          *                             All other characters are explicitly specified.
     55          *
     56          *                         (2) THE INTERNATIONAL REFERENCE VERSION, which explicitly specifies all characters
     57          *                             in the 7-bit character set.
     58          *
     59          *                         (3) NATIONAL & APPLICATION-ORIENTED VERSIONS, which may be derived from the
     60          *                             standard in specified ways.
     61          *
     62          *                     (b) The character set represented in this file reproduces the Internation Reference
     63          *                         Version.  This is identical to the 7-bit character set which occupies Unicode
     64          *                         characters 0x0000 through 0x007F.  The character names are taken from v5.0 of the
     65          *                         Unicode specification, with certain abbreviations so that the resulting #define
     66          *                         names will not violate ANSI C naming restriction :
     67          *
     68          *                         (1) For the Latin capital & lowercase letters, the name components 'LETTER_CAPITAL'
     69          *                             & 'LETTER_SMALL' are replaced by 'UPPER' & 'LOWER', respectively.
     70          *********************************************************************************************************
     71          */
     72          
     73          
     74          /*
     75          *********************************************************************************************************
     76          *                                            INCLUDE FILES
     77          *********************************************************************************************************
     78          */
     79          
     80          #define    MICRIUM_SOURCE
     81          #define    LIB_ASCII_MODULE
     82          #include  <lib_ascii.h>
     83          
     84          
     85          /*$PAGE*/
     86          /*
     87          *********************************************************************************************************
     88          *                                            LOCAL DEFINES
     89          *********************************************************************************************************
     90          */
     91          
     92          
     93          /*
     94          *********************************************************************************************************
     95          *                                           LOCAL CONSTANTS
     96          *********************************************************************************************************
     97          */
     98          
     99          
    100          /*
    101          *********************************************************************************************************
    102          *                                          LOCAL DATA TYPES
    103          *********************************************************************************************************
    104          */
    105          
    106          
    107          /*
    108          *********************************************************************************************************
    109          *                                            LOCAL TABLES
    110          *********************************************************************************************************
    111          */
    112          
    113          
    114          /*
    115          *********************************************************************************************************
    116          *                                       LOCAL GLOBAL VARIABLES
    117          *********************************************************************************************************
    118          */
    119          
    120          
    121          /*
    122          *********************************************************************************************************
    123          *                                      LOCAL FUNCTION PROTOTYPES
    124          *********************************************************************************************************
    125          */
    126          
    127          
    128          /*
    129          *********************************************************************************************************
    130          *                                     LOCAL CONFIGURATION ERRORS
    131          *********************************************************************************************************
    132          */
    133          
    134          
    135          /*$PAGE*/
    136          /*
    137          *********************************************************************************************************
    138          *                                           ASCII_IsAlpha()
    139          *
    140          * Description : Determine whether a character is an alphabetic character.
    141          *
    142          * Argument(s) : c           Character to examine.
    143          *
    144          * Return(s)   : DEF_YES, if character is     an alphabetic character.
    145          *
    146          *               DEF_NO,	 if character is NOT an alphabetic character.
    147          *
    148          * Caller(s)   : Application.
    149          *
    150          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.2.(2) states that "isalpha() returns true only for the
    151          *                   characters for which isupper() or islower() is true".
    152          *********************************************************************************************************
    153          */
    154          

   \                                 In section .text, align 2, keep-with-next
    155          CPU_BOOLEAN  ASCII_IsAlpha (CPU_CHAR  c)
    156          {
   \                     ASCII_IsAlpha:
   \   00000000   0x0001             MOVS     R1,R0
    157              CPU_BOOLEAN  alpha;
    158          
    159          
    160              alpha = ASCII_IS_ALPHA(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2941             CMP      R1,#+65
   \   00000006   0xDB04             BLT.N    ??ASCII_IsAlpha_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x295B             CMP      R1,#+91
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsAlpha_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsAlpha_1
   \                     ??ASCII_IsAlpha_0:
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlpha_1:
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD00A             BEQ.N    ??ASCII_IsAlpha_2
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2961             CMP      R1,#+97
   \   0000001C   0xDB04             BLT.N    ??ASCII_IsAlpha_3
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x297B             CMP      R1,#+123
   \   00000022   0xDA01             BGE.N    ??ASCII_IsAlpha_3
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE000             B.N      ??ASCII_IsAlpha_4
   \                     ??ASCII_IsAlpha_3:
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlpha_4:
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD101             BNE.N    ??ASCII_IsAlpha_5
   \                     ??ASCII_IsAlpha_2:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??ASCII_IsAlpha_6
   \                     ??ASCII_IsAlpha_5:
   \   00000032   0x2000             MOVS     R0,#+0
    161          
    162              return (alpha);
   \                     ??ASCII_IsAlpha_6:
   \   00000034   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000036   0x4770             BX       LR               ;; return
    163          }
    164          
    165          
    166          /*
    167          *********************************************************************************************************
    168          *                                         ASCII_IsAlphaNum()
    169          *
    170          * Description : Determine whether a character is an alphanumeric character.
    171          *
    172          * Argument(s) : c           Character to examine.
    173          *
    174          * Return(s)   : DEF_YES, if character is     an alphanumeric character.
    175          *
    176          *               DEF_NO,	 if character is NOT an alphanumeric character.
    177          *
    178          * Caller(s)   : Application.
    179          *
    180          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.1.(2) states that "isalnum() ... tests for any character
    181          *                   for which isalpha() or isdigit() is true".
    182          *********************************************************************************************************
    183          */
    184          

   \                                 In section .text, align 2, keep-with-next
    185          CPU_BOOLEAN  ASCII_IsAlphaNum (CPU_CHAR  c)
    186          {
   \                     ASCII_IsAlphaNum:
   \   00000000   0x0001             MOVS     R1,R0
    187              CPU_BOOLEAN  alpha_num;
    188          
    189          
    190              alpha_num = ASCII_IS_ALPHA_NUM(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2941             CMP      R1,#+65
   \   00000006   0xDB04             BLT.N    ??ASCII_IsAlphaNum_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x295B             CMP      R1,#+91
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsAlphaNum_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsAlphaNum_1
   \                     ??ASCII_IsAlphaNum_0:
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_1:
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD00A             BEQ.N    ??ASCII_IsAlphaNum_2
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2961             CMP      R1,#+97
   \   0000001C   0xDB04             BLT.N    ??ASCII_IsAlphaNum_3
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x297B             CMP      R1,#+123
   \   00000022   0xDA01             BGE.N    ??ASCII_IsAlphaNum_3
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE000             B.N      ??ASCII_IsAlphaNum_4
   \                     ??ASCII_IsAlphaNum_3:
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_4:
   \   0000002A   0x2801             CMP      R0,#+1
   \   0000002C   0xD101             BNE.N    ??ASCII_IsAlphaNum_5
   \                     ??ASCII_IsAlphaNum_2:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xE000             B.N      ??ASCII_IsAlphaNum_6
   \                     ??ASCII_IsAlphaNum_5:
   \   00000032   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_6:
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD00A             BEQ.N    ??ASCII_IsAlphaNum_7
   \   00000038   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000003A   0x2930             CMP      R1,#+48
   \   0000003C   0xDB04             BLT.N    ??ASCII_IsAlphaNum_8
   \   0000003E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000040   0x293A             CMP      R1,#+58
   \   00000042   0xDA01             BGE.N    ??ASCII_IsAlphaNum_8
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xE000             B.N      ??ASCII_IsAlphaNum_9
   \                     ??ASCII_IsAlphaNum_8:
   \   00000048   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsAlphaNum_9:
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD101             BNE.N    ??ASCII_IsAlphaNum_10
   \                     ??ASCII_IsAlphaNum_7:
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xE000             B.N      ??ASCII_IsAlphaNum_11
   \                     ??ASCII_IsAlphaNum_10:
   \   00000052   0x2000             MOVS     R0,#+0
    191          
    192              return (alpha_num);
   \                     ??ASCII_IsAlphaNum_11:
   \   00000054   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000056   0x4770             BX       LR               ;; return
    193          }
    194          
    195          
    196          /*$PAGE*/
    197          /*
    198          *********************************************************************************************************
    199          *                                           ASCII_IsLower()
    200          *
    201          * Description : Determine whether a character is a lowercase alphabetic character.
    202          *
    203          * Argument(s) : c           Character to examine.
    204          *
    205          * Return(s)   : DEF_YES, if character is     a lowercase alphabetic character.
    206          *
    207          *               DEF_NO,	 if character is NOT a lowercase alphabetic character.
    208          *
    209          * Caller(s)   : Application.
    210          *
    211          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.7.(2)  states that "islower() returns true only for
    212          *                   the lowercase letters".
    213          *********************************************************************************************************
    214          */
    215          

   \                                 In section .text, align 2, keep-with-next
    216          CPU_BOOLEAN  ASCII_IsLower (CPU_CHAR  c)
    217          {
   \                     ASCII_IsLower:
   \   00000000   0x0001             MOVS     R1,R0
    218              CPU_BOOLEAN  lower;
    219          
    220          
    221              lower = ASCII_IS_LOWER(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2961             CMP      R1,#+97
   \   00000006   0xDB04             BLT.N    ??ASCII_IsLower_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x297B             CMP      R1,#+123
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsLower_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsLower_1
   \                     ??ASCII_IsLower_0:
   \   00000012   0x2000             MOVS     R0,#+0
    222          
    223              return (lower);
   \                     ??ASCII_IsLower_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    224          }
    225          
    226          
    227          /*
    228          *********************************************************************************************************
    229          *                                           ASCII_IsUpper()
    230          *
    231          * Description : Determine whether a character is an uppercase alphabetic character.
    232          *
    233          * Argument(s) : c           Character to examine.
    234          *
    235          * Return(s)   : DEF_YES, if character is     an uppercase alphabetic character.
    236          *
    237          *               DEF_NO,	 if character is NOT an uppercase alphabetic character.
    238          *
    239          * Caller(s)   : Application.
    240          *
    241          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.11.(2) states that "isupper() returns true only for
    242          *                   the uppercase letters".
    243          *********************************************************************************************************
    244          */
    245          

   \                                 In section .text, align 2, keep-with-next
    246          CPU_BOOLEAN  ASCII_IsUpper (CPU_CHAR  c)
    247          {
   \                     ASCII_IsUpper:
   \   00000000   0x0001             MOVS     R1,R0
    248              CPU_BOOLEAN  upper;
    249          
    250          
    251              upper = ASCII_IS_UPPER(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2941             CMP      R1,#+65
   \   00000006   0xDB04             BLT.N    ??ASCII_IsUpper_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x295B             CMP      R1,#+91
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsUpper_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsUpper_1
   \                     ??ASCII_IsUpper_0:
   \   00000012   0x2000             MOVS     R0,#+0
    252          
    253              return (upper);
   \                     ??ASCII_IsUpper_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    254          }
    255          
    256          
    257          /*$PAGE*/
    258          /*
    259          *********************************************************************************************************
    260          *                                            ASCII_IsDig()
    261          *
    262          * Description : Determine whether a character is a decimal-digit character.
    263          *
    264          * Argument(s) : c           Character to examine.
    265          *
    266          * Return(s)   : DEF_YES, if character is     a decimal-digit character.
    267          *
    268          *               DEF_NO,	 if character is NOT a decimal-digit character.
    269          *
    270          * Caller(s)   : Application.
    271          *
    272          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.5.(2)  states that "isdigit()  ... tests for any
    273          *                   decimal-digit character".
    274          *********************************************************************************************************
    275          */
    276          

   \                                 In section .text, align 2, keep-with-next
    277          CPU_BOOLEAN  ASCII_IsDig (CPU_CHAR  c)
    278          {
   \                     ASCII_IsDig:
   \   00000000   0x0001             MOVS     R1,R0
    279              CPU_BOOLEAN  dig;
    280          
    281          
    282              dig = ASCII_IS_DIG(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2930             CMP      R1,#+48
   \   00000006   0xDB04             BLT.N    ??ASCII_IsDig_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x293A             CMP      R1,#+58
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsDig_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsDig_1
   \                     ??ASCII_IsDig_0:
   \   00000012   0x2000             MOVS     R0,#+0
    283          
    284              return (dig);
   \                     ??ASCII_IsDig_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    285          }
    286          
    287          
    288          /*
    289          *********************************************************************************************************
    290          *                                          ASCII_IsDigOct()
    291          *
    292          * Description : Determine whether a character is an octal-digit character.
    293          *
    294          * Argument(s) : c           Character to examine.
    295          *
    296          * Return(s)   : DEF_YES, if character is     an octal-digit character.
    297          *
    298          *               DEF_NO,	 if character is NOT an octal-digit character.
    299          *
    300          * Caller(s)   : Application.
    301          *
    302          * Note(s)     : none.
    303          *********************************************************************************************************
    304          */
    305          

   \                                 In section .text, align 2, keep-with-next
    306          CPU_BOOLEAN  ASCII_IsDigOct (CPU_CHAR  c)
    307          {
   \                     ASCII_IsDigOct:
   \   00000000   0x0001             MOVS     R1,R0
    308              CPU_BOOLEAN  dig_oct;
    309          
    310          
    311              dig_oct = ASCII_IS_DIG_OCT(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2930             CMP      R1,#+48
   \   00000006   0xDB04             BLT.N    ??ASCII_IsDigOct_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2938             CMP      R1,#+56
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsDigOct_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsDigOct_1
   \                     ??ASCII_IsDigOct_0:
   \   00000012   0x2000             MOVS     R0,#+0
    312          
    313              return (dig_oct);
   \                     ??ASCII_IsDigOct_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    314          }
    315          
    316          
    317          /*
    318          *********************************************************************************************************
    319          *                                          ASCII_IsDigHex()
    320          *
    321          * Description : Determine whether a character is a hexadecimal-digit character.
    322          *
    323          * Argument(s) : c           Character to examine.
    324          *
    325          * Return(s)   : DEF_YES, if character is     a hexadecimal-digit character.
    326          *
    327          *               DEF_NO,	 if character is NOT a hexadecimal-digit character.
    328          *
    329          * Caller(s)   : Application.
    330          *
    331          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.12.(2) states that "isxdigit() ... tests for any
    332          *                   hexadecimal-digit character".
    333          *********************************************************************************************************
    334          */
    335          

   \                                 In section .text, align 2, keep-with-next
    336          CPU_BOOLEAN  ASCII_IsDigHex (CPU_CHAR  c)
    337          {
   \                     ASCII_IsDigHex:
   \   00000000   0x0001             MOVS     R1,R0
    338              CPU_BOOLEAN  dig_hex;
    339          
    340          
    341              dig_hex = ASCII_IS_DIG_HEX(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2930             CMP      R1,#+48
   \   00000006   0xDB02             BLT.N    ??ASCII_IsDigHex_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x293A             CMP      R1,#+58
   \   0000000C   0xDB0B             BLT.N    ??ASCII_IsDigHex_1
   \                     ??ASCII_IsDigHex_0:
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x2941             CMP      R1,#+65
   \   00000012   0xDB02             BLT.N    ??ASCII_IsDigHex_2
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x2947             CMP      R1,#+71
   \   00000018   0xDB05             BLT.N    ??ASCII_IsDigHex_1
   \                     ??ASCII_IsDigHex_2:
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x2961             CMP      R1,#+97
   \   0000001E   0xDB04             BLT.N    ??ASCII_IsDigHex_3
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x2967             CMP      R1,#+103
   \   00000024   0xDA01             BGE.N    ??ASCII_IsDigHex_3
   \                     ??ASCII_IsDigHex_1:
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??ASCII_IsDigHex_4
   \                     ??ASCII_IsDigHex_3:
   \   0000002A   0x2000             MOVS     R0,#+0
    342          
    343              return (dig_hex);
   \                     ??ASCII_IsDigHex_4:
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x4770             BX       LR               ;; return
    344          }
    345          
    346          
    347          /*$PAGE*/
    348          /*
    349          *********************************************************************************************************
    350          *                                           ASCII_IsBlank()
    351          *
    352          * Description : Determine whether a character is a standard blank character.
    353          *
    354          * Argument(s) : c           Character to examine.
    355          *
    356          * Return(s)   : DEF_YES, if character is     a standard blank character.
    357          *
    358          *               DEF_NO,	 if character is NOT a standard blank character.
    359          *
    360          * Caller(s)   : Application.
    361          *
    362          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.3.(2) states that "isblank() returns true only for
    363          *                       the standard blank characters".
    364          *
    365          *                   (b) ISO/IEC 9899:TC2, Section 7.4.1.3.(2) defines "the standard blank characters" as
    366          *                       the "space (' '), and horizontal tab ('\t')".
    367          *********************************************************************************************************
    368          */
    369          

   \                                 In section .text, align 2, keep-with-next
    370          CPU_BOOLEAN  ASCII_IsBlank (CPU_CHAR  c)
    371          {
   \                     ASCII_IsBlank:
   \   00000000   0x0001             MOVS     R1,R0
    372              CPU_BOOLEAN  blank;
    373          
    374          
    375              blank = ASCII_IS_BLANK(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2920             CMP      R1,#+32
   \   00000006   0xD002             BEQ.N    ??ASCII_IsBlank_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2909             CMP      R1,#+9
   \   0000000C   0xD101             BNE.N    ??ASCII_IsBlank_1
   \                     ??ASCII_IsBlank_0:
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsBlank_2
   \                     ??ASCII_IsBlank_1:
   \   00000012   0x2000             MOVS     R0,#+0
    376          
    377              return (blank);
   \                     ??ASCII_IsBlank_2:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    378          }
    379          
    380          
    381          /*
    382          *********************************************************************************************************
    383          *                                           ASCII_IsSpace()
    384          *
    385          * Description : Determine whether a character is a white-space character.
    386          *
    387          * Argument(s) : c           Character to examine.
    388          *
    389          * Return(s)   : DEF_YES, if character is     a white-space character.
    390          *
    391          *               DEF_NO,	 if character is NOT a white-space character.
    392          *
    393          * Caller(s)   : Application.
    394          *
    395          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.10.(2) states that "isspace() returns true only
    396          *                       for the standard white-space characters".
    397          *
    398          *                   (b) ISO/IEC 9899:TC2, Section 7.4.1.10.(2) defines "the standard white-space characters"
    399          *                       as the "space (' '), form feed ('\f'), new-line ('\n'), carriage return ('\r'),
    400          *                       horizontal tab ('\t'), and vertical tab ('\v')".
    401          *********************************************************************************************************
    402          */
    403          

   \                                 In section .text, align 2, keep-with-next
    404          CPU_BOOLEAN  ASCII_IsSpace (CPU_CHAR  c)
    405          {
   \                     ASCII_IsSpace:
   \   00000000   0x0001             MOVS     R1,R0
    406              CPU_BOOLEAN  space;
    407          
    408          
    409              space = ASCII_IS_SPACE(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2920             CMP      R1,#+32
   \   00000006   0xD00E             BEQ.N    ??ASCII_IsSpace_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x290D             CMP      R1,#+13
   \   0000000C   0xD00B             BEQ.N    ??ASCII_IsSpace_0
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x290A             CMP      R1,#+10
   \   00000012   0xD008             BEQ.N    ??ASCII_IsSpace_0
   \   00000014   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000016   0x290C             CMP      R1,#+12
   \   00000018   0xD005             BEQ.N    ??ASCII_IsSpace_0
   \   0000001A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001C   0x2909             CMP      R1,#+9
   \   0000001E   0xD002             BEQ.N    ??ASCII_IsSpace_0
   \   00000020   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000022   0x290B             CMP      R1,#+11
   \   00000024   0xD101             BNE.N    ??ASCII_IsSpace_1
   \                     ??ASCII_IsSpace_0:
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xE000             B.N      ??ASCII_IsSpace_2
   \                     ??ASCII_IsSpace_1:
   \   0000002A   0x2000             MOVS     R0,#+0
    410          
    411              return (space);
   \                     ??ASCII_IsSpace_2:
   \   0000002C   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002E   0x4770             BX       LR               ;; return
    412          }
    413          
    414          
    415          /*$PAGE*/
    416          /*
    417          *********************************************************************************************************
    418          *                                           ASCII_IsPrint()
    419          *
    420          * Description : Determine whether a character is a printing character.
    421          *
    422          * Argument(s) : c           Character to examine.
    423          *
    424          * Return(s)   : DEF_YES, if character is     a printing character.
    425          *
    426          *               DEF_NO,	 if character is NOT a printing character.
    427          *
    428          * Caller(s)   : Application.
    429          *
    430          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.8.(2) states that "isprint() ... tests for any
    431          *                       printing character including space (' ')".
    432          *
    433          *                   (b) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    434          *                       ASCII character set, the printing characters are those whose values lie from
    435          *                       0x20 (space) through 0x7E (tilde)".
    436          *********************************************************************************************************
    437          */
    438          

   \                                 In section .text, align 2, keep-with-next
    439          CPU_BOOLEAN  ASCII_IsPrint (CPU_CHAR  c)
    440          {
   \                     ASCII_IsPrint:
   \   00000000   0x0001             MOVS     R1,R0
    441              CPU_BOOLEAN  print;
    442          
    443          
    444              print = ASCII_IS_PRINT(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2920             CMP      R1,#+32
   \   00000006   0xDB04             BLT.N    ??ASCII_IsPrint_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x297F             CMP      R1,#+127
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsPrint_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsPrint_1
   \                     ??ASCII_IsPrint_0:
   \   00000012   0x2000             MOVS     R0,#+0
    445          
    446              return (print);
   \                     ??ASCII_IsPrint_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    447          }
    448          
    449          
    450          /*
    451          *********************************************************************************************************
    452          *                                           ASCII_IsGraph()
    453          *
    454          * Description : Determine whether a character is any printing character except a space character.
    455          *
    456          * Argument(s) : c           Character to examine.
    457          *
    458          * Return(s)   : DEF_YES, if character is     a graphic character.
    459          *
    460          *               DEF_NO,	 if character is NOT a graphic character.
    461          *
    462          * Caller(s)   : Application.
    463          *
    464          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.6.(2) states that "isgraph() ... tests for any
    465          *                       printing character except space (' ')".
    466          *
    467          *                   (b) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    468          *                       ASCII character set, the printing characters are those whose values lie from
    469          *                       0x20 (space) through 0x7E (tilde)".
    470          *********************************************************************************************************
    471          */
    472          

   \                                 In section .text, align 2, keep-with-next
    473          CPU_BOOLEAN  ASCII_IsGraph (CPU_CHAR  c)
    474          {
   \                     ASCII_IsGraph:
   \   00000000   0x0001             MOVS     R1,R0
    475              CPU_BOOLEAN  graph;
    476          
    477          
    478              graph = ASCII_IS_GRAPH(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2921             CMP      R1,#+33
   \   00000006   0xDB04             BLT.N    ??ASCII_IsGraph_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x297F             CMP      R1,#+127
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsGraph_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsGraph_1
   \                     ??ASCII_IsGraph_0:
   \   00000012   0x2000             MOVS     R0,#+0
    479          
    480              return (graph);
   \                     ??ASCII_IsGraph_1:
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x4770             BX       LR               ;; return
    481          }
    482          
    483          
    484          /*$PAGE*/
    485          /*
    486          *********************************************************************************************************
    487          *                                           ASCII_IsPunct()
    488          *
    489          * Description : Determine whether a character is a punctuation character.
    490          *
    491          * Argument(s) : c           Character to examine.
    492          *
    493          * Return(s)   : DEF_YES, if character is     a punctuation character.
    494          *
    495          *               DEF_NO,	 if character is NOT a punctuation character.
    496          *
    497          * Caller(s)   : Application.
    498          *
    499          * Note(s)     : (1) ISO/IEC 9899:TC2, Section 7.4.1.9.(2) states that "ispunct() returns true for every
    500          *                   printing character for which neither isspace() nor isalnum() is true".
    501          *********************************************************************************************************
    502          */
    503          

   \                                 In section .text, align 2, keep-with-next
    504          CPU_BOOLEAN  ASCII_IsPunct (CPU_CHAR  c)
    505          {
   \                     ASCII_IsPunct:
   \   00000000   0x0001             MOVS     R1,R0
    506              CPU_BOOLEAN  punct;
    507          
    508          
    509              punct = ASCII_IS_PUNCT(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2920             CMP      R1,#+32
   \   00000006   0xDB04             BLT.N    ??ASCII_IsPunct_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x297F             CMP      R1,#+127
   \   0000000C   0xDA01             BGE.N    ??ASCII_IsPunct_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_IsPunct_1
   \                     ??ASCII_IsPunct_0:
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_1:
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD143             BNE.N    ??ASCII_IsPunct_2
   \   00000018   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000001A   0x2920             CMP      R1,#+32
   \   0000001C   0xD00E             BEQ.N    ??ASCII_IsPunct_3
   \   0000001E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000020   0x290D             CMP      R1,#+13
   \   00000022   0xD00B             BEQ.N    ??ASCII_IsPunct_3
   \   00000024   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000026   0x290A             CMP      R1,#+10
   \   00000028   0xD008             BEQ.N    ??ASCII_IsPunct_3
   \   0000002A   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000002C   0x290C             CMP      R1,#+12
   \   0000002E   0xD005             BEQ.N    ??ASCII_IsPunct_3
   \   00000030   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000032   0x2909             CMP      R1,#+9
   \   00000034   0xD002             BEQ.N    ??ASCII_IsPunct_3
   \   00000036   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000038   0x290B             CMP      R1,#+11
   \   0000003A   0xD101             BNE.N    ??ASCII_IsPunct_4
   \                     ??ASCII_IsPunct_3:
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0xE000             B.N      ??ASCII_IsPunct_5
   \                     ??ASCII_IsPunct_4:
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_5:
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD12C             BNE.N    ??ASCII_IsPunct_2
   \   00000046   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000048   0x2941             CMP      R1,#+65
   \   0000004A   0xDB04             BLT.N    ??ASCII_IsPunct_6
   \   0000004C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000004E   0x295B             CMP      R1,#+91
   \   00000050   0xDA01             BGE.N    ??ASCII_IsPunct_6
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0xE000             B.N      ??ASCII_IsPunct_7
   \                     ??ASCII_IsPunct_6:
   \   00000056   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_7:
   \   00000058   0x2801             CMP      R0,#+1
   \   0000005A   0xD00A             BEQ.N    ??ASCII_IsPunct_8
   \   0000005C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000005E   0x2961             CMP      R1,#+97
   \   00000060   0xDB04             BLT.N    ??ASCII_IsPunct_9
   \   00000062   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000064   0x297B             CMP      R1,#+123
   \   00000066   0xDA01             BGE.N    ??ASCII_IsPunct_9
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xE000             B.N      ??ASCII_IsPunct_10
   \                     ??ASCII_IsPunct_9:
   \   0000006C   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_10:
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD101             BNE.N    ??ASCII_IsPunct_11
   \                     ??ASCII_IsPunct_8:
   \   00000072   0x2001             MOVS     R0,#+1
   \   00000074   0xE000             B.N      ??ASCII_IsPunct_12
   \                     ??ASCII_IsPunct_11:
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_12:
   \   00000078   0x2801             CMP      R0,#+1
   \   0000007A   0xD00A             BEQ.N    ??ASCII_IsPunct_13
   \   0000007C   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000007E   0x2930             CMP      R1,#+48
   \   00000080   0xDB04             BLT.N    ??ASCII_IsPunct_14
   \   00000082   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000084   0x293A             CMP      R1,#+58
   \   00000086   0xDA01             BGE.N    ??ASCII_IsPunct_14
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xE000             B.N      ??ASCII_IsPunct_15
   \                     ??ASCII_IsPunct_14:
   \   0000008C   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_15:
   \   0000008E   0x2801             CMP      R0,#+1
   \   00000090   0xD101             BNE.N    ??ASCII_IsPunct_16
   \                     ??ASCII_IsPunct_13:
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0xE000             B.N      ??ASCII_IsPunct_17
   \                     ??ASCII_IsPunct_16:
   \   00000096   0x2000             MOVS     R0,#+0
   \                     ??ASCII_IsPunct_17:
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD101             BNE.N    ??ASCII_IsPunct_2
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0xE000             B.N      ??ASCII_IsPunct_18
   \                     ??ASCII_IsPunct_2:
   \   000000A0   0x2000             MOVS     R0,#+0
    510          
    511              return (punct);
   \                     ??ASCII_IsPunct_18:
   \   000000A2   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000A4   0x4770             BX       LR               ;; return
    512          }
    513          
    514          
    515          /*
    516          *********************************************************************************************************
    517          *                                           ASCII_IsCtrl()
    518          *
    519          * Description : Determine whether a character is a control character.
    520          *
    521          * Argument(s) : c           Character to examine.
    522          *
    523          * Return(s)   : DEF_YES, if character is     a control character.
    524          *
    525          *               DEF_NO,	 if character is NOT a control character.
    526          *
    527          * Caller(s)   : Application.
    528          *
    529          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.1.4.(2) states that "iscntrl() ... tests for any
    530          *                       control character".
    531          *
    532          *                   (b) ISO/IEC 9899:TC2, Section 7.4.(3), Note 169, states that in "the seven-bit US
    533          *                       ASCII character set, ... the control characters are those whose values lie from
    534          *                       0 (NUL) through 0x1F (US), and the character 0x7F (DEL)".
    535          *********************************************************************************************************
    536          */
    537          

   \                                 In section .text, align 2, keep-with-next
    538          CPU_BOOLEAN  ASCII_IsCtrl (CPU_CHAR  c)
    539          {
   \                     ASCII_IsCtrl:
   \   00000000   0x0001             MOVS     R1,R0
    540              CPU_BOOLEAN  ctrl;
    541          
    542          
    543              ctrl = ASCII_IS_CTRL(c);
   \   00000002   0xB249             SXTB     R1,R1            ;; SignExt  R1,R1,#+24,#+24
   \   00000004   0x2900             CMP      R1,#+0
   \   00000006   0xD402             BMI.N    ??ASCII_IsCtrl_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x2920             CMP      R1,#+32
   \   0000000C   0xDB02             BLT.N    ??ASCII_IsCtrl_1
   \                     ??ASCII_IsCtrl_0:
   \   0000000E   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000010   0x297F             CMP      R1,#+127
   \   00000012   0xD101             BNE.N    ??ASCII_IsCtrl_2
   \                     ??ASCII_IsCtrl_1:
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xE000             B.N      ??ASCII_IsCtrl_3
   \                     ??ASCII_IsCtrl_2:
   \   00000018   0x2000             MOVS     R0,#+0
    544          
    545              return (ctrl);
   \                     ??ASCII_IsCtrl_3:
   \   0000001A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000001C   0x4770             BX       LR               ;; return
    546          }
    547          
    548          
    549          /*$PAGE*/
    550          /*
    551          *********************************************************************************************************
    552          *                                           ASCII_ToLower()
    553          *
    554          * Description : Convert uppercase alphabetic character to its corresponding lowercase alphabetic character.
    555          *
    556          * Argument(s) : c           Character to convert.
    557          *
    558          * Return(s)   : Lowercase equivalent of 'c', if character 'c' is an uppercase character (see Note #1b1).
    559          *
    560          *               Character 'c',               otherwise                                  (see Note #1b2).
    561          *
    562          * Caller(s)   : Application.
    563          *
    564          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.2.1.(2) states that "tolower() ... converts an
    565          *                       uppercase letter to a corresponding lowercase letter".
    566          *
    567          *                   (b) ISO/IEC 9899:TC2, Section 7.4.2.1.(3) states that :
    568          *
    569          *                       (1) (A) "if the argument is a character for which isupper() is true and there are
    570          *                                one or more corresponding characters ... for which islower() is true," ...
    571          *                           (B) "tolower() ... returns one of the corresponding characters;" ...
    572          *
    573          *                       (2) "otherwise, the argument is returned unchanged."
    574          *********************************************************************************************************
    575          */
    576          

   \                                 In section .text, align 2, keep-with-next
    577          CPU_CHAR  ASCII_ToLower (CPU_CHAR  c)
    578          {
   \                     ASCII_ToLower:
   \   00000000   0x0001             MOVS     R1,R0
    579              CPU_CHAR  lower;
    580          
    581          
    582              lower = ASCII_TO_LOWER(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2941             CMP      R1,#+65
   \   00000006   0xDB04             BLT.N    ??ASCII_ToLower_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x295B             CMP      R1,#+91
   \   0000000C   0xDA01             BGE.N    ??ASCII_ToLower_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_ToLower_1
   \                     ??ASCII_ToLower_0:
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??ASCII_ToLower_1:
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD102             BNE.N    ??ASCII_ToLower_2
   \   00000018   0xF111 0x0020      ADDS     R0,R1,#+32
   \   0000001C   0xE000             B.N      ??ASCII_ToLower_3
   \                     ??ASCII_ToLower_2:
   \   0000001E   0x0008             MOVS     R0,R1
    583          
    584              return (lower);
   \                     ??ASCII_ToLower_3:
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x4770             BX       LR               ;; return
    585          }
    586          
    587          
    588          /*
    589          *********************************************************************************************************
    590          *                                           ASCII_ToUpper()
    591          *
    592          * Description : Convert lowercase alphabetic character to its corresponding uppercase alphabetic character.
    593          *
    594          * Argument(s) : c           Character to convert.
    595          *
    596          * Return(s)   : Uppercase equivalent of 'c', if character 'c' is a lowercase character (see Note #1b1).
    597          *
    598          *               Character 'c',               otherwise                                 (see Note #1b2).
    599          *
    600          * Caller(s)   : Application.
    601          *
    602          * Note(s)     : (1) (a) ISO/IEC 9899:TC2, Section 7.4.2.2.(2) states that "toupper() ... converts a
    603          *                       lowercase letter to a corresponding uppercase letter".
    604          *
    605          *                   (b) ISO/IEC 9899:TC2, Section 7.4.2.2.(3) states that :
    606          *
    607          *                       (1) (A) "if the argument is a character for which islower() is true and there are
    608          *                                one or more corresponding characters ... for which isupper() is true," ...
    609          *                           (B) "toupper() ... returns one of the corresponding characters;" ...
    610          *
    611          *                       (2) "otherwise, the argument is returned unchanged."
    612          *********************************************************************************************************
    613          */
    614          

   \                                 In section .text, align 2, keep-with-next
    615          CPU_CHAR  ASCII_ToUpper (CPU_CHAR  c)
    616          {
   \                     ASCII_ToUpper:
   \   00000000   0x0001             MOVS     R1,R0
    617              CPU_CHAR  upper;
    618          
    619          
    620              upper = ASCII_TO_UPPER(c);
   \   00000002   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000004   0x2961             CMP      R1,#+97
   \   00000006   0xDB04             BLT.N    ??ASCII_ToUpper_0
   \   00000008   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   0000000A   0x297B             CMP      R1,#+123
   \   0000000C   0xDA01             BGE.N    ??ASCII_ToUpper_0
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE000             B.N      ??ASCII_ToUpper_1
   \                     ??ASCII_ToUpper_0:
   \   00000012   0x2000             MOVS     R0,#+0
   \                     ??ASCII_ToUpper_1:
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD102             BNE.N    ??ASCII_ToUpper_2
   \   00000018   0xF1B1 0x0020      SUBS     R0,R1,#+32
   \   0000001C   0xE000             B.N      ??ASCII_ToUpper_3
   \                     ??ASCII_ToUpper_2:
   \   0000001E   0x0008             MOVS     R0,R1
    621          
    622              return (upper);
   \                     ??ASCII_ToUpper_3:
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0x4770             BX       LR               ;; return
    623          }
    624          
    625          
    626          /*$PAGE*/
    627          /*
    628          *********************************************************************************************************
    629          *                                             ASCII_Cmp()
    630          *
    631          * Description : Determine if two characters are identical (case-insensitive).
    632          *
    633          * Argument(s) : c1          First  character.
    634          *
    635          *               c2          Second character.
    636          *
    637          * Return(s)   : DEF_YES, if the characters are     identical.
    638          *
    639          *               DEF_NO,  if the characters are NOT identical.
    640          *
    641          * Caller(s)   : Application.
    642          *
    643          * Note(s)     : none.
    644          *********************************************************************************************************
    645          */
    646          

   \                                 In section .text, align 2, keep-with-next
    647          CPU_BOOLEAN  ASCII_Cmp (CPU_CHAR  c1,
    648                                  CPU_CHAR  c2)
    649          {
   \                     ASCII_Cmp:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    650              CPU_CHAR     c1_upper;
    651              CPU_CHAR     c2_upper;
    652              CPU_BOOLEAN  cmp;
    653          
    654          
    655              c1_upper =  ASCII_ToUpper(c1);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000000C   0x.... 0x....      BL       ASCII_ToUpper
   \   00000010   0x0006             MOVS     R6,R0
    656              c2_upper =  ASCII_ToUpper(c2);
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000016   0x.... 0x....      BL       ASCII_ToUpper
   \   0000001A   0x0007             MOVS     R7,R0
    657              cmp      = (c1_upper == c2_upper) ? (DEF_YES) : (DEF_NO);
   \   0000001C   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001E   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000020   0x42BE             CMP      R6,R7
   \   00000022   0xD102             BNE.N    ??ASCII_Cmp_0
   \   00000024   0xF05F 0x0801      MOVS     R8,#+1
   \   00000028   0xE001             B.N      ??ASCII_Cmp_1
   \                     ??ASCII_Cmp_0:
   \   0000002A   0xF05F 0x0800      MOVS     R8,#+0
    658          
    659              return (cmp);
   \                     ??ASCII_Cmp_1:
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000032   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    660          }
    661          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   ASCII_Cmp
        24   -> ASCII_ToUpper
       0   ASCII_IsAlpha
       0   ASCII_IsAlphaNum
       0   ASCII_IsBlank
       0   ASCII_IsCtrl
       0   ASCII_IsDig
       0   ASCII_IsDigHex
       0   ASCII_IsDigOct
       0   ASCII_IsGraph
       0   ASCII_IsLower
       0   ASCII_IsPrint
       0   ASCII_IsPunct
       0   ASCII_IsSpace
       0   ASCII_IsUpper
       0   ASCII_ToLower
       0   ASCII_ToUpper


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      54  ASCII_Cmp
      56  ASCII_IsAlpha
      88  ASCII_IsAlphaNum
      24  ASCII_IsBlank
      30  ASCII_IsCtrl
      24  ASCII_IsDig
      48  ASCII_IsDigHex
      24  ASCII_IsDigOct
      24  ASCII_IsGraph
      24  ASCII_IsLower
      24  ASCII_IsPrint
     166  ASCII_IsPunct
      48  ASCII_IsSpace
      24  ASCII_IsUpper
      36  ASCII_ToLower
      36  ASCII_ToUpper

 
 730 bytes in section .text
 
 730 bytes of CODE memory

Errors: none
Warnings: none

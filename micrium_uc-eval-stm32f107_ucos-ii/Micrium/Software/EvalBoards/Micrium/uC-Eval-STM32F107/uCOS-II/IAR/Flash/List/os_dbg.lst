###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.2.4510/W32 for ARM      08/Feb/2013  10:57:21 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Gene #
#                    ric\IAR\os_dbg.c                                         #
#    Command line =  "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Gene #
#                    ric\IAR\os_dbg.c" -D USE_STDPERIPH_DRIVER -lCN           #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\" -o                         #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\daniel01\Desktop\FastFile Test       #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\IAR\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\" -I                          #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\OS\uCOS-II\" -I               #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\ST\STM32\inc\" -I             #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\uCOS-II\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\IAR\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\Ports\ARM-Cortex- #
#                    M3\IAR\" -I "C:\Users\daniel01\Desktop\FastFile Test     #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR #
#                    \" -I "C:\Users\daniel01\Desktop\FastFile Test           #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex #
#                    -M3\Generic\IAR\" -I "C:\Users\daniel01\Desktop\FastFile #
#                     Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval #
#                    -STM32F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Source\"   #
#                    -On --use_c++_inline                                     #
#    List file    =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\os_dbg.lst                   #
#    Object file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\os_dbg.o                      #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\daniel01\Desktop\FastFile Test Folder\Micrium\Software\uCOS-II\Ports\ARM-Cortex-M3\Generic\IAR\os_dbg.c
      1          /*
      2          *********************************************************************************************************
      3          *                                               uC/OS-II
      4          *                                         The Real-Time Kernel
      5          *                                          DEBUGGER CONSTANTS
      6          *
      7          *                                (c) Copyright 2006, Micrium, Weston, FL
      8          *                                          All Rights Reserved
      9          *
     10          *                                           ARM Cortex-M3 Port
     11          *
     12          * File      : OS_DBG.C
     13          * Version   : V2.89
     14          * By        : Jean J. Labrosse
     15          *
     16          * For       : ARMv7M Cortex-M3
     17          * Mode      : Thumb2
     18          * Toolchain : IAR EWARM
     19          *********************************************************************************************************
     20          */
     21          
     22          #include <ucos_ii.h>
     23          
     24          #define  OS_COMPILER_OPT  __root
     25          
     26          /*
     27          *********************************************************************************************************
     28          *                                             DEBUG DATA
     29          *********************************************************************************************************
     30          */
     31          

   \                                 In section .rodata, align 2, root
     32          OS_COMPILER_OPT  INT16U  const  OSDebugEn           = OS_DEBUG_EN;               /* Debug constants are defined below   */
   \                     OSDebugEn:
   \   00000000   0x0001             DC16 1
     33          
     34          #if OS_DEBUG_EN > 0u
     35          

   \                                 In section .rodata, align 4, root
     36          OS_COMPILER_OPT  INT32U  const  OSEndiannessTest    = 0x12345678L;               /* Variable to test CPU endianness     */
   \                     OSEndiannessTest:
   \   00000000   0x12345678         DC32 305419896
     37          

   \                                 In section .rodata, align 2, root
     38          OS_COMPILER_OPT  INT16U  const  OSEventEn           = OS_EVENT_EN;
   \                     OSEventEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     39          OS_COMPILER_OPT  INT16U  const  OSEventMax          = OS_MAX_EVENTS;             /* Number of event control blocks      */
   \                     OSEventMax:
   \   00000000   0x00AF             DC16 175

   \                                 In section .rodata, align 2, root
     40          OS_COMPILER_OPT  INT16U  const  OSEventNameEn       = OS_EVENT_NAME_EN;
   \                     OSEventNameEn:
   \   00000000   0x0001             DC16 1
     41          #if (OS_EVENT_EN > 0u) && (OS_MAX_EVENTS > 0u)

   \                                 In section .rodata, align 2, root
     42          OS_COMPILER_OPT  INT16U  const  OSEventSize         = sizeof(OS_EVENT);          /* Size in Bytes of OS_EVENT           */
   \                     OSEventSize:
   \   00000000   0x0018             DC16 24

   \                                 In section .rodata, align 2, root
     43          OS_COMPILER_OPT  INT16U  const  OSEventTblSize      = sizeof(OSEventTbl);        /* Size of OSEventTbl[] in bytes       */
   \                     OSEventTblSize:
   \   00000000   0x1068             DC16 4200
     44          #else
     45          OS_COMPILER_OPT  INT16U  const  OSEventSize         = 0u;
     46          OS_COMPILER_OPT  INT16U  const  OSEventTblSize      = 0u;
     47          #endif

   \                                 In section .rodata, align 2, root
     48          OS_COMPILER_OPT  INT16U  const  OSEventMultiEn      = OS_EVENT_MULTI_EN;
   \                     OSEventMultiEn:
   \   00000000   0x0001             DC16 1
     49          
     50          

   \                                 In section .rodata, align 2, root
     51          OS_COMPILER_OPT  INT16U  const  OSFlagEn            = OS_FLAG_EN;
   \                     OSFlagEn:
   \   00000000   0x0001             DC16 1
     52          #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)

   \                                 In section .rodata, align 2, root
     53          OS_COMPILER_OPT  INT16U  const  OSFlagGrpSize       = sizeof(OS_FLAG_GRP);       /* Size in Bytes of OS_FLAG_GRP        */
   \                     OSFlagGrpSize:
   \   00000000   0x0010             DC16 16

   \                                 In section .rodata, align 2, root
     54          OS_COMPILER_OPT  INT16U  const  OSFlagNodeSize      = sizeof(OS_FLAG_NODE);      /* Size in Bytes of OS_FLAG_NODE       */
   \                     OSFlagNodeSize:
   \   00000000   0x0014             DC16 20

   \                                 In section .rodata, align 2, root
     55          OS_COMPILER_OPT  INT16U  const  OSFlagWidth         = sizeof(OS_FLAGS);          /* Width (in bytes) of OS_FLAGS        */
   \                     OSFlagWidth:
   \   00000000   0x0002             DC16 2
     56          #else
     57          OS_COMPILER_OPT  INT16U  const  OSFlagGrpSize       = 0u;
     58          OS_COMPILER_OPT  INT16U  const  OSFlagNodeSize      = 0u;
     59          OS_COMPILER_OPT  INT16U  const  OSFlagWidth         = 0u;
     60          #endif

   \                                 In section .rodata, align 2, root
     61          OS_COMPILER_OPT  INT16U  const  OSFlagMax           = OS_MAX_FLAGS;
   \                     OSFlagMax:
   \   00000000   0x0005             DC16 5

   \                                 In section .rodata, align 2, root
     62          OS_COMPILER_OPT  INT16U  const  OSFlagNameEn        = OS_FLAG_NAME_EN;
   \                     OSFlagNameEn:
   \   00000000   0x0001             DC16 1
     63          

   \                                 In section .rodata, align 2, root
     64          OS_COMPILER_OPT  INT16U  const  OSLowestPrio        = OS_LOWEST_PRIO;
   \                     OSLowestPrio:
   \   00000000   0x003F             DC16 63
     65          

   \                                 In section .rodata, align 2, root
     66          OS_COMPILER_OPT  INT16U  const  OSMboxEn            = OS_MBOX_EN;
   \                     OSMboxEn:
   \   00000000   0x0001             DC16 1
     67          

   \                                 In section .rodata, align 2, root
     68          OS_COMPILER_OPT  INT16U  const  OSMemEn             = OS_MEM_EN;
   \                     OSMemEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     69          OS_COMPILER_OPT  INT16U  const  OSMemMax            = OS_MAX_MEM_PART;           /* Number of memory partitions         */
   \                     OSMemMax:
   \   00000000   0x0005             DC16 5

   \                                 In section .rodata, align 2, root
     70          OS_COMPILER_OPT  INT16U  const  OSMemNameEn         = OS_MEM_NAME_EN;
   \                     OSMemNameEn:
   \   00000000   0x0001             DC16 1
     71          #if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)

   \                                 In section .rodata, align 2, root
     72          OS_COMPILER_OPT  INT16U  const  OSMemSize           = sizeof(OS_MEM);            /* Mem. Partition header sine (bytes)  */
   \                     OSMemSize:
   \   00000000   0x0018             DC16 24

   \                                 In section .rodata, align 2, root
     73          OS_COMPILER_OPT  INT16U  const  OSMemTblSize        = sizeof(OSMemTbl);
   \                     OSMemTblSize:
   \   00000000   0x0078             DC16 120
     74          #else
     75          OS_COMPILER_OPT  INT16U  const  OSMemSize           = 0u;
     76          OS_COMPILER_OPT  INT16U  const  OSMemTblSize        = 0u;
     77          #endif

   \                                 In section .rodata, align 2, root
     78          OS_COMPILER_OPT  INT16U  const  OSMutexEn           = OS_MUTEX_EN;
   \                     OSMutexEn:
   \   00000000   0x0001             DC16 1
     79          

   \                                 In section .rodata, align 2, root
     80          OS_COMPILER_OPT  INT16U  const  OSPtrSize           = sizeof(void *);            /* Size in Bytes of a pointer          */
   \                     OSPtrSize:
   \   00000000   0x0004             DC16 4
     81          

   \                                 In section .rodata, align 2, root
     82          OS_COMPILER_OPT  INT16U  const  OSQEn               = OS_Q_EN;
   \                     OSQEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     83          OS_COMPILER_OPT  INT16U  const  OSQMax              = OS_MAX_QS;                 /* Number of queues                    */
   \                     OSQMax:
   \   00000000   0x0004             DC16 4
     84          #if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)

   \                                 In section .rodata, align 2, root
     85          OS_COMPILER_OPT  INT16U  const  OSQSize             = sizeof(OS_Q);              /* Size in bytes of OS_Q structure     */
   \                     OSQSize:
   \   00000000   0x0018             DC16 24
     86          #else
     87          OS_COMPILER_OPT  INT16U  const  OSQSize             = 0u;
     88          #endif
     89          

   \                                 In section .rodata, align 2, root
     90          OS_COMPILER_OPT  INT16U  const  OSRdyTblSize        = OS_RDY_TBL_SIZE;           /* Number of bytes in the ready table  */
   \                     OSRdyTblSize:
   \   00000000   0x0008             DC16 8
     91          

   \                                 In section .rodata, align 2, root
     92          OS_COMPILER_OPT  INT16U  const  OSSemEn             = OS_SEM_EN;
   \                     OSSemEn:
   \   00000000   0x0001             DC16 1
     93          

   \                                 In section .rodata, align 2, root
     94          OS_COMPILER_OPT  INT16U  const  OSStkWidth          = sizeof(OS_STK);            /* Size in Bytes of a stack entry      */
   \                     OSStkWidth:
   \   00000000   0x0004             DC16 4
     95          

   \                                 In section .rodata, align 2, root
     96          OS_COMPILER_OPT  INT16U  const  OSTaskCreateEn      = OS_TASK_CREATE_EN;
   \                     OSTaskCreateEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     97          OS_COMPILER_OPT  INT16U  const  OSTaskCreateExtEn   = OS_TASK_CREATE_EXT_EN;
   \                     OSTaskCreateExtEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     98          OS_COMPILER_OPT  INT16U  const  OSTaskDelEn         = OS_TASK_DEL_EN;
   \                     OSTaskDelEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
     99          OS_COMPILER_OPT  INT16U  const  OSTaskIdleStkSize   = OS_TASK_IDLE_STK_SIZE;
   \                     OSTaskIdleStkSize:
   \   00000000   0x0080             DC16 128

   \                                 In section .rodata, align 2, root
    100          OS_COMPILER_OPT  INT16U  const  OSTaskProfileEn     = OS_TASK_PROFILE_EN;
   \                     OSTaskProfileEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    101          OS_COMPILER_OPT  INT16U  const  OSTaskMax           = OS_MAX_TASKS + OS_N_SYS_TASKS; /* Total max. number of tasks      */
   \                     OSTaskMax:
   \   00000000   0x0016             DC16 22

   \                                 In section .rodata, align 2, root
    102          OS_COMPILER_OPT  INT16U  const  OSTaskNameEn        = OS_TASK_NAME_EN;
   \                     OSTaskNameEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    103          OS_COMPILER_OPT  INT16U  const  OSTaskStatEn        = OS_TASK_STAT_EN;
   \                     OSTaskStatEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    104          OS_COMPILER_OPT  INT16U  const  OSTaskStatStkSize   = OS_TASK_STAT_STK_SIZE;
   \                     OSTaskStatStkSize:
   \   00000000   0x0080             DC16 128

   \                                 In section .rodata, align 2, root
    105          OS_COMPILER_OPT  INT16U  const  OSTaskStatStkChkEn  = OS_TASK_STAT_STK_CHK_EN;
   \                     OSTaskStatStkChkEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    106          OS_COMPILER_OPT  INT16U  const  OSTaskSwHookEn      = OS_TASK_SW_HOOK_EN;
   \                     OSTaskSwHookEn:
   \   00000000   0x0001             DC16 1
    107          

   \                                 In section .rodata, align 2, root
    108          OS_COMPILER_OPT  INT16U  const  OSTCBPrioTblMax     = OS_LOWEST_PRIO + 1u;       /* Number of entries in OSTCBPrioTbl[] */
   \                     OSTCBPrioTblMax:
   \   00000000   0x0040             DC16 64

   \                                 In section .rodata, align 2, root
    109          OS_COMPILER_OPT  INT16U  const  OSTCBSize           = sizeof(OS_TCB);            /* Size in Bytes of OS_TCB             */
   \                     OSTCBSize:
   \   00000000   0x0058             DC16 88

   \                                 In section .rodata, align 2, root
    110          OS_COMPILER_OPT  INT16U  const  OSTicksPerSec       = OS_TICKS_PER_SEC;
   \                     OSTicksPerSec:
   \   00000000   0x03E8             DC16 1000

   \                                 In section .rodata, align 2, root
    111          OS_COMPILER_OPT  INT16U  const  OSTimeTickHookEn    = OS_TIME_TICK_HOOK_EN;
   \                     OSTimeTickHookEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    112          OS_COMPILER_OPT  INT16U  const  OSVersionNbr        = OS_VERSION;
   \                     OSVersionNbr:
   \   00000000   0x7217             DC16 29207
    113          

   \                                 In section .rodata, align 2, root
    114          OS_COMPILER_OPT  INT16U  const  OSTmrEn             = OS_TMR_EN;
   \                     OSTmrEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    115          OS_COMPILER_OPT  INT16U  const  OSTmrCfgMax         = OS_TMR_CFG_MAX;
   \                     OSTmrCfgMax:
   \   00000000   0x0010             DC16 16

   \                                 In section .rodata, align 2, root
    116          OS_COMPILER_OPT  INT16U  const  OSTmrCfgNameEn      = OS_TMR_CFG_NAME_EN;
   \                     OSTmrCfgNameEn:
   \   00000000   0x0001             DC16 1

   \                                 In section .rodata, align 2, root
    117          OS_COMPILER_OPT  INT16U  const  OSTmrCfgWheelSize   = OS_TMR_CFG_WHEEL_SIZE;
   \                     OSTmrCfgWheelSize:
   \   00000000   0x0008             DC16 8

   \                                 In section .rodata, align 2, root
    118          OS_COMPILER_OPT  INT16U  const  OSTmrCfgTicksPerSec = OS_TMR_CFG_TICKS_PER_SEC;
   \                     OSTmrCfgTicksPerSec:
   \   00000000   0x000A             DC16 10
    119          
    120          #if (OS_TMR_EN > 0u) && (OS_TMR_CFG_MAX > 0u)

   \                                 In section .rodata, align 2, root
    121          OS_COMPILER_OPT  INT16U  const  OSTmrSize           = sizeof(OS_TMR);
   \                     OSTmrSize:
   \   00000000   0x0028             DC16 40

   \                                 In section .rodata, align 2, root
    122          OS_COMPILER_OPT  INT16U  const  OSTmrTblSize        = sizeof(OSTmrTbl);
   \                     OSTmrTblSize:
   \   00000000   0x0280             DC16 640

   \                                 In section .rodata, align 2, root
    123          OS_COMPILER_OPT  INT16U  const  OSTmrWheelSize      = sizeof(OS_TMR_WHEEL);
   \                     OSTmrWheelSize:
   \   00000000   0x0008             DC16 8

   \                                 In section .rodata, align 2, root
    124          OS_COMPILER_OPT  INT16U  const  OSTmrWheelTblSize   = sizeof(OSTmrWheelTbl);
   \                     OSTmrWheelTblSize:
   \   00000000   0x0040             DC16 64
    125          #else
    126          OS_COMPILER_OPT  INT16U  const  OSTmrSize           = 0u;
    127          OS_COMPILER_OPT  INT16U  const  OSTmrTblSize        = 0u;
    128          OS_COMPILER_OPT  INT16U  const  OSTmrWheelSize      = 0u;
    129          OS_COMPILER_OPT  INT16U  const  OSTmrWheelTblSize   = 0u;
    130          #endif
    131          
    132          #endif
    133          
    134          /*$PAGE*/
    135          /*
    136          *********************************************************************************************************
    137          *                                             DEBUG DATA
    138          *                            TOTAL DATA SPACE (i.e. RAM) USED BY uC/OS-II
    139          *********************************************************************************************************
    140          */
    141          #if OS_DEBUG_EN > 0u
    142          

   \                                 In section .rodata, align 2, root
    143          OS_COMPILER_OPT  INT16U  const  OSDataSize = sizeof(OSCtxSwCtr)
   \                     OSDataSize:
   \   00000000   0x213A             DC16 8506
    144          #if (OS_EVENT_EN > 0u) && (OS_MAX_EVENTS > 0u)
    145                                                     + sizeof(OSEventFreeList)
    146                                                     + sizeof(OSEventTbl)
    147          #endif
    148          #if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    149                                                     + sizeof(OSFlagTbl)
    150                                                     + sizeof(OSFlagFreeList)
    151          #endif
    152          #if OS_TASK_STAT_EN > 0u
    153                                                     + sizeof(OSCPUUsage)
    154                                                     + sizeof(OSIdleCtrMax)
    155                                                     + sizeof(OSIdleCtrRun)
    156                                                     + sizeof(OSStatRdy)
    157                                                     + sizeof(OSTaskStatStk)
    158          #endif
    159          #if OS_TICK_STEP_EN > 0u
    160                                                     + sizeof(OSTickStepState)
    161          #endif
    162          #if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    163                                                     + sizeof(OSMemFreeList)
    164                                                     + sizeof(OSMemTbl)
    165          #endif
    166          #if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    167                                                     + sizeof(OSQFreeList)
    168                                                     + sizeof(OSQTbl)
    169          #endif
    170          #if OS_TIME_GET_SET_EN > 0u
    171                                                     + sizeof(OSTime)
    172          #endif
    173          #if (OS_TMR_EN > 0u) && (OS_TMR_CFG_MAX > 0u)
    174                                                     + sizeof(OSTmrFree)
    175                                                     + sizeof(OSTmrUsed)
    176                                                     + sizeof(OSTmrTime)
    177                                                     + sizeof(OSTmrSem)
    178                                                     + sizeof(OSTmrSemSignal)
    179                                                     + sizeof(OSTmrFreeList)
    180                                                     + sizeof(OSTmrTbl)
    181                                                     + sizeof(OSTmrWheelTbl)
    182          #endif
    183                                                     + sizeof(OSIntNesting)
    184                                                     + sizeof(OSLockNesting)
    185                                                     + sizeof(OSPrioCur)
    186                                                     + sizeof(OSPrioHighRdy)
    187                                                     + sizeof(OSRdyGrp)
    188                                                     + sizeof(OSRdyTbl)
    189                                                     + sizeof(OSRunning)
    190                                                     + sizeof(OSTaskCtr)
    191                                                     + sizeof(OSIdleCtr)
    192                                                     + sizeof(OSTaskIdleStk)
    193                                                     + sizeof(OSTCBCur)
    194                                                     + sizeof(OSTCBFreeList)
    195                                                     + sizeof(OSTCBHighRdy)
    196                                                     + sizeof(OSTCBList)
    197                                                     + sizeof(OSTCBPrioTbl)
    198                                                     + sizeof(OSTCBTbl);
    199          
    200          #endif
    201          
    202          /*$PAGE*/
    203          /*
    204          *********************************************************************************************************
    205          *                                       OS DEBUG INITIALIZAZTION
    206          *
    207          * Description: This function is used to make sure that debug variables that are unused in the application
    208          *              are not optimized away.  This function might not be necessary for all compilers.  In this
    209          *              case, you should simply DELETE the code in this function while still leaving the declaration
    210          *              of the function itself.
    211          *
    212          * Arguments  : none
    213          *
    214          * Returns    : none
    215          *
    216          * Note(s)    : (1) This code doesn't do anything, it simply prevents the compiler from optimizing out
    217          *                  the 'const' variables which are declared in this file.
    218          *********************************************************************************************************
    219          */
    220          
    221          #if OS_DEBUG_EN > 0u

   \                                 In section .text, align 4, keep-with-next
    222          void  OSDebugInit (void)
    223          {
    224              void  *ptemp;
    225          
    226          
    227              ptemp = (void *)&OSDebugEn;
   \                     OSDebugInit:
   \   00000000   0x4939             LDR.N    R1,??OSDebugInit_0
   \   00000002   0x0008             MOVS     R0,R1
    228          
    229              ptemp = (void *)&OSEndiannessTest;
   \   00000004   0x4939             LDR.N    R1,??OSDebugInit_0+0x4
   \   00000006   0x0008             MOVS     R0,R1
    230          
    231              ptemp = (void *)&OSEventMax;
   \   00000008   0x4939             LDR.N    R1,??OSDebugInit_0+0x8
   \   0000000A   0x0008             MOVS     R0,R1
    232              ptemp = (void *)&OSEventNameEn;
   \   0000000C   0x4939             LDR.N    R1,??OSDebugInit_0+0xC
   \   0000000E   0x0008             MOVS     R0,R1
    233              ptemp = (void *)&OSEventEn;
   \   00000010   0x4939             LDR.N    R1,??OSDebugInit_0+0x10
   \   00000012   0x0008             MOVS     R0,R1
    234              ptemp = (void *)&OSEventSize;
   \   00000014   0x4939             LDR.N    R1,??OSDebugInit_0+0x14
   \   00000016   0x0008             MOVS     R0,R1
    235              ptemp = (void *)&OSEventTblSize;
   \   00000018   0x4939             LDR.N    R1,??OSDebugInit_0+0x18
   \   0000001A   0x0008             MOVS     R0,R1
    236              ptemp = (void *)&OSEventMultiEn;
   \   0000001C   0x4939             LDR.N    R1,??OSDebugInit_0+0x1C
   \   0000001E   0x0008             MOVS     R0,R1
    237          
    238              ptemp = (void *)&OSFlagEn;
   \   00000020   0x4939             LDR.N    R1,??OSDebugInit_0+0x20
   \   00000022   0x0008             MOVS     R0,R1
    239              ptemp = (void *)&OSFlagGrpSize;
   \   00000024   0x4939             LDR.N    R1,??OSDebugInit_0+0x24
   \   00000026   0x0008             MOVS     R0,R1
    240              ptemp = (void *)&OSFlagNodeSize;
   \   00000028   0x4939             LDR.N    R1,??OSDebugInit_0+0x28
   \   0000002A   0x0008             MOVS     R0,R1
    241              ptemp = (void *)&OSFlagWidth;
   \   0000002C   0x4939             LDR.N    R1,??OSDebugInit_0+0x2C
   \   0000002E   0x0008             MOVS     R0,R1
    242              ptemp = (void *)&OSFlagMax;
   \   00000030   0x4939             LDR.N    R1,??OSDebugInit_0+0x30
   \   00000032   0x0008             MOVS     R0,R1
    243              ptemp = (void *)&OSFlagNameEn;
   \   00000034   0x4939             LDR.N    R1,??OSDebugInit_0+0x34
   \   00000036   0x0008             MOVS     R0,R1
    244          
    245              ptemp = (void *)&OSLowestPrio;
   \   00000038   0x4939             LDR.N    R1,??OSDebugInit_0+0x38
   \   0000003A   0x0008             MOVS     R0,R1
    246          
    247              ptemp = (void *)&OSMboxEn;
   \   0000003C   0x4939             LDR.N    R1,??OSDebugInit_0+0x3C
   \   0000003E   0x0008             MOVS     R0,R1
    248          
    249              ptemp = (void *)&OSMemEn;
   \   00000040   0x4939             LDR.N    R1,??OSDebugInit_0+0x40
   \   00000042   0x0008             MOVS     R0,R1
    250              ptemp = (void *)&OSMemMax;
   \   00000044   0x4939             LDR.N    R1,??OSDebugInit_0+0x44
   \   00000046   0x0008             MOVS     R0,R1
    251              ptemp = (void *)&OSMemNameEn;
   \   00000048   0x4939             LDR.N    R1,??OSDebugInit_0+0x48
   \   0000004A   0x0008             MOVS     R0,R1
    252              ptemp = (void *)&OSMemSize;
   \   0000004C   0x4939             LDR.N    R1,??OSDebugInit_0+0x4C
   \   0000004E   0x0008             MOVS     R0,R1
    253              ptemp = (void *)&OSMemTblSize;
   \   00000050   0x4939             LDR.N    R1,??OSDebugInit_0+0x50
   \   00000052   0x0008             MOVS     R0,R1
    254          
    255              ptemp = (void *)&OSMutexEn;
   \   00000054   0x4939             LDR.N    R1,??OSDebugInit_0+0x54
   \   00000056   0x0008             MOVS     R0,R1
    256          
    257              ptemp = (void *)&OSPtrSize;
   \   00000058   0x4939             LDR.N    R1,??OSDebugInit_0+0x58
   \   0000005A   0x0008             MOVS     R0,R1
    258          
    259              ptemp = (void *)&OSQEn;
   \   0000005C   0x4939             LDR.N    R1,??OSDebugInit_0+0x5C
   \   0000005E   0x0008             MOVS     R0,R1
    260              ptemp = (void *)&OSQMax;
   \   00000060   0x4939             LDR.N    R1,??OSDebugInit_0+0x60
   \   00000062   0x0008             MOVS     R0,R1
    261              ptemp = (void *)&OSQSize;
   \   00000064   0x4939             LDR.N    R1,??OSDebugInit_0+0x64
   \   00000066   0x0008             MOVS     R0,R1
    262          
    263              ptemp = (void *)&OSRdyTblSize;
   \   00000068   0x4939             LDR.N    R1,??OSDebugInit_0+0x68
   \   0000006A   0x0008             MOVS     R0,R1
    264          
    265              ptemp = (void *)&OSSemEn;
   \   0000006C   0x4939             LDR.N    R1,??OSDebugInit_0+0x6C
   \   0000006E   0x0008             MOVS     R0,R1
    266          
    267              ptemp = (void *)&OSStkWidth;
   \   00000070   0x4939             LDR.N    R1,??OSDebugInit_0+0x70
   \   00000072   0x0008             MOVS     R0,R1
    268          
    269              ptemp = (void *)&OSTaskCreateEn;
   \   00000074   0x4939             LDR.N    R1,??OSDebugInit_0+0x74
   \   00000076   0x0008             MOVS     R0,R1
    270              ptemp = (void *)&OSTaskCreateExtEn;
   \   00000078   0x4939             LDR.N    R1,??OSDebugInit_0+0x78
   \   0000007A   0x0008             MOVS     R0,R1
    271              ptemp = (void *)&OSTaskDelEn;
   \   0000007C   0x4939             LDR.N    R1,??OSDebugInit_0+0x7C
   \   0000007E   0x0008             MOVS     R0,R1
    272              ptemp = (void *)&OSTaskIdleStkSize;
   \   00000080   0x4939             LDR.N    R1,??OSDebugInit_0+0x80
   \   00000082   0x0008             MOVS     R0,R1
    273              ptemp = (void *)&OSTaskProfileEn;
   \   00000084   0x4939             LDR.N    R1,??OSDebugInit_0+0x84
   \   00000086   0x0008             MOVS     R0,R1
    274              ptemp = (void *)&OSTaskMax;
   \   00000088   0x4939             LDR.N    R1,??OSDebugInit_0+0x88
   \   0000008A   0x0008             MOVS     R0,R1
    275              ptemp = (void *)&OSTaskNameEn;
   \   0000008C   0x4939             LDR.N    R1,??OSDebugInit_0+0x8C
   \   0000008E   0x0008             MOVS     R0,R1
    276              ptemp = (void *)&OSTaskStatEn;
   \   00000090   0x4939             LDR.N    R1,??OSDebugInit_0+0x90
   \   00000092   0x0008             MOVS     R0,R1
    277              ptemp = (void *)&OSTaskStatStkSize;
   \   00000094   0x4939             LDR.N    R1,??OSDebugInit_0+0x94
   \   00000096   0x0008             MOVS     R0,R1
    278              ptemp = (void *)&OSTaskStatStkChkEn;
   \   00000098   0x4939             LDR.N    R1,??OSDebugInit_0+0x98
   \   0000009A   0x0008             MOVS     R0,R1
    279              ptemp = (void *)&OSTaskSwHookEn;
   \   0000009C   0x4939             LDR.N    R1,??OSDebugInit_0+0x9C
   \   0000009E   0x0008             MOVS     R0,R1
    280          
    281              ptemp = (void *)&OSTCBPrioTblMax;
   \   000000A0   0x4939             LDR.N    R1,??OSDebugInit_0+0xA0
   \   000000A2   0x0008             MOVS     R0,R1
    282              ptemp = (void *)&OSTCBSize;
   \   000000A4   0x4939             LDR.N    R1,??OSDebugInit_0+0xA4
   \   000000A6   0x0008             MOVS     R0,R1
    283          
    284              ptemp = (void *)&OSTicksPerSec;
   \   000000A8   0x4939             LDR.N    R1,??OSDebugInit_0+0xA8
   \   000000AA   0x0008             MOVS     R0,R1
    285              ptemp = (void *)&OSTimeTickHookEn;
   \   000000AC   0x4939             LDR.N    R1,??OSDebugInit_0+0xAC
   \   000000AE   0x0008             MOVS     R0,R1
    286          
    287          #if OS_TMR_EN > 0u
    288              ptemp = (void *)&OSTmrTbl[0];
   \   000000B0   0x4939             LDR.N    R1,??OSDebugInit_0+0xB0
   \   000000B2   0x0008             MOVS     R0,R1
    289              ptemp = (void *)&OSTmrWheelTbl[0];
   \   000000B4   0x4939             LDR.N    R1,??OSDebugInit_0+0xB4
   \   000000B6   0x0008             MOVS     R0,R1
    290          
    291              ptemp = (void *)&OSTmrEn;
   \   000000B8   0x4939             LDR.N    R1,??OSDebugInit_0+0xB8
   \   000000BA   0x0008             MOVS     R0,R1
    292              ptemp = (void *)&OSTmrCfgMax;
   \   000000BC   0x4939             LDR.N    R1,??OSDebugInit_0+0xBC
   \   000000BE   0x0008             MOVS     R0,R1
    293              ptemp = (void *)&OSTmrCfgNameEn;
   \   000000C0   0x4939             LDR.N    R1,??OSDebugInit_0+0xC0
   \   000000C2   0x0008             MOVS     R0,R1
    294              ptemp = (void *)&OSTmrCfgWheelSize;
   \   000000C4   0x4939             LDR.N    R1,??OSDebugInit_0+0xC4
   \   000000C6   0x0008             MOVS     R0,R1
    295              ptemp = (void *)&OSTmrCfgTicksPerSec;
   \   000000C8   0x4939             LDR.N    R1,??OSDebugInit_0+0xC8
   \   000000CA   0x0008             MOVS     R0,R1
    296              ptemp = (void *)&OSTmrSize;
   \   000000CC   0x4939             LDR.N    R1,??OSDebugInit_0+0xCC
   \   000000CE   0x0008             MOVS     R0,R1
    297              ptemp = (void *)&OSTmrTblSize;
   \   000000D0   0x4939             LDR.N    R1,??OSDebugInit_0+0xD0
   \   000000D2   0x0008             MOVS     R0,R1
    298          
    299              ptemp = (void *)&OSTmrWheelSize;
   \   000000D4   0x4939             LDR.N    R1,??OSDebugInit_0+0xD4
   \   000000D6   0x0008             MOVS     R0,R1
    300              ptemp = (void *)&OSTmrWheelTblSize;
   \   000000D8   0x4939             LDR.N    R1,??OSDebugInit_0+0xD8
   \   000000DA   0x0008             MOVS     R0,R1
    301          #endif
    302          
    303              ptemp = (void *)&OSVersionNbr;
   \   000000DC   0x4939             LDR.N    R1,??OSDebugInit_0+0xDC
   \   000000DE   0x0008             MOVS     R0,R1
    304          
    305              ptemp = (void *)&OSDataSize;
   \   000000E0   0x4939             LDR.N    R1,??OSDebugInit_0+0xE0
   \   000000E2   0x0008             MOVS     R0,R1
    306          
    307              ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
    308          }
   \   000000E4   0x4770             BX       LR               ;; return
   \   000000E6   0xBF00             Nop      
   \                     ??OSDebugInit_0:
   \   000000E8   0x........         DC32     OSDebugEn
   \   000000EC   0x........         DC32     OSEndiannessTest
   \   000000F0   0x........         DC32     OSEventMax
   \   000000F4   0x........         DC32     OSEventNameEn
   \   000000F8   0x........         DC32     OSEventEn
   \   000000FC   0x........         DC32     OSEventSize
   \   00000100   0x........         DC32     OSEventTblSize
   \   00000104   0x........         DC32     OSEventMultiEn
   \   00000108   0x........         DC32     OSFlagEn
   \   0000010C   0x........         DC32     OSFlagGrpSize
   \   00000110   0x........         DC32     OSFlagNodeSize
   \   00000114   0x........         DC32     OSFlagWidth
   \   00000118   0x........         DC32     OSFlagMax
   \   0000011C   0x........         DC32     OSFlagNameEn
   \   00000120   0x........         DC32     OSLowestPrio
   \   00000124   0x........         DC32     OSMboxEn
   \   00000128   0x........         DC32     OSMemEn
   \   0000012C   0x........         DC32     OSMemMax
   \   00000130   0x........         DC32     OSMemNameEn
   \   00000134   0x........         DC32     OSMemSize
   \   00000138   0x........         DC32     OSMemTblSize
   \   0000013C   0x........         DC32     OSMutexEn
   \   00000140   0x........         DC32     OSPtrSize
   \   00000144   0x........         DC32     OSQEn
   \   00000148   0x........         DC32     OSQMax
   \   0000014C   0x........         DC32     OSQSize
   \   00000150   0x........         DC32     OSRdyTblSize
   \   00000154   0x........         DC32     OSSemEn
   \   00000158   0x........         DC32     OSStkWidth
   \   0000015C   0x........         DC32     OSTaskCreateEn
   \   00000160   0x........         DC32     OSTaskCreateExtEn
   \   00000164   0x........         DC32     OSTaskDelEn
   \   00000168   0x........         DC32     OSTaskIdleStkSize
   \   0000016C   0x........         DC32     OSTaskProfileEn
   \   00000170   0x........         DC32     OSTaskMax
   \   00000174   0x........         DC32     OSTaskNameEn
   \   00000178   0x........         DC32     OSTaskStatEn
   \   0000017C   0x........         DC32     OSTaskStatStkSize
   \   00000180   0x........         DC32     OSTaskStatStkChkEn
   \   00000184   0x........         DC32     OSTaskSwHookEn
   \   00000188   0x........         DC32     OSTCBPrioTblMax
   \   0000018C   0x........         DC32     OSTCBSize
   \   00000190   0x........         DC32     OSTicksPerSec
   \   00000194   0x........         DC32     OSTimeTickHookEn
   \   00000198   0x........         DC32     OSTmrTbl
   \   0000019C   0x........         DC32     OSTmrWheelTbl
   \   000001A0   0x........         DC32     OSTmrEn
   \   000001A4   0x........         DC32     OSTmrCfgMax
   \   000001A8   0x........         DC32     OSTmrCfgNameEn
   \   000001AC   0x........         DC32     OSTmrCfgWheelSize
   \   000001B0   0x........         DC32     OSTmrCfgTicksPerSec
   \   000001B4   0x........         DC32     OSTmrSize
   \   000001B8   0x........         DC32     OSTmrTblSize
   \   000001BC   0x........         DC32     OSTmrWheelSize
   \   000001C0   0x........         DC32     OSTmrWheelTblSize
   \   000001C4   0x........         DC32     OSVersionNbr
   \   000001C8   0x........         DC32     OSDataSize
    309          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   OSDebugInit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  OSDataSize
       2  OSDebugEn
     460  OSDebugInit
       4  OSEndiannessTest
       2  OSEventEn
       2  OSEventMax
       2  OSEventMultiEn
       2  OSEventNameEn
       2  OSEventSize
       2  OSEventTblSize
       2  OSFlagEn
       2  OSFlagGrpSize
       2  OSFlagMax
       2  OSFlagNameEn
       2  OSFlagNodeSize
       2  OSFlagWidth
       2  OSLowestPrio
       2  OSMboxEn
       2  OSMemEn
       2  OSMemMax
       2  OSMemNameEn
       2  OSMemSize
       2  OSMemTblSize
       2  OSMutexEn
       2  OSPtrSize
       2  OSQEn
       2  OSQMax
       2  OSQSize
       2  OSRdyTblSize
       2  OSSemEn
       2  OSStkWidth
       2  OSTCBPrioTblMax
       2  OSTCBSize
       2  OSTaskCreateEn
       2  OSTaskCreateExtEn
       2  OSTaskDelEn
       2  OSTaskIdleStkSize
       2  OSTaskMax
       2  OSTaskNameEn
       2  OSTaskProfileEn
       2  OSTaskStatEn
       2  OSTaskStatStkChkEn
       2  OSTaskStatStkSize
       2  OSTaskSwHookEn
       2  OSTicksPerSec
       2  OSTimeTickHookEn
       2  OSTmrCfgMax
       2  OSTmrCfgNameEn
       2  OSTmrCfgTicksPerSec
       2  OSTmrCfgWheelSize
       2  OSTmrEn
       2  OSTmrSize
       2  OSTmrTblSize
       2  OSTmrWheelSize
       2  OSTmrWheelTblSize
       2  OSVersionNbr

 
 112 bytes in section .rodata
 460 bytes in section .text
 
 460 bytes of CODE  memory
 112 bytes of CONST memory

Errors: none
Warnings: none

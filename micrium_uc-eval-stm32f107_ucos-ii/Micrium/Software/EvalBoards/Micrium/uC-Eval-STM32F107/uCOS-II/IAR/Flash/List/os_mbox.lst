###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.2.4510/W32 for ARM      08/Feb/2013  10:57:21 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\uCOS-II\Source\os_mbox.c         #
#    Command line =  "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\uCOS-II\Source\os_mbox.c" -D     #
#                    USE_STDPERIPH_DRIVER -lCN "C:\Users\daniel01\Desktop\Fas #
#                    tFile Test Folder\Micrium\Software\EvalBoards\Micrium\uC #
#                    -Eval-STM32F107\uCOS-II\IAR\Flash\List\" -o              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\daniel01\Desktop\FastFile Test       #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\IAR\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\" -I                          #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\OS\uCOS-II\" -I               #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\ST\STM32\inc\" -I             #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\uCOS-II\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\IAR\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\Ports\ARM-Cortex- #
#                    M3\IAR\" -I "C:\Users\daniel01\Desktop\FastFile Test     #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR #
#                    \" -I "C:\Users\daniel01\Desktop\FastFile Test           #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex #
#                    -M3\Generic\IAR\" -I "C:\Users\daniel01\Desktop\FastFile #
#                     Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval #
#                    -STM32F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Source\"   #
#                    -On --use_c++_inline                                     #
#    List file    =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\os_mbox.lst                  #
#    Object file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\os_mbox.o                     #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\daniel01\Desktop\FastFile Test Folder\Micrium\Software\uCOS-II\Source\os_mbox.c
      1          /*
      2          *********************************************************************************************************
      3          *                                                uC/OS-II
      4          *                                          The Real-Time Kernel
      5          *                                       MESSAGE MAILBOX MANAGEMENT
      6          *
      7          *                              (c) Copyright 1992-2012, Micrium, Weston, FL
      8          *                                           All Rights Reserved
      9          *
     10          * File    : OS_MBOX.C
     11          * By      : Jean J. Labrosse
     12          * Version : V2.92.07
     13          *
     14          * LICENSING TERMS:
     15          * ---------------
     16          *   uC/OS-II is provided in source form for FREE evaluation, for educational use or for peaceful research.
     17          * If you plan on using  uC/OS-II  in a commercial product you need to contact Micrium to properly license
     18          * its use in your product. We provide ALL the source code for your convenience and to help you experience
     19          * uC/OS-II.   The fact that the  source is provided does  NOT  mean that you can use it without  paying a
     20          * licensing fee.
     21          *********************************************************************************************************
     22          */
     23          
     24          #define  MICRIUM_SOURCE
     25          
     26          #ifndef  OS_MASTER_FILE
     27          #include <ucos_ii.h>
     28          #endif
     29          
     30          #if OS_MBOX_EN > 0u
     31          /*
     32          *********************************************************************************************************
     33          *                                        ACCEPT MESSAGE FROM MAILBOX
     34          *
     35          * Description: This function checks the mailbox to see if a message is available.  Unlike OSMboxPend(),
     36          *              OSMboxAccept() does not suspend the calling task if a message is not available.
     37          *
     38          * Arguments  : pevent        is a pointer to the event control block
     39          *
     40          * Returns    : != (void *)0  is the message in the mailbox if one is available.  The mailbox is cleared
     41          *                            so the next time OSMboxAccept() is called, the mailbox will be empty.
     42          *              == (void *)0  if the mailbox is empty or,
     43          *                            if 'pevent' is a NULL pointer or,
     44          *                            if you didn't pass the proper event pointer.
     45          *********************************************************************************************************
     46          */
     47          
     48          #if OS_MBOX_ACCEPT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
     49          void  *OSMboxAccept (OS_EVENT *pevent)
     50          {
   \                     OSMboxAccept:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     51              void      *pmsg;
     52          #if OS_CRITICAL_METHOD == 3u                              /* Allocate storage for CPU status register  */
     53              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2600             MOVS     R6,#+0
     54          #endif
     55          
     56          
     57          
     58          #if OS_ARG_CHK_EN > 0u
     59              if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
     60                  return ((void *)0);
     61              }
     62          #endif
     63              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD001             BEQ.N    ??OSMboxAccept_0
     64                  return ((void *)0);
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE00A             B.N      ??OSMboxAccept_1
     65              }
     66              OS_ENTER_CRITICAL();
   \                     ??OSMboxAccept_0:
   \   00000010   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000014   0x0006             MOVS     R6,R0
     67              pmsg               = pevent->OSEventPtr;
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0x0005             MOVS     R5,R0
     68              pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x6060             STR      R0,[R4, #+4]
     69              OS_EXIT_CRITICAL();
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0x.... 0x....      BL       OS_CPU_SR_Restore
     70              return (pmsg);                                        /* Return the message received (or NULL)     */
   \   00000024   0x0028             MOVS     R0,R5
   \                     ??OSMboxAccept_1:
   \   00000026   0xBD70             POP      {R4-R6,PC}       ;; return
     71          }
     72          #endif
     73          /*$PAGE*/
     74          /*
     75          *********************************************************************************************************
     76          *                                          CREATE A MESSAGE MAILBOX
     77          *
     78          * Description: This function creates a message mailbox if free event control blocks are available.
     79          *
     80          * Arguments  : pmsg          is a pointer to a message that you wish to deposit in the mailbox.  If
     81          *                            you set this value to the NULL pointer (i.e. (void *)0) then the mailbox
     82          *                            will be considered empty.
     83          *
     84          * Returns    : != (OS_EVENT *)0  is a pointer to the event control clock (OS_EVENT) associated with the
     85          *                                created mailbox
     86          *              == (OS_EVENT *)0  if no event control blocks were available
     87          *********************************************************************************************************
     88          */
     89          

   \                                 In section .text, align 2, keep-with-next
     90          OS_EVENT  *OSMboxCreate (void *pmsg)
     91          {
   \                     OSMboxCreate:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
     92              OS_EVENT  *pevent;
     93          #if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
     94              OS_CPU_SR  cpu_sr = 0u;
   \   00000004   0x2600             MOVS     R6,#+0
     95          #endif
     96          
     97          
     98          
     99          #ifdef OS_SAFETY_CRITICAL_IEC61508
    100              if (OSSafetyCriticalStartFlag == OS_TRUE) {
    101                  OS_SAFETY_CRITICAL_EXCEPTION();
    102                  return ((OS_EVENT *)0);
    103              }
    104          #endif
    105          
    106              if (OSIntNesting > 0u) {                     /* See if called from ISR ...                         */
   \   00000006   0x....             LDR.N    R0,??DataTable2_1
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD001             BEQ.N    ??OSMboxCreate_0
    107                  return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE01E             B.N      ??OSMboxCreate_1
    108              }
    109              OS_ENTER_CRITICAL();
   \                     ??OSMboxCreate_0:
   \   00000012   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000016   0x0006             MOVS     R6,R0
    110              pevent = OSEventFreeList;                    /* Get next free event control block                  */
   \   00000018   0x....             LDR.N    R0,??DataTable2_2
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x0005             MOVS     R5,R0
    111              if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
   \   0000001E   0x....             LDR.N    R0,??DataTable2_2
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD004             BEQ.N    ??OSMboxCreate_2
    112                  OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
   \   00000026   0x....             LDR.N    R0,??DataTable2_2
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x6840             LDR      R0,[R0, #+4]
   \   0000002C   0x....             LDR.N    R1,??DataTable2_2
   \   0000002E   0x6008             STR      R0,[R1, #+0]
    113              }
    114              OS_EXIT_CRITICAL();
   \                     ??OSMboxCreate_2:
   \   00000030   0x0030             MOVS     R0,R6
   \   00000032   0x.... 0x....      BL       OS_CPU_SR_Restore
    115              if (pevent != (OS_EVENT *)0) {
   \   00000036   0x2D00             CMP      R5,#+0
   \   00000038   0xD009             BEQ.N    ??OSMboxCreate_3
    116                  pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0x7028             STRB     R0,[R5, #+0]
    117                  pevent->OSEventCnt     = 0u;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x8128             STRH     R0,[R5, #+8]
    118                  pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
   \   00000042   0x606C             STR      R4,[R5, #+4]
    119          #if OS_EVENT_NAME_EN > 0u
    120                  pevent->OSEventName    = (INT8U *)(void *)"?";
   \   00000044   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   00000046   0x6168             STR      R0,[R5, #+20]
    121          #endif
    122                  OS_EventWaitListInit(pevent);
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0x.... 0x....      BL       OS_EventWaitListInit
    123              }
    124              return (pevent);                             /* Return pointer to event control block              */
   \                     ??OSMboxCreate_3:
   \   0000004E   0x0028             MOVS     R0,R5
   \                     ??OSMboxCreate_1:
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
    125          }
    126          /*$PAGE*/
    127          /*
    128          *********************************************************************************************************
    129          *                                           DELETE A MAIBOX
    130          *
    131          * Description: This function deletes a mailbox and readies all tasks pending on the mailbox.
    132          *
    133          * Arguments  : pevent        is a pointer to the event control block associated with the desired
    134          *                            mailbox.
    135          *
    136          *              opt           determines delete options as follows:
    137          *                            opt == OS_DEL_NO_PEND   Delete the mailbox ONLY if no task pending
    138          *                            opt == OS_DEL_ALWAYS    Deletes the mailbox even if tasks are waiting.
    139          *                                                    In this case, all the tasks pending will be readied.
    140          *
    141          *              perr          is a pointer to an error code that can contain one of the following values:
    142          *                            OS_ERR_NONE             The call was successful and the mailbox was deleted
    143          *                            OS_ERR_DEL_ISR          If you attempted to delete the mailbox from an ISR
    144          *                            OS_ERR_INVALID_OPT      An invalid option was specified
    145          *                            OS_ERR_TASK_WAITING     One or more tasks were waiting on the mailbox
    146          *                            OS_ERR_EVENT_TYPE       If you didn't pass a pointer to a mailbox
    147          *                            OS_ERR_PEVENT_NULL      If 'pevent' is a NULL pointer.
    148          *
    149          * Returns    : pevent        upon error
    150          *              (OS_EVENT *)0 if the mailbox was successfully deleted.
    151          *
    152          * Note(s)    : 1) This function must be used with care.  Tasks that would normally expect the presence of
    153          *                 the mailbox MUST check the return code of OSMboxPend().
    154          *              2) OSMboxAccept() callers will not know that the intended mailbox has been deleted!
    155          *              3) This call can potentially disable interrupts for a long time.  The interrupt disable
    156          *                 time is directly proportional to the number of tasks waiting on the mailbox.
    157          *              4) Because ALL tasks pending on the mailbox will be readied, you MUST be careful in
    158          *                 applications where the mailbox is used for mutual exclusion because the resource(s)
    159          *                 will no longer be guarded by the mailbox.
    160          *              5) All tasks that were waiting for the mailbox will be readied and returned an 
    161          *                 OS_ERR_PEND_ABORT if OSMboxDel() was called with OS_DEL_ALWAYS
    162          *********************************************************************************************************
    163          */
    164          
    165          #if OS_MBOX_DEL_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    166          OS_EVENT  *OSMboxDel (OS_EVENT  *pevent,
    167                                INT8U      opt,
    168                                INT8U     *perr)
    169          {
   \                     OSMboxDel:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4681             MOV      R9,R0
   \   00000006   0x000C             MOVS     R4,R1
   \   00000008   0x0015             MOVS     R5,R2
    170              BOOLEAN    tasks_waiting;
    171              OS_EVENT  *pevent_return;
    172          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    173              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    174          #endif
    175          
    176          
    177          
    178          #ifdef OS_SAFETY_CRITICAL
    179              if (perr == (INT8U *)0) {
    180                  OS_SAFETY_CRITICAL_EXCEPTION();
    181                  return ((OS_EVENT *)0);
    182              }
    183          #endif
    184          
    185          #if OS_ARG_CHK_EN > 0u
    186              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    187                  *perr = OS_ERR_PEVENT_NULL;
    188                  return (pevent);
    189              }
    190          #endif
    191              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   \   0000000E   0xF899 0x0000      LDRB     R0,[R9, #+0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD003             BEQ.N    ??OSMboxDel_0
    192                  *perr = OS_ERR_EVENT_TYPE;
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x7028             STRB     R0,[R5, #+0]
    193                  return (pevent);
   \   0000001A   0x4648             MOV      R0,R9
   \   0000001C   0xE06A             B.N      ??OSMboxDel_1
    194              }
    195              if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
   \                     ??OSMboxDel_0:
   \   0000001E   0x....             LDR.N    R0,??DataTable2_1
   \   00000020   0x7800             LDRB     R0,[R0, #+0]
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD003             BEQ.N    ??OSMboxDel_2
    196                  *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
   \   00000026   0x200F             MOVS     R0,#+15
   \   00000028   0x7028             STRB     R0,[R5, #+0]
    197                  return (pevent);
   \   0000002A   0x4648             MOV      R0,R9
   \   0000002C   0xE062             B.N      ??OSMboxDel_1
    198              }
    199              OS_ENTER_CRITICAL();
   \                     ??OSMboxDel_2:
   \   0000002E   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000032   0x4680             MOV      R8,R0
    200              if (pevent->OSEventGrp != 0u) {                        /* See if any tasks waiting on mailbox      */
   \   00000034   0xF899 0x000A      LDRB     R0,[R9, #+10]
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD002             BEQ.N    ??OSMboxDel_3
    201                  tasks_waiting = OS_TRUE;                           /* Yes                                      */
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x0006             MOVS     R6,R0
   \   00000040   0xE001             B.N      ??OSMboxDel_4
    202              } else {
    203                  tasks_waiting = OS_FALSE;                          /* No                                       */
   \                     ??OSMboxDel_3:
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x0006             MOVS     R6,R0
    204              }
    205              switch (opt) {
   \                     ??OSMboxDel_4:
   \   00000046   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000048   0x2C00             CMP      R4,#+0
   \   0000004A   0xD002             BEQ.N    ??OSMboxDel_5
   \   0000004C   0x2C01             CMP      R4,#+1
   \   0000004E   0xD022             BEQ.N    ??OSMboxDel_6
   \   00000050   0xE049             B.N      ??OSMboxDel_7
    206                  case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
    207                       if (tasks_waiting == OS_FALSE) {
   \                     ??OSMboxDel_5:
   \   00000052   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000054   0x2E00             CMP      R6,#+0
   \   00000056   0xD117             BNE.N    ??OSMboxDel_8
    208          #if OS_EVENT_NAME_EN > 0u
    209                           pevent->OSEventName = (INT8U *)(void *)"?";
   \   00000058   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   0000005A   0xF8C9 0x0014      STR      R0,[R9, #+20]
    210          #endif
    211                           pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF889 0x0000      STRB     R0,[R9, #+0]
    212                           pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
   \   00000064   0x....             LDR.N    R0,??DataTable2_2
   \   00000066   0x6800             LDR      R0,[R0, #+0]
   \   00000068   0xF8C9 0x0004      STR      R0,[R9, #+4]
    213                           pevent->OSEventCnt  = 0u;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF8A9 0x0008      STRH     R0,[R9, #+8]
    214                           OSEventFreeList     = pevent;             /* Get next free event control block        */
   \   00000072   0x....             LDR.N    R0,??DataTable2_2
   \   00000074   0xF8C0 0x9000      STR      R9,[R0, #+0]
    215                           OS_EXIT_CRITICAL();
   \   00000078   0x4640             MOV      R0,R8
   \   0000007A   0x.... 0x....      BL       OS_CPU_SR_Restore
    216                           *perr               = OS_ERR_NONE;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x7028             STRB     R0,[R5, #+0]
    217                           pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x0007             MOVS     R7,R0
   \   00000086   0xE005             B.N      ??OSMboxDel_9
    218                       } else {
    219                           OS_EXIT_CRITICAL();
   \                     ??OSMboxDel_8:
   \   00000088   0x4640             MOV      R0,R8
   \   0000008A   0x.... 0x....      BL       OS_CPU_SR_Restore
    220                           *perr               = OS_ERR_TASK_WAITING;
   \   0000008E   0x2049             MOVS     R0,#+73
   \   00000090   0x7028             STRB     R0,[R5, #+0]
    221                           pevent_return       = pevent;
   \   00000092   0x464F             MOV      R7,R9
    222                       }
    223                       break;
   \                     ??OSMboxDel_9:
   \   00000094   0xE02D             B.N      ??OSMboxDel_10
    224          
    225                  case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
    226                       while (pevent->OSEventGrp != 0u) {            /* Ready ALL tasks waiting for mailbox      */
   \                     ??OSMboxDel_6:
   \   00000096   0xF899 0x000A      LDRB     R0,[R9, #+10]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD006             BEQ.N    ??OSMboxDel_11
    227                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   \   0000009E   0x2302             MOVS     R3,#+2
   \   000000A0   0x2202             MOVS     R2,#+2
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0x4648             MOV      R0,R9
   \   000000A6   0x.... 0x....      BL       OS_EventTaskRdy
   \   000000AA   0xE7F4             B.N      ??OSMboxDel_6
    228                       }
    229          #if OS_EVENT_NAME_EN > 0u
    230                       pevent->OSEventName    = (INT8U *)(void *)"?";
   \                     ??OSMboxDel_11:
   \   000000AC   0x....             ADR.N    R0,??DataTable2  ;; "\?"
   \   000000AE   0xF8C9 0x0014      STR      R0,[R9, #+20]
    231          #endif
    232                       pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
   \   000000B2   0x2000             MOVS     R0,#+0
   \   000000B4   0xF889 0x0000      STRB     R0,[R9, #+0]
    233                       pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
   \   000000B8   0x....             LDR.N    R0,??DataTable2_2
   \   000000BA   0x6800             LDR      R0,[R0, #+0]
   \   000000BC   0xF8C9 0x0004      STR      R0,[R9, #+4]
    234                       pevent->OSEventCnt     = 0u;
   \   000000C0   0x2000             MOVS     R0,#+0
   \   000000C2   0xF8A9 0x0008      STRH     R0,[R9, #+8]
    235                       OSEventFreeList        = pevent;              /* Get next free event control block        */
   \   000000C6   0x....             LDR.N    R0,??DataTable2_2
   \   000000C8   0xF8C0 0x9000      STR      R9,[R0, #+0]
    236                       OS_EXIT_CRITICAL();
   \   000000CC   0x4640             MOV      R0,R8
   \   000000CE   0x.... 0x....      BL       OS_CPU_SR_Restore
    237                       if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
   \   000000D2   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   000000D4   0x2E01             CMP      R6,#+1
   \   000000D6   0xD101             BNE.N    ??OSMboxDel_12
    238                           OS_Sched();                               /* Find highest priority task ready to run  */
   \   000000D8   0x.... 0x....      BL       OS_Sched
    239                       }
    240                       *perr         = OS_ERR_NONE;
   \                     ??OSMboxDel_12:
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x7028             STRB     R0,[R5, #+0]
    241                       pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0x0007             MOVS     R7,R0
    242                       break;
   \   000000E4   0xE005             B.N      ??OSMboxDel_10
    243          
    244                  default:
    245                       OS_EXIT_CRITICAL();
   \                     ??OSMboxDel_7:
   \   000000E6   0x4640             MOV      R0,R8
   \   000000E8   0x.... 0x....      BL       OS_CPU_SR_Restore
    246                       *perr         = OS_ERR_INVALID_OPT;
   \   000000EC   0x2007             MOVS     R0,#+7
   \   000000EE   0x7028             STRB     R0,[R5, #+0]
    247                       pevent_return = pevent;
   \   000000F0   0x464F             MOV      R7,R9
    248                       break;
    249              }
    250              return (pevent_return);
   \                     ??OSMboxDel_10:
   \   000000F2   0x0038             MOVS     R0,R7
   \                     ??OSMboxDel_1:
   \   000000F4   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    251          }
    252          #endif
    253          
    254          /*$PAGE*/
    255          /*
    256          *********************************************************************************************************
    257          *                                    PEND ON MAILBOX FOR A MESSAGE
    258          *
    259          * Description: This function waits for a message to be sent to a mailbox
    260          *
    261          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    262          *
    263          *              timeout       is an optional timeout period (in clock ticks).  If non-zero, your task will
    264          *                            wait for a message to arrive at the mailbox up to the amount of time
    265          *                            specified by this argument.  If you specify 0, however, your task will wait
    266          *                            forever at the specified mailbox or, until a message arrives.
    267          *
    268          *              perr          is a pointer to where an error message will be deposited.  Possible error
    269          *                            messages are:
    270          *
    271          *                            OS_ERR_NONE         The call was successful and your task received a
    272          *                                                message.
    273          *                            OS_ERR_TIMEOUT      A message was not received within the specified 'timeout'.
    274          *                            OS_ERR_PEND_ABORT   The wait on the mailbox was aborted.
    275          *                            OS_ERR_EVENT_TYPE   Invalid event type
    276          *                            OS_ERR_PEND_ISR     If you called this function from an ISR and the result
    277          *                                                would lead to a suspension.
    278          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer
    279          *                            OS_ERR_PEND_LOCKED  If you called this function when the scheduler is locked
    280          *
    281          * Returns    : != (void *)0  is a pointer to the message received
    282          *              == (void *)0  if no message was received or,
    283          *                            if 'pevent' is a NULL pointer or,
    284          *                            if you didn't pass the proper pointer to the event control block.
    285          *********************************************************************************************************
    286          */
    287          /*$PAGE*/

   \                                 In section .text, align 2, keep-with-next
    288          void  *OSMboxPend (OS_EVENT  *pevent,
    289                             INT32U     timeout,
    290                             INT8U     *perr)
    291          {
   \                     OSMboxPend:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    292              void      *pmsg;
    293          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    294              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    295          #endif
    296          
    297          
    298          
    299          #ifdef OS_SAFETY_CRITICAL
    300              if (perr == (INT8U *)0) {
    301                  OS_SAFETY_CRITICAL_EXCEPTION();
    302                  return ((void *)0);
    303              }
    304          #endif
    305          
    306          #if OS_ARG_CHK_EN > 0u
    307              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    308                  *perr = OS_ERR_PEVENT_NULL;
    309                  return ((void *)0);
    310              }
    311          #endif
    312              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD003             BEQ.N    ??OSMboxPend_0
    313                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7030             STRB     R0,[R6, #+0]
    314                  return ((void *)0);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE074             B.N      ??OSMboxPend_1
    315              }
    316              if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
   \                     ??OSMboxPend_0:
   \   0000001C   0x....             LDR.N    R0,??DataTable2_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD003             BEQ.N    ??OSMboxPend_2
    317                  *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x7030             STRB     R0,[R6, #+0]
    318                  return ((void *)0);
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xE06C             B.N      ??OSMboxPend_1
    319              }
    320              if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
   \                     ??OSMboxPend_2:
   \   0000002C   0x....             LDR.N    R0,??DataTable2_3
   \   0000002E   0x7800             LDRB     R0,[R0, #+0]
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD003             BEQ.N    ??OSMboxPend_3
    321                  *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
   \   00000034   0x200D             MOVS     R0,#+13
   \   00000036   0x7030             STRB     R0,[R6, #+0]
    322                  return ((void *)0);
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0xE064             B.N      ??OSMboxPend_1
    323              }
    324              OS_ENTER_CRITICAL();
   \                     ??OSMboxPend_3:
   \   0000003C   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000040   0x4680             MOV      R8,R0
    325              pmsg = pevent->OSEventPtr;
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0x0007             MOVS     R7,R0
    326              if (pmsg != (void *)0) {                          /* See if there is already a message             */
   \   00000046   0x2F00             CMP      R7,#+0
   \   00000048   0xD008             BEQ.N    ??OSMboxPend_4
    327                  pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x6060             STR      R0,[R4, #+4]
    328                  OS_EXIT_CRITICAL();
   \   0000004E   0x4640             MOV      R0,R8
   \   00000050   0x.... 0x....      BL       OS_CPU_SR_Restore
    329                  *perr = OS_ERR_NONE;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x7030             STRB     R0,[R6, #+0]
    330                  return (pmsg);                                /* Return the message received (or NULL)         */
   \   00000058   0x0038             MOVS     R0,R7
   \   0000005A   0xE054             B.N      ??OSMboxPend_1
    331              }
    332              OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
   \                     ??OSMboxPend_4:
   \   0000005C   0x....             LDR.N    R0,??DataTable2_4
   \   0000005E   0x6800             LDR      R0,[R0, #+0]
   \   00000060   0xF890 0x0034      LDRB     R0,[R0, #+52]
   \   00000064   0xF050 0x0002      ORRS     R0,R0,#0x2
   \   00000068   0x....             LDR.N    R1,??DataTable2_4
   \   0000006A   0x6809             LDR      R1,[R1, #+0]
   \   0000006C   0xF881 0x0034      STRB     R0,[R1, #+52]
    333              OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
   \   00000070   0x....             LDR.N    R0,??DataTable2_4
   \   00000072   0x6800             LDR      R0,[R0, #+0]
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0xF880 0x1035      STRB     R1,[R0, #+53]
    334              OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
   \   0000007A   0x....             LDR.N    R0,??DataTable2_4
   \   0000007C   0x6800             LDR      R0,[R0, #+0]
   \   0000007E   0x6305             STR      R5,[R0, #+48]
    335              OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
   \   00000080   0x0020             MOVS     R0,R4
   \   00000082   0x.... 0x....      BL       OS_EventTaskWait
    336              OS_EXIT_CRITICAL();
   \   00000086   0x4640             MOV      R0,R8
   \   00000088   0x.... 0x....      BL       OS_CPU_SR_Restore
    337              OS_Sched();                                       /* Find next highest priority task ready to run  */
   \   0000008C   0x.... 0x....      BL       OS_Sched
    338              OS_ENTER_CRITICAL();
   \   00000090   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000094   0x4680             MOV      R8,R0
    339              switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
   \   00000096   0x....             LDR.N    R0,??DataTable2_4
   \   00000098   0x6800             LDR      R0,[R0, #+0]
   \   0000009A   0xF890 0x0035      LDRB     R0,[R0, #+53]
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD002             BEQ.N    ??OSMboxPend_5
   \   000000A2   0x2802             CMP      R0,#+2
   \   000000A4   0xD007             BEQ.N    ??OSMboxPend_6
   \   000000A6   0xE00B             B.N      ??OSMboxPend_7
    340                  case OS_STAT_PEND_OK:
    341                       pmsg =  OSTCBCur->OSTCBMsg;
   \                     ??OSMboxPend_5:
   \   000000A8   0x....             LDR.N    R0,??DataTable2_4
   \   000000AA   0x6800             LDR      R0,[R0, #+0]
   \   000000AC   0x6A40             LDR      R0,[R0, #+36]
   \   000000AE   0x0007             MOVS     R7,R0
    342                      *perr =  OS_ERR_NONE;
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0x7030             STRB     R0,[R6, #+0]
    343                       break;
   \   000000B4   0xE00D             B.N      ??OSMboxPend_8
    344          
    345                  case OS_STAT_PEND_ABORT:
    346                       pmsg = (void *)0;
   \                     ??OSMboxPend_6:
   \   000000B6   0x2000             MOVS     R0,#+0
   \   000000B8   0x0007             MOVS     R7,R0
    347                      *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
   \   000000BA   0x200E             MOVS     R0,#+14
   \   000000BC   0x7030             STRB     R0,[R6, #+0]
    348                       break;
   \   000000BE   0xE008             B.N      ??OSMboxPend_8
    349          
    350                  case OS_STAT_PEND_TO:
    351                  default:
    352                       OS_EventTaskRemove(OSTCBCur, pevent);
   \                     ??OSMboxPend_7:
   \   000000C0   0x0021             MOVS     R1,R4
   \   000000C2   0x....             LDR.N    R0,??DataTable2_4
   \   000000C4   0x6800             LDR      R0,[R0, #+0]
   \   000000C6   0x.... 0x....      BL       OS_EventTaskRemove
    353                       pmsg = (void *)0;
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x0007             MOVS     R7,R0
    354                      *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
   \   000000CE   0x200A             MOVS     R0,#+10
   \   000000D0   0x7030             STRB     R0,[R6, #+0]
    355                       break;
    356              }
    357              OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
   \                     ??OSMboxPend_8:
   \   000000D2   0x....             LDR.N    R0,??DataTable2_4
   \   000000D4   0x6800             LDR      R0,[R0, #+0]
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0xF880 0x1034      STRB     R1,[R0, #+52]
    358              OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
   \   000000DC   0x....             LDR.N    R0,??DataTable2_4
   \   000000DE   0x6800             LDR      R0,[R0, #+0]
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0xF880 0x1035      STRB     R1,[R0, #+53]
    359              OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
   \   000000E6   0x....             LDR.N    R0,??DataTable2_4
   \   000000E8   0x6800             LDR      R0,[R0, #+0]
   \   000000EA   0x2100             MOVS     R1,#+0
   \   000000EC   0x61C1             STR      R1,[R0, #+28]
    360          #if (OS_EVENT_MULTI_EN > 0u)
    361              OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
   \   000000EE   0x....             LDR.N    R0,??DataTable2_4
   \   000000F0   0x6800             LDR      R0,[R0, #+0]
   \   000000F2   0x2100             MOVS     R1,#+0
   \   000000F4   0x6201             STR      R1,[R0, #+32]
    362          #endif
    363              OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
   \   000000F6   0x....             LDR.N    R0,??DataTable2_4
   \   000000F8   0x6800             LDR      R0,[R0, #+0]
   \   000000FA   0x2100             MOVS     R1,#+0
   \   000000FC   0x6241             STR      R1,[R0, #+36]
    364              OS_EXIT_CRITICAL();
   \   000000FE   0x4640             MOV      R0,R8
   \   00000100   0x.... 0x....      BL       OS_CPU_SR_Restore
    365              return (pmsg);                                    /* Return received message                       */
   \   00000104   0x0038             MOVS     R0,R7
   \                     ??OSMboxPend_1:
   \   00000106   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    366          }
    367          /*$PAGE*/
    368          /*
    369          *********************************************************************************************************
    370          *                                     ABORT WAITING ON A MESSAGE MAILBOX
    371          *
    372          * Description: This function aborts & readies any tasks currently waiting on a mailbox.  This function
    373          *              should be used to fault-abort the wait on the mailbox, rather than to normally signal
    374          *              the mailbox via OSMboxPost() or OSMboxPostOpt().
    375          *
    376          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox.
    377          *
    378          *              opt           determines the type of ABORT performed:
    379          *                            OS_PEND_OPT_NONE         ABORT wait for a single task (HPT) waiting on the
    380          *                                                     mailbox
    381          *                            OS_PEND_OPT_BROADCAST    ABORT wait for ALL tasks that are  waiting on the
    382          *                                                     mailbox
    383          *
    384          *              perr          is a pointer to where an error message will be deposited.  Possible error
    385          *                            messages are:
    386          *
    387          *                            OS_ERR_NONE         No tasks were     waiting on the mailbox.
    388          *                            OS_ERR_PEND_ABORT   At least one task waiting on the mailbox was readied
    389          *                                                and informed of the aborted wait; check return value
    390          *                                                for the number of tasks whose wait on the mailbox
    391          *                                                was aborted.
    392          *                            OS_ERR_EVENT_TYPE   If you didn't pass a pointer to a mailbox.
    393          *                            OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
    394          *
    395          * Returns    : == 0          if no tasks were waiting on the mailbox, or upon error.
    396          *              >  0          if one or more tasks waiting on the mailbox are now readied and informed.
    397          *********************************************************************************************************
    398          */
    399          
    400          #if OS_MBOX_PEND_ABORT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    401          INT8U  OSMboxPendAbort (OS_EVENT  *pevent,
    402                                  INT8U      opt,
    403                                  INT8U     *perr)
    404          {
   \                     OSMboxPendAbort:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
   \   00000008   0x0016             MOVS     R6,R2
    405              INT8U      nbr_tasks;
    406          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    407              OS_CPU_SR  cpu_sr = 0u;
   \   0000000A   0xF05F 0x0800      MOVS     R8,#+0
    408          #endif
    409          
    410          
    411          
    412          #ifdef OS_SAFETY_CRITICAL
    413              if (perr == (INT8U *)0) {
    414                  OS_SAFETY_CRITICAL_EXCEPTION();
    415                  return (0u);
    416              }
    417          #endif
    418          
    419          #if OS_ARG_CHK_EN > 0u
    420              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    421                  *perr = OS_ERR_PEVENT_NULL;
    422                  return (0u);
    423              }
    424          #endif
    425              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD003             BEQ.N    ??OSMboxPendAbort_0
    426                  *perr = OS_ERR_EVENT_TYPE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7030             STRB     R0,[R6, #+0]
    427                  return (0u);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xE02D             B.N      ??OSMboxPendAbort_1
    428              }
    429              OS_ENTER_CRITICAL();
   \                     ??OSMboxPendAbort_0:
   \   0000001C   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000020   0x4680             MOV      R8,R0
    430              if (pevent->OSEventGrp != 0u) {                        /* See if any task waiting on mailbox?      */
   \   00000022   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD021             BEQ.N    ??OSMboxPendAbort_2
    431                  nbr_tasks = 0u;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x0007             MOVS     R7,R0
    432                  switch (opt) {
   \   0000002C   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \   0000002E   0x2D01             CMP      R5,#+1
   \   00000030   0xD10B             BNE.N    ??OSMboxPendAbort_3
    433                      case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
    434                           while (pevent->OSEventGrp != 0u) {        /* Yes, ready ALL tasks waiting on mailbox  */
   \                     ??OSMboxPendAbort_4:
   \   00000032   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD007             BEQ.N    ??OSMboxPendAbort_5
    435                               (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   \   00000038   0x2302             MOVS     R3,#+2
   \   0000003A   0x2202             MOVS     R2,#+2
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       OS_EventTaskRdy
    436                               nbr_tasks++;
   \   00000044   0x1C7F             ADDS     R7,R7,#+1
   \   00000046   0xE7F4             B.N      ??OSMboxPendAbort_4
    437                           }
    438                           break;
   \                     ??OSMboxPendAbort_5:
   \   00000048   0xE006             B.N      ??OSMboxPendAbort_6
    439          
    440                      case OS_PEND_OPT_NONE:
    441                      default:                                       /* No,  ready HPT       waiting on mailbox  */
    442                           (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
   \                     ??OSMboxPendAbort_3:
   \   0000004A   0x2302             MOVS     R3,#+2
   \   0000004C   0x2202             MOVS     R2,#+2
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x0020             MOVS     R0,R4
   \   00000052   0x.... 0x....      BL       OS_EventTaskRdy
    443                           nbr_tasks++;
   \   00000056   0x1C7F             ADDS     R7,R7,#+1
    444                           break;
    445                  }
    446                  OS_EXIT_CRITICAL();
   \                     ??OSMboxPendAbort_6:
   \   00000058   0x4640             MOV      R0,R8
   \   0000005A   0x.... 0x....      BL       OS_CPU_SR_Restore
    447                  OS_Sched();                                        /* Find HPT ready to run                    */
   \   0000005E   0x.... 0x....      BL       OS_Sched
    448                  *perr = OS_ERR_PEND_ABORT;
   \   00000062   0x200E             MOVS     R0,#+14
   \   00000064   0x7030             STRB     R0,[R6, #+0]
    449                  return (nbr_tasks);
   \   00000066   0x0038             MOVS     R0,R7
   \   00000068   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000006A   0xE005             B.N      ??OSMboxPendAbort_1
    450              }
    451              OS_EXIT_CRITICAL();
   \                     ??OSMboxPendAbort_2:
   \   0000006C   0x4640             MOV      R0,R8
   \   0000006E   0x.... 0x....      BL       OS_CPU_SR_Restore
    452              *perr = OS_ERR_NONE;
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x7030             STRB     R0,[R6, #+0]
    453              return (0u);                                           /* No tasks waiting on mailbox              */
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??OSMboxPendAbort_1:
   \   00000078   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    454          }
    455          #endif
    456          
    457          /*$PAGE*/
    458          /*
    459          *********************************************************************************************************
    460          *                                      POST MESSAGE TO A MAILBOX
    461          *
    462          * Description: This function sends a message to a mailbox
    463          *
    464          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    465          *
    466          *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
    467          *
    468          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    469          *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
    470          *                                   message at a time and thus, the message MUST be consumed before you
    471          *                                   are allowed to send another one.
    472          *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
    473          *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
    474          *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
    475          *
    476          * Note(s)    : 1) HPT means Highest Priority Task
    477          *********************************************************************************************************
    478          */
    479          
    480          #if OS_MBOX_POST_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    481          INT8U  OSMboxPost (OS_EVENT  *pevent,
    482                             void      *pmsg)
    483          {
   \                     OSMboxPost:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    484          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    485              OS_CPU_SR  cpu_sr = 0u;
   \   00000006   0x2600             MOVS     R6,#+0
    486          #endif
    487          
    488          
    489          
    490          #if OS_ARG_CHK_EN > 0u
    491              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    492                  return (OS_ERR_PEVENT_NULL);
    493              }
    494              if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    495                  return (OS_ERR_POST_NULL_PTR);
    496              }
    497          #endif
    498              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD001             BEQ.N    ??OSMboxPost_0
    499                  return (OS_ERR_EVENT_TYPE);
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xE020             B.N      ??OSMboxPost_1
    500              }
    501              OS_ENTER_CRITICAL();
   \                     ??OSMboxPost_0:
   \   00000012   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000016   0x0006             MOVS     R6,R0
    502              if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
   \   00000018   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00D             BEQ.N    ??OSMboxPost_2
    503                                                                /* Ready HPT waiting on event                    */
    504                  (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \   0000001E   0x2300             MOVS     R3,#+0
   \   00000020   0x2202             MOVS     R2,#+2
   \   00000022   0x0029             MOVS     R1,R5
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       OS_EventTaskRdy
   \   0000002A   0x0007             MOVS     R7,R0
    505                  OS_EXIT_CRITICAL();
   \   0000002C   0x0030             MOVS     R0,R6
   \   0000002E   0x.... 0x....      BL       OS_CPU_SR_Restore
    506                  OS_Sched();                                   /* Find highest priority task ready to run       */
   \   00000032   0x.... 0x....      BL       OS_Sched
    507                  return (OS_ERR_NONE);
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xE00C             B.N      ??OSMboxPost_1
    508              }
    509              if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   \                     ??OSMboxPost_2:
   \   0000003A   0x6860             LDR      R0,[R4, #+4]
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD004             BEQ.N    ??OSMboxPost_3
    510                  OS_EXIT_CRITICAL();
   \   00000040   0x0030             MOVS     R0,R6
   \   00000042   0x.... 0x....      BL       OS_CPU_SR_Restore
    511                  return (OS_ERR_MBOX_FULL);
   \   00000046   0x2014             MOVS     R0,#+20
   \   00000048   0xE004             B.N      ??OSMboxPost_1
    512              }
    513              pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   \                     ??OSMboxPost_3:
   \   0000004A   0x6065             STR      R5,[R4, #+4]
    514              OS_EXIT_CRITICAL();
   \   0000004C   0x0030             MOVS     R0,R6
   \   0000004E   0x.... 0x....      BL       OS_CPU_SR_Restore
    515              return (OS_ERR_NONE);
   \   00000052   0x2000             MOVS     R0,#+0
   \                     ??OSMboxPost_1:
   \   00000054   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    516          }
    517          #endif
    518          
    519          /*$PAGE*/
    520          /*
    521          *********************************************************************************************************
    522          *                                      POST MESSAGE TO A MAILBOX
    523          *
    524          * Description: This function sends a message to a mailbox
    525          *
    526          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    527          *
    528          *              pmsg          is a pointer to the message to send.  You MUST NOT send a NULL pointer.
    529          *
    530          *              opt           determines the type of POST performed:
    531          *                            OS_POST_OPT_NONE         POST to a single waiting task
    532          *                                                     (Identical to OSMboxPost())
    533          *                            OS_POST_OPT_BROADCAST    POST to ALL tasks that are waiting on the mailbox
    534          *
    535          *                            OS_POST_OPT_NO_SCHED     Indicates that the scheduler will NOT be invoked
    536          *
    537          * Returns    : OS_ERR_NONE          The call was successful and the message was sent
    538          *              OS_ERR_MBOX_FULL     If the mailbox already contains a message.  You can can only send one
    539          *                                   message at a time and thus, the message MUST be consumed before you
    540          *                                   are allowed to send another one.
    541          *              OS_ERR_EVENT_TYPE    If you are attempting to post to a non mailbox.
    542          *              OS_ERR_PEVENT_NULL   If 'pevent' is a NULL pointer
    543          *              OS_ERR_POST_NULL_PTR If you are attempting to post a NULL pointer
    544          *
    545          * Note(s)    : 1) HPT means Highest Priority Task
    546          *
    547          * Warning    : Interrupts can be disabled for a long time if you do a 'broadcast'.  In fact, the
    548          *              interrupt disable time is proportional to the number of tasks waiting on the mailbox.
    549          *********************************************************************************************************
    550          */
    551          
    552          #if OS_MBOX_POST_OPT_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    553          INT8U  OSMboxPostOpt (OS_EVENT  *pevent,
    554                                void      *pmsg,
    555                                INT8U      opt)
    556          {
   \                     OSMboxPostOpt:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x0016             MOVS     R6,R2
    557          #if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    558              OS_CPU_SR  cpu_sr = 0u;
   \   00000008   0x2700             MOVS     R7,#+0
    559          #endif
    560          
    561          
    562          
    563          #if OS_ARG_CHK_EN > 0u
    564              if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
    565                  return (OS_ERR_PEVENT_NULL);
    566              }
    567              if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
    568                  return (OS_ERR_POST_NULL_PTR);
    569              }
    570          #endif
    571              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
   \   0000000A   0x7820             LDRB     R0,[R4, #+0]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD001             BEQ.N    ??OSMboxPostOpt_0
    572                  return (OS_ERR_EVENT_TYPE);
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE02D             B.N      ??OSMboxPostOpt_1
    573              }
    574              OS_ENTER_CRITICAL();
   \                     ??OSMboxPostOpt_0:
   \   00000014   0x.... 0x....      BL       OS_CPU_SR_Save
   \   00000018   0x0007             MOVS     R7,R0
    575              if (pevent->OSEventGrp != 0u) {                   /* See if any task pending on mailbox            */
   \   0000001A   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD01A             BEQ.N    ??OSMboxPostOpt_2
    576                  if ((opt & OS_POST_OPT_BROADCAST) != 0x00u) { /* Do we need to post msg to ALL waiting tasks ? */
   \   00000020   0x07F0             LSLS     R0,R6,#+31
   \   00000022   0xD509             BPL.N    ??OSMboxPostOpt_3
    577                      while (pevent->OSEventGrp != 0u) {        /* Yes, Post to ALL tasks waiting on mailbox     */
   \                     ??OSMboxPostOpt_4:
   \   00000024   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD00C             BEQ.N    ??OSMboxPostOpt_5
    578                          (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x2202             MOVS     R2,#+2
   \   0000002E   0x0029             MOVS     R1,R5
   \   00000030   0x0020             MOVS     R0,R4
   \   00000032   0x.... 0x....      BL       OS_EventTaskRdy
   \   00000036   0xE7F5             B.N      ??OSMboxPostOpt_4
    579                      }
    580                  } else {                                      /* No,  Post to HPT waiting on mbox              */
    581                      (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
   \                     ??OSMboxPostOpt_3:
   \   00000038   0x2300             MOVS     R3,#+0
   \   0000003A   0x2202             MOVS     R2,#+2
   \   0000003C   0x0029             MOVS     R1,R5
   \   0000003E   0x0020             MOVS     R0,R4
   \   00000040   0x.... 0x....      BL       OS_EventTaskRdy
    582                  }
    583                  OS_EXIT_CRITICAL();
   \                     ??OSMboxPostOpt_5:
   \   00000044   0x0038             MOVS     R0,R7
   \   00000046   0x.... 0x....      BL       OS_CPU_SR_Restore
    584                  if ((opt & OS_POST_OPT_NO_SCHED) == 0u) {     /* See if scheduler needs to be invoked          */
   \   0000004A   0x0770             LSLS     R0,R6,#+29
   \   0000004C   0xD401             BMI.N    ??OSMboxPostOpt_6
    585                      OS_Sched();                               /* Find HPT ready to run                         */
   \   0000004E   0x.... 0x....      BL       OS_Sched
    586                  }
    587                  return (OS_ERR_NONE);
   \                     ??OSMboxPostOpt_6:
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xE00C             B.N      ??OSMboxPostOpt_1
    588              }
    589              if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
   \                     ??OSMboxPostOpt_2:
   \   00000056   0x6860             LDR      R0,[R4, #+4]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD004             BEQ.N    ??OSMboxPostOpt_7
    590                  OS_EXIT_CRITICAL();
   \   0000005C   0x0038             MOVS     R0,R7
   \   0000005E   0x.... 0x....      BL       OS_CPU_SR_Restore
    591                  return (OS_ERR_MBOX_FULL);
   \   00000062   0x2014             MOVS     R0,#+20
   \   00000064   0xE004             B.N      ??OSMboxPostOpt_1
    592              }
    593              pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
   \                     ??OSMboxPostOpt_7:
   \   00000066   0x6065             STR      R5,[R4, #+4]
    594              OS_EXIT_CRITICAL();
   \   00000068   0x0038             MOVS     R0,R7
   \   0000006A   0x.... 0x....      BL       OS_CPU_SR_Restore
    595              return (OS_ERR_NONE);
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??OSMboxPostOpt_1:
   \   00000070   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    596          }
    597          #endif
    598          
    599          /*$PAGE*/
    600          /*
    601          *********************************************************************************************************
    602          *                                       QUERY A MESSAGE MAILBOX
    603          *
    604          * Description: This function obtains information about a message mailbox.
    605          *
    606          * Arguments  : pevent        is a pointer to the event control block associated with the desired mailbox
    607          *
    608          *              p_mbox_data   is a pointer to a structure that will contain information about the message
    609          *                            mailbox.
    610          *
    611          * Returns    : OS_ERR_NONE         The call was successful and the message was sent
    612          *              OS_ERR_EVENT_TYPE   If you are attempting to obtain data from a non mailbox.
    613          *              OS_ERR_PEVENT_NULL  If 'pevent'      is a NULL pointer
    614          *              OS_ERR_PDATA_NULL   If 'p_mbox_data' is a NULL pointer
    615          *********************************************************************************************************
    616          */
    617          
    618          #if OS_MBOX_QUERY_EN > 0u

   \                                 In section .text, align 2, keep-with-next
    619          INT8U  OSMboxQuery (OS_EVENT      *pevent,
    620                              OS_MBOX_DATA  *p_mbox_data)
    621          {
   \                     OSMboxQuery:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    622              INT8U       i;
    623              OS_PRIO    *psrc;
    624              OS_PRIO    *pdest;
    625          #if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    626              OS_CPU_SR   cpu_sr = 0u;
   \   00000008   0xF05F 0x0900      MOVS     R9,#+0
    627          #endif
    628          
    629          
    630          
    631          #if OS_ARG_CHK_EN > 0u
    632              if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
    633                  return (OS_ERR_PEVENT_NULL);
    634              }
    635              if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
    636                  return (OS_ERR_PDATA_NULL);
    637              }
    638          #endif
    639              if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD001             BEQ.N    ??OSMboxQuery_0
    640                  return (OS_ERR_EVENT_TYPE);
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xE01C             B.N      ??OSMboxQuery_1
    641              }
    642              OS_ENTER_CRITICAL();
   \                     ??OSMboxQuery_0:
   \   00000016   0x.... 0x....      BL       OS_CPU_SR_Save
   \   0000001A   0x4681             MOV      R9,R0
    643              p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
   \   0000001C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000001E   0x7328             STRB     R0,[R5, #+12]
    644              psrc                    = &pevent->OSEventTbl[0];
   \   00000020   0xF204 0x000B      ADDW     R0,R4,#+11
   \   00000024   0x0007             MOVS     R7,R0
    645              pdest                   = &p_mbox_data->OSEventTbl[0];
   \   00000026   0x1D28             ADDS     R0,R5,#+4
   \   00000028   0x4680             MOV      R8,R0
    646              for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x0006             MOVS     R6,R0
   \                     ??OSMboxQuery_2:
   \   0000002E   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   00000030   0x2E08             CMP      R6,#+8
   \   00000032   0xD207             BCS.N    ??OSMboxQuery_3
    647                  *pdest++ = *psrc++;
   \   00000034   0x7838             LDRB     R0,[R7, #+0]
   \   00000036   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   0000003A   0x1C7F             ADDS     R7,R7,#+1
   \   0000003C   0xF118 0x0801      ADDS     R8,R8,#+1
    648              }
   \   00000040   0x1C76             ADDS     R6,R6,#+1
   \   00000042   0xE7F4             B.N      ??OSMboxQuery_2
    649              p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
   \                     ??OSMboxQuery_3:
   \   00000044   0x6860             LDR      R0,[R4, #+4]
   \   00000046   0x6028             STR      R0,[R5, #+0]
    650              OS_EXIT_CRITICAL();
   \   00000048   0x4648             MOV      R0,R9
   \   0000004A   0x.... 0x....      BL       OS_CPU_SR_Restore
    651              return (OS_ERR_NONE);
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??OSMboxQuery_1:
   \   00000050   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
    652          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x3F 0x00          DC8      "\?",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     OSIntNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     OSEventFreeList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     OSLockNesting

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     OSTCBCur

   \                                 In section .rodata, align 2
   \   00000000   0x3F 0x00          DC8 "?"
    653          #endif                                                     /* OS_MBOX_QUERY_EN                         */
    654          #endif                                                     /* OS_MBOX_EN                               */

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   OSMboxAccept
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
      16   OSMboxCreate
        16   -> OS_CPU_SR_Restore
        16   -> OS_CPU_SR_Save
        16   -> OS_EventWaitListInit
      32   OSMboxDel
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save
        32   -> OS_EventTaskRdy
        32   -> OS_Sched
      24   OSMboxPend
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRemove
        24   -> OS_EventTaskWait
        24   -> OS_Sched
      24   OSMboxPendAbort
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      24   OSMboxPost
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      24   OSMboxPostOpt
        24   -> OS_CPU_SR_Restore
        24   -> OS_CPU_SR_Save
        24   -> OS_EventTaskRdy
        24   -> OS_Sched
      32   OSMboxQuery
        32   -> OS_CPU_SR_Restore
        32   -> OS_CPU_SR_Save


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Constant "?">
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
      40  OSMboxAccept
      82  OSMboxCreate
     248  OSMboxDel
     266  OSMboxPend
     124  OSMboxPendAbort
      86  OSMboxPost
     114  OSMboxPostOpt
      84  OSMboxQuery

 
     2 bytes in section .rodata
 1 064 bytes in section .text
 
 1 064 bytes of CODE  memory
     2 bytes of CONST memory

Errors: none
Warnings: none

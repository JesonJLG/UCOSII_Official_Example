###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.2.4510/W32 for ARM      08/Feb/2013  10:57:19 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\BSP\bsp_stlm75.c                                    #
#    Command line =  "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\BSP\bsp_stlm75.c" -D USE_STDPERIPH_DRIVER -lCN      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\" -o                         #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\" --no_cse --no_unroll        #
#                    --no_inline --no_code_motion --no_tbaa --no_clustering   #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Nor #
#                    mal.h" -I "C:\Users\daniel01\Desktop\FastFile Test       #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\uCOS-II\IAR\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\" -I                          #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\OS\uCOS-II\" -I               #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\ST\STM32\inc\" -I             #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\uCOS-II\" -I                  #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\BSP\IAR\" -I                      #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-LIB\Ports\ARM-Cortex- #
#                    M3\IAR\" -I "C:\Users\daniel01\Desktop\FastFile Test     #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\" -I              #
#                    "C:\Users\daniel01\Desktop\FastFile Test                 #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uC-CPU\ARM-Cortex-M3\IAR #
#                    \" -I "C:\Users\daniel01\Desktop\FastFile Test           #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Ports\ARM-Cortex #
#                    -M3\Generic\IAR\" -I "C:\Users\daniel01\Desktop\FastFile #
#                     Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval #
#                    -STM32F107\uCOS-II\IAR\..\..\..\..\..\uCOS-II\Source\"   #
#                    -On --use_c++_inline                                     #
#    List file    =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\List\bsp_stlm75.lst               #
#    Object file  =  C:\Users\daniel01\Desktop\FastFile Test                  #
#                    Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32 #
#                    F107\uCOS-II\IAR\Flash\Obj\bsp_stlm75.o                  #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\daniel01\Desktop\FastFile Test Folder\Micrium\Software\EvalBoards\Micrium\uC-Eval-STM32F107\BSP\bsp_stlm75.c
      1          /*
      2          *********************************************************************************************************
      3          *                                     MICRIUM BOARD SUPPORT SUPPORT
      4          *
      5          *                          (c) Copyright 2003-2009; Micrium, Inc.; Weston, FL
      6          *
      7          *               All rights reserved.  Protected by international copyright laws.
      8          *               Knowledge of the source code may NOT be used to develop a similar product.
      9          *               Please help us continue to provide the Embedded community with the finest
     10          *               software available.  Your honesty is greatly appreciated.
     11          *********************************************************************************************************
     12          */
     13          
     14          /*
     15          *********************************************************************************************************
     16          *
     17          *                                     MICIUM BOARD SUPPORT PACKAGE
     18          *                                 STLM75 CMOS TEMPERATURE SENSOR DRIVER
     19          *                                                                         
     20          *
     21          * Filename      : bsp_stlm75.c
     22          * Version       : V1.00
     23          * Programmer(s) : FT
     24          *********************************************************************************************************
     25          * Note(s)       :
     26          *********************************************************************************************************
     27          */
     28          
     29          /*
     30          *********************************************************************************************************
     31          *                                             INCLUDE FILES
     32          *********************************************************************************************************
     33          */
     34          
     35          #define  BSP_STLM75_MODULE
     36          #include <bsp.h>
     37          
     38          
     39          /*
     40          *********************************************************************************************************
     41          *                                              LOCAL DEFINES
     42          *********************************************************************************************************
     43          */
     44          
     45          #define BSP_STLM75_REG_TEMP                      DEF_BIT_NONE
     46          #define BSP_STLM75_REG_CONF                      DEF_BIT_00
     47          #define BSP_STLM75_REG_T_HYST                    DEF_BIT_01
     48          #define BSP_STLM75_REG_T_OS                     (DEF_BIT_01 | DEF_BIT_00)
     49          
     50          
     51          #define BSP_STLM75_REG_CONF_SD                   DEF_BIT_00
     52          #define BSP_STLM75_REG_CONF_THERMOSTAT_MODE      DEF_BIT_01
     53          #define BSP_STLM75_REG_CONF_POL                  DEF_BIT_02
     54          #define BSP_STLM75_REG_CONF_FT0                  DEF_BIT_03
     55          #define BSP_STLM75_REG_CONF_FT1                  DEF_BIT_04
     56          
     57          
     58          #define BSP_STLM75_I2C_ADDR                    ((CPU_INT08U)0x48)
     59          
     60          
     61          /*
     62          *********************************************************************************************************
     63          *                                           LOCAL CONSTANTS
     64          *********************************************************************************************************
     65          */
     66          
     67          
     68          /*
     69          *********************************************************************************************************
     70          *                                           LOCAL MACRO'S
     71          *********************************************************************************************************
     72          */
     73          
     74          #define  BSP_STLM75_TEMP_TO_REG(temp)         ((CPU_INT16U)((((CPU_INT16U)(temp) << 8) & DEF_BIT_FIELD(9, 7))))
     75          #define  BSP_STLM75_REG_TO_TEMP(reg)          ((CPU_INT08S)((((CPU_INT16U)(reg)  >> 8) & DEF_BIT_FIELD(9, 0))))
     76          
     77          
     78          /*
     79          *********************************************************************************************************
     80          *                                          LOCAL DATA TYPES
     81          *********************************************************************************************************
     82          */
     83          
     84          
     85          /*
     86          *********************************************************************************************************
     87          *                                            LOCAL TABLES
     88          *********************************************************************************************************
     89          */
     90          
     91          
     92          /*
     93          *********************************************************************************************************
     94          *                                       LOCAL GLOBAL VARIABLES
     95          *********************************************************************************************************
     96          */
     97          
     98          
     99          /*
    100          *********************************************************************************************************
    101          *                                      LOCAL FUNCTION PROTOTYPES
    102          *********************************************************************************************************
    103          */
    104          
    105          
    106          static  CPU_BOOLEAN  BSP_STLM75_WrReg_08  (CPU_INT08U  reg,
    107                                                     CPU_INT08U  reg_val);
    108          
    109          static  CPU_BOOLEAN  BSP_STLM75_WrReg_16  (CPU_INT08U  reg,
    110                                                     CPU_INT16U  reg_val);
    111          
    112          static  CPU_BOOLEAN  BSP_STLM75_RdReg_16  (CPU_INT08U  reg,
    113                                                     CPU_INT16U *p_reg_val);
    114          
    115          
    116          /*
    117          *********************************************************************************************************
    118          *                                     LOCAL CONFIGURATION ERRORS
    119          *********************************************************************************************************
    120          */
    121          
    122          
    123          /*
    124          *********************************************************************************************************
    125          *********************************************************************************************************
    126          **                                         GLOBAL FUNCTIONS
    127          *********************************************************************************************************
    128          *********************************************************************************************************
    129          */
    130          
    131          /*
    132          *********************************************************************************************************
    133          *                                        BSP_STLM75_Init ()
    134          *
    135          * Description : Initialize the the STLM75 Tempeture sensor.
    136          *
    137          * Argument(s) : none.
    138          *
    139          * Return(s)   : DEF_OK     If the STLM75 Tempeture sensor was initialized
    140          *               DEF_FAIL   If the STLM75 Tempeture sensor could not be initialized.
    141          *
    142          * Caller(s)   : Application
    143          *
    144          * Note(s)     : none.
    145          *********************************************************************************************************
    146          */
    147          

   \                                 In section .text, align 2, keep-with-next
    148          CPU_BOOLEAN  BSP_STLM75_Init (void)
    149          {
   \                     BSP_STLM75_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
    150              CPU_BOOLEAN  err;
    151              
    152              
    153              err = BSP_I2C_Init(BSP_I2C_ID_I2C1, 
    154                                 BSP_I2C_MODE_STANDARD, 
    155                                 BSP_I2C_MODE_STANDARD_MAX_FREQ_HZ);
   \   00000002   0x....             LDR.N    R2,??DataTable0  ;; 0x186a0
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      BL       BSP_I2C_Init
   \   0000000C   0x0004             MOVS     R4,R0
    156              
    157              return (err);
   \   0000000E   0x0020             MOVS     R0,R4
   \   00000010   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
    158              
    159          }
    160          
    161          
    162          /*
    163          *
    164          *********************************************************************************************************
    165          *                                        BSP_STLM75_CfgSet()
    166          *
    167          * Description : Configures the STLM75 Tempeture sensor
    168          *
    169          * Argument(s) : p_stlm75_cfg    Pointer to the STLM75 configuration.
    170          *
    171          * Return(s)   : DEF_OK     If the STLM75 Tempeture Sensor configuration could be returned
    172          *               DEF_FAIL   If the STLM75 Tempeture sensor configuration could not be returned
    173          *
    174          * Caller(s)   : Application
    175          *
    176          * Note(s)     : none.
    177          *********************************************************************************************************
    178          */
    179          

   \                                 In section .text, align 2, keep-with-next
    180          CPU_BOOLEAN  BSP_STLM75_CfgSet (BSP_STLM75_CFG  *p_stlm75_cfg)
    181          {
   \                     BSP_STLM75_CfgSet:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x0004             MOVS     R4,R0
    182              CPU_INT16U   reg_val;
    183              CPU_BOOLEAN  err;
    184              
    185              
    186              if (p_stlm75_cfg == (BSP_STLM75_CFG *)0) {
   \   00000004   0x2C00             CMP      R4,#+0
   \   00000006   0xD101             BNE.N    ??BSP_STLM75_CfgSet_0
    187                  return (DEF_FAIL);
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xE04E             B.N      ??BSP_STLM75_CfgSet_1
    188              }
    189                                                                          /* --------- SET THE CONFIGURATION REGISTER -------- */
    190              reg_val = DEF_BIT_NONE;
   \                     ??BSP_STLM75_CfgSet_0:
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x0005             MOVS     R5,R0
    191              
    192              if (p_stlm75_cfg->Mode == BSP_STLM75_MODE_INTERRUPT) {
   \   00000010   0x7960             LDRB     R0,[R4, #+5]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD101             BNE.N    ??BSP_STLM75_CfgSet_2
    193                  reg_val = BSP_STLM75_REG_CONF_THERMOSTAT_MODE;
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0x0005             MOVS     R5,R0
    194              }
    195          
    196              if (p_stlm75_cfg->IntPol == BSP_STLM75_INT_POL_HIGH) {
   \                     ??BSP_STLM75_CfgSet_2:
   \   0000001A   0x7920             LDRB     R0,[R4, #+4]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xD103             BNE.N    ??BSP_STLM75_CfgSet_3
    197                  DEF_BIT_SET(reg_val, BSP_STLM75_REG_CONF_POL);
   \   00000020   0xF055 0x0504      ORRS     R5,R5,#0x4
   \   00000024   0x0028             MOVS     R0,R5
   \   00000026   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
    198              }
    199              
    200              switch (p_stlm75_cfg->FaultLevel) {
   \                     ??BSP_STLM75_CfgSet_3:
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD014             BEQ.N    ??BSP_STLM75_CfgSet_4
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD008             BEQ.N    ??BSP_STLM75_CfgSet_5
   \   00000032   0xD302             BCC.N    ??BSP_STLM75_CfgSet_6
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD00A             BEQ.N    ??BSP_STLM75_CfgSet_7
   \   00000038   0xE00F             B.N      ??BSP_STLM75_CfgSet_8
    201                  case BSP_STLM75_FAULT_LEVEL_2:
    202                       DEF_BIT_SET(reg_val, BSP_STLM75_REG_CONF_FT0);
   \                     ??BSP_STLM75_CfgSet_6:
   \   0000003A   0xF055 0x0508      ORRS     R5,R5,#0x8
   \   0000003E   0x0028             MOVS     R0,R5
   \   00000040   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
    203                       break;
   \   00000042   0xE00C             B.N      ??BSP_STLM75_CfgSet_9
    204                       
    205                  case BSP_STLM75_FAULT_LEVEL_4:
    206                       DEF_BIT_SET(reg_val, BSP_STLM75_REG_CONF_FT1);
   \                     ??BSP_STLM75_CfgSet_5:
   \   00000044   0xF055 0x0510      ORRS     R5,R5,#0x10
   \   00000048   0x0028             MOVS     R0,R5
   \   0000004A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
    207                       break;
   \   0000004C   0xE007             B.N      ??BSP_STLM75_CfgSet_9
    208          
    209                  case BSP_STLM75_FAULT_LEVEL_6:
    210                       DEF_BIT_SET(reg_val, BSP_STLM75_REG_CONF_FT1 | BSP_STLM75_REG_CONF_FT0);
   \                     ??BSP_STLM75_CfgSet_7:
   \   0000004E   0xF055 0x0518      ORRS     R5,R5,#0x18
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
    211                       break;
   \   00000056   0xE002             B.N      ??BSP_STLM75_CfgSet_9
    212          
    213                  case BSP_STLM75_FAULT_LEVEL_1:
    214                       break;
   \                     ??BSP_STLM75_CfgSet_4:
   \   00000058   0xE001             B.N      ??BSP_STLM75_CfgSet_9
    215                       
    216                  default:
    217                       return (DEF_FAIL);
   \                     ??BSP_STLM75_CfgSet_8:
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xE025             B.N      ??BSP_STLM75_CfgSet_1
    218              }
    219              
    220              err = BSP_STLM75_WrReg_08((CPU_INT08U)BSP_STLM75_REG_CONF, 
    221                                        (CPU_INT08U)reg_val);
   \                     ??BSP_STLM75_CfgSet_9:
   \   0000005E   0x0029             MOVS     R1,R5
   \   00000060   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       BSP_STLM75_WrReg_08
   \   00000068   0x0006             MOVS     R6,R0
    222              
    223              if (err == DEF_FAIL) {
   \   0000006A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000006C   0x2E00             CMP      R6,#+0
   \   0000006E   0xD101             BNE.N    ??BSP_STLM75_CfgSet_10
    224                  return (DEF_FAIL);
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xE01A             B.N      ??BSP_STLM75_CfgSet_1
    225              }
    226              
    227              reg_val = BSP_STLM75_TEMP_TO_REG(p_stlm75_cfg->HystTemp);
   \                     ??BSP_STLM75_CfgSet_10:
   \   00000074   0xF9B4 0x0002      LDRSH    R0,[R4, #+2]
   \   00000078   0x0200             LSLS     R0,R0,#+8
   \   0000007A   0x0005             MOVS     R5,R0
    228              
    229              err = BSP_STLM75_WrReg_16((CPU_INT08U)BSP_STLM75_REG_T_HYST, 
    230                                        (CPU_INT16U)reg_val);
   \   0000007C   0x0029             MOVS     R1,R5
   \   0000007E   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0x.... 0x....      BL       BSP_STLM75_WrReg_16
   \   00000086   0x0006             MOVS     R6,R0
    231              
    232              if (err == DEF_FAIL) {
   \   00000088   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000008A   0x2E00             CMP      R6,#+0
   \   0000008C   0xD101             BNE.N    ??BSP_STLM75_CfgSet_11
    233                  return (DEF_FAIL);
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0xE00B             B.N      ??BSP_STLM75_CfgSet_1
    234              }
    235          
    236              
    237              reg_val = BSP_STLM75_TEMP_TO_REG(p_stlm75_cfg->OverLimitTemp);
   \                     ??BSP_STLM75_CfgSet_11:
   \   00000092   0xF9B4 0x0006      LDRSH    R0,[R4, #+6]
   \   00000096   0x0200             LSLS     R0,R0,#+8
   \   00000098   0x0005             MOVS     R5,R0
    238              
    239              err = BSP_STLM75_WrReg_16((CPU_INT08U)BSP_STLM75_REG_T_OS, 
    240                                        (CPU_INT16U)reg_val);
   \   0000009A   0x0029             MOVS     R1,R5
   \   0000009C   0xB289             UXTH     R1,R1            ;; ZeroExt  R1,R1,#+16,#+16
   \   0000009E   0x2003             MOVS     R0,#+3
   \   000000A0   0x.... 0x....      BL       BSP_STLM75_WrReg_16
   \   000000A4   0x0006             MOVS     R6,R0
    241              
    242              return (err);
   \   000000A6   0x0030             MOVS     R0,R6
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \                     ??BSP_STLM75_CfgSet_1:
   \   000000AA   0xBD70             POP      {R4-R6,PC}       ;; return
    243          
    244          }
    245          
    246          
    247          /*
    248          *********************************************************************************************************
    249          *                                        BSP_STLM75_WrReg_08()
    250          *
    251          * Description : Write 8-bit value to STLM75 register.
    252          *
    253          * Argument(s) : reg        STLM75's register
    254          *                              BSP_STLM75_REG_TEMP
    255          *                              BSP_STLM75_REG_CONF
    256          *                              BSP_STLM75_REG_T_HYST
    257          *                              BSP_STLM75_REG_T_OS
    258          *
    259          * Return(s)   : DEF_OK     If the STLM75's register could be written.
    260          *               DEF_FAIL   If the STLM75's register could not be written.
    261          *
    262          * Caller(s)   : Application
    263          *
    264          * Note(s)     : none.
    265          *********************************************************************************************************
    266          */
    267          

   \                                 In section .text, align 2, keep-with-next
    268          static  CPU_BOOLEAN  BSP_STLM75_WrReg_08  (CPU_INT08U  reg,
    269                                                     CPU_INT08U  reg_val)
    270          {
   \                     BSP_STLM75_WrReg_08:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    271              CPU_INT08U   i2c_buf[2];
    272              CPU_BOOLEAN  err;
    273              
    274              
    275              i2c_buf[0] = reg;
   \   00000008   0xF88D 0x4000      STRB     R4,[SP, #+0]
    276              i2c_buf[1] = reg_val;
   \   0000000C   0xF88D 0x5001      STRB     R5,[SP, #+1]
    277              
    278              
    279              err = BSP_I2C_Wr( BSP_I2C_ID_I2C1, 
    280                                BSP_STLM75_I2C_ADDR, 
    281                               &i2c_buf[0], 
    282                                2);
   \   00000010   0x2302             MOVS     R3,#+2
   \   00000012   0xAA00             ADD      R2,SP,#+0
   \   00000014   0x2148             MOVS     R1,#+72
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       BSP_I2C_Wr
   \   0000001C   0x0006             MOVS     R6,R0
    283              
    284              return (err);
   \   0000001E   0x0030             MOVS     R0,R6
   \   00000020   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000022   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    285          }
    286          
    287          
    288          /*
    289          *********************************************************************************************************
    290          *                                        BSP_STLM75_WrReg_16()
    291          *
    292          * Description : Write 16-bit value to STLM75 register.
    293          *
    294          * Argument(s) : reg        STLM75's register
    295          *                              BSP_STLM75_REG_TEMP
    296          *                              BSP_STLM75_REG_CONF
    297          *                              BSP_STLM75_REG_T_HYST
    298          *                              BSP_STLM75_REG_T_OS
    299          *
    300          * Return(s)   : DEF_OK     If the STLM75's register could be written.
    301          *               DEF_FAIL   If the STLM75's register could not be written.
    302          *
    303          * Caller(s)   : Application
    304          *
    305          * Note(s)     : none.
    306          *********************************************************************************************************
    307          */
    308          

   \                                 In section .text, align 2, keep-with-next
    309          static  CPU_BOOLEAN  BSP_STLM75_WrReg_16  (CPU_INT08U  reg,
    310                                                     CPU_INT16U  reg_val)
    311          {
   \                     BSP_STLM75_WrReg_16:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    312              CPU_INT08U   i2c_buf[3];
    313              CPU_BOOLEAN  err;
    314              
    315              
    316              i2c_buf[0] = reg;
   \   00000008   0xF88D 0x4000      STRB     R4,[SP, #+0]
    317              i2c_buf[1] = (reg_val >> 8) & DEF_BIT_FIELD(8, 0);
   \   0000000C   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \   0000000E   0x0A28             LSRS     R0,R5,#+8
   \   00000010   0xF88D 0x0001      STRB     R0,[SP, #+1]
    318              i2c_buf[2] = (reg_val >> 0) & DEF_BIT_FIELD(8, 0);;
   \   00000014   0x0028             MOVS     R0,R5
   \   00000016   0xF88D 0x0002      STRB     R0,[SP, #+2]
    319              
    320              
    321              err = BSP_I2C_Wr( BSP_I2C_ID_I2C1, 
    322                                BSP_STLM75_I2C_ADDR, 
    323                               &i2c_buf[0], 
    324                                3);
   \   0000001A   0x2303             MOVS     R3,#+3
   \   0000001C   0xAA00             ADD      R2,SP,#+0
   \   0000001E   0x2148             MOVS     R1,#+72
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       BSP_I2C_Wr
   \   00000026   0x0006             MOVS     R6,R0
    325              
    326              return (err);
   \   00000028   0x0030             MOVS     R0,R6
   \   0000002A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000002C   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    327          }
    328          
    329          
    330          /*
    331          *********************************************************************************************************
    332          *                                        BSP_STLM75_RdReg_16()
    333          *
    334          * Description : Read 16-bit register from STLM75 device
    335          *
    336          * Argument(s) : reg        STLM75's register
    337          *                              BSP_STLM75_REG_TEMP
    338          *                              BSP_STLM75_REG_CONF
    339          *                              BSP_STLM75_REG_T_HYST
    340          *                              BSP_STLM75_REG_T_OS
    341          *
    342          * Return(s)   : DEF_OK     If the STLM75's register could be read.
    343          *               DEF_FAIL   If the STLM75's register could not be read.
    344          *
    345          * Caller(s)   : Application
    346          *
    347          * Note(s)     : none.
    348          *********************************************************************************************************
    349          */
    350          

   \                                 In section .text, align 2, keep-with-next
    351          static  CPU_BOOLEAN  BSP_STLM75_RdReg_16  (CPU_INT08U   reg,
    352                                                     CPU_INT16U  *p_reg_val)
    353          {
   \                     BSP_STLM75_RdReg_16:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    354              CPU_INT08U   i2c_buf[3];
    355              CPU_BOOLEAN  err;
    356              
    357              
    358              i2c_buf[0] = reg;
   \   00000008   0xF88D 0x4000      STRB     R4,[SP, #+0]
    359              
    360              
    361              err = BSP_I2C_WrRd( BSP_I2C_ID_I2C1, 
    362                                  BSP_STLM75_I2C_ADDR, 
    363                                 &i2c_buf[0], 
    364                                  3);
   \   0000000C   0x2303             MOVS     R3,#+3
   \   0000000E   0xAA00             ADD      R2,SP,#+0
   \   00000010   0x2148             MOVS     R1,#+72
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x.... 0x....      BL       BSP_I2C_WrRd
   \   00000018   0x0006             MOVS     R6,R0
    365          
    366              if (err == DEF_FAIL) {
   \   0000001A   0xB2F6             UXTB     R6,R6            ;; ZeroExt  R6,R6,#+24,#+24
   \   0000001C   0x2E00             CMP      R6,#+0
   \   0000001E   0xD101             BNE.N    ??BSP_STLM75_RdReg_16_0
    367                 return (DEF_FAIL);
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE007             B.N      ??BSP_STLM75_RdReg_16_1
    368              }
    369          
    370              *p_reg_val   = (i2c_buf[2] << 0)
    371                           | (i2c_buf[1] << 8);
   \                     ??BSP_STLM75_RdReg_16_0:
   \   00000024   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \   00000028   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000002C   0xEA50 0x2001      ORRS     R0,R0,R1, LSL #+8
   \   00000030   0x8028             STRH     R0,[R5, #+0]
    372              
    373              return (DEF_OK);
   \   00000032   0x2001             MOVS     R0,#+1
   \                     ??BSP_STLM75_RdReg_16_1:
   \   00000034   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    374          }
    375          
    376          
    377          /*
    378          *********************************************************************************************************
    379          *                                        BSP_STLM75_TempGet()
    380          *
    381          * Description : Read the current temperature from the STLM75
    382          *
    383          * Argument(s) : temp_unit       Temperature unit:
    384          *                                   BSP_STLM75_TEMP_UNIT_CELSIUS
    385          *                                   BSP_STLM75_TEMP_UNIT_FAHRENHEIT
    386          *                                   BSP_STLM75_TEMP_UNIT_KELVIN
    387          *
    388          *               p_temp_val      Pointer to the variable that will store the temperature.
    389          
    390          *
    391          * Return(s)   : DEF_OK     If the temperature could be read.
    392          *               DEF_FAIL   If the temperature could not be read.
    393          *
    394          * Caller(s)   : Application
    395          *
    396          * Note(s)     : none.
    397          *********************************************************************************************************
    398          */
    399          

   \                                 In section .text, align 2, keep-with-next
    400          CPU_BOOLEAN  BSP_STLM75_TempGet  (CPU_INT08U   temp_unit,
    401                                            CPU_INT16S  *p_temp_val)
    402          
    403          {
   \                     BSP_STLM75_TempGet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    404              CPU_INT16S   temp_c;
    405              CPU_INT16U   reg_val;
    406              CPU_BOOLEAN  err;
    407              
    408              
    409              err = BSP_STLM75_RdReg_16(BSP_STLM75_REG_TEMP,
    410                                       &reg_val);
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       BSP_STLM75_RdReg_16
   \   0000000E   0x0007             MOVS     R7,R0
    411                  
    412              if (err == DEF_FAIL) {
   \   00000010   0xB2FF             UXTB     R7,R7            ;; ZeroExt  R7,R7,#+24,#+24
   \   00000012   0x2F00             CMP      R7,#+0
   \   00000014   0xD101             BNE.N    ??BSP_STLM75_TempGet_0
    413                  return (DEF_FAIL);
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xE01F             B.N      ??BSP_STLM75_TempGet_1
    414              }
    415              
    416          
    417              temp_c  = BSP_STLM75_REG_TO_TEMP(reg_val);
   \                     ??BSP_STLM75_TempGet_0:
   \   0000001A   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   0000001E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000020   0x0A00             LSRS     R0,R0,#+8
   \   00000022   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000024   0x0006             MOVS     R6,R0
    418          
    419              switch (temp_unit) {
   \   00000026   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000028   0x2C00             CMP      R4,#+0
   \   0000002A   0xD003             BEQ.N    ??BSP_STLM75_TempGet_2
   \   0000002C   0x2C02             CMP      R4,#+2
   \   0000002E   0xD00D             BEQ.N    ??BSP_STLM75_TempGet_3
   \   00000030   0xD302             BCC.N    ??BSP_STLM75_TempGet_4
   \   00000032   0xE00F             B.N      ??BSP_STLM75_TempGet_5
    420                  case BSP_STLM75_TEMP_UNIT_CELSIUS:
    421                      *p_temp_val = temp_c;
   \                     ??BSP_STLM75_TempGet_2:
   \   00000034   0x802E             STRH     R6,[R5, #+0]
    422                       break;
   \   00000036   0xE00F             B.N      ??BSP_STLM75_TempGet_6
    423                       
    424                  case BSP_STLM75_TEMP_UNIT_FAHRENHEIT:
    425                       *p_temp_val = ((temp_c * 9) / 5) + 32;
   \                     ??BSP_STLM75_TempGet_4:
   \   00000038   0xB236             SXTH     R6,R6            ;; SignExt  R6,R6,#+16,#+16
   \   0000003A   0x2009             MOVS     R0,#+9
   \   0000003C   0xFB00 0xF006      MUL      R0,R0,R6
   \   00000040   0x2105             MOVS     R1,#+5
   \   00000042   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000046   0x3020             ADDS     R0,R0,#+32
   \   00000048   0x8028             STRH     R0,[R5, #+0]
    426                       break;
   \   0000004A   0xE005             B.N      ??BSP_STLM75_TempGet_6
    427                  
    428                  
    429                  case BSP_STLM75_TEMP_UNIT_KELVIN:
    430                       *p_temp_val = ((temp_c + 273));
   \                     ??BSP_STLM75_TempGet_3:
   \   0000004C   0xF206 0x1011      ADDW     R0,R6,#+273
   \   00000050   0x8028             STRH     R0,[R5, #+0]
    431                       break;
   \   00000052   0xE001             B.N      ??BSP_STLM75_TempGet_6
    432                       
    433                  
    434                  default:
    435                       return (DEF_FAIL);
   \                     ??BSP_STLM75_TempGet_5:
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xE000             B.N      ??BSP_STLM75_TempGet_1
    436                       
    437              }
    438                 
    439             return (DEF_OK);
   \                     ??BSP_STLM75_TempGet_6:
   \   00000058   0x2001             MOVS     R0,#+1
   \                     ??BSP_STLM75_TempGet_1:
   \   0000005A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    440          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable0:
   \   00000000   0x000186A0         DC32     0x186a0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   BSP_STLM75_CfgSet
        16   -> BSP_STLM75_WrReg_08
        16   -> BSP_STLM75_WrReg_16
       8   BSP_STLM75_Init
         8   -> BSP_I2C_Init
      24   BSP_STLM75_RdReg_16
        24   -> BSP_I2C_WrRd
      24   BSP_STLM75_TempGet
        24   -> BSP_STLM75_RdReg_16
      24   BSP_STLM75_WrReg_08
        24   -> BSP_I2C_Wr
      24   BSP_STLM75_WrReg_16
        24   -> BSP_I2C_Wr


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable0
     172  BSP_STLM75_CfgSet
      20  BSP_STLM75_Init
      54  BSP_STLM75_RdReg_16
      92  BSP_STLM75_TempGet
      36  BSP_STLM75_WrReg_08
      46  BSP_STLM75_WrReg_16

 
 424 bytes in section .text
 
 424 bytes of CODE memory

Errors: none
Warnings: none
